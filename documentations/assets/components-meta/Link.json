{
  "props": [
    {
      "name": "id",
      "type": "string | undefined",
      "required": false,
      "description": "ID for the link",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "string | undefined",
        "schema": [
          "undefined",
          "string"
        ]
      }
    },
    {
      "name": "accessibilityLabel",
      "type": "string | undefined",
      "required": false,
      "description": "Descriptive text to be read to screenreaders",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "string | undefined",
        "schema": [
          "undefined",
          "string"
        ]
      }
    },
    {
      "name": "removeUnderline",
      "type": "boolean | undefined",
      "required": false,
      "description": "Removes text decoration underline to the link",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "boolean | undefined",
        "schema": [
          "undefined",
          "false",
          "true"
        ]
      }
    },
    {
      "name": "dataPrimaryLink",
      "type": "boolean | undefined",
      "required": false,
      "description": "Indicates whether or not the link is the primary navigation link when rendered inside of an `IndexTable.Row`",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "boolean | undefined",
        "schema": [
          "undefined",
          "false",
          "true"
        ]
      }
    },
    {
      "name": "url",
      "type": "string | undefined",
      "required": false,
      "description": "The url to link to",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "string | undefined",
        "schema": [
          "undefined",
          "string"
        ]
      }
    },
    {
      "name": "external",
      "type": "boolean | undefined",
      "required": false,
      "description": "Makes the link open in a new tab",
      "tags": [
        {
          "name": "deprecated",
          "text": "use `target` set to `_blank` instead"
        }
      ],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "boolean | undefined",
        "schema": [
          "undefined",
          "false",
          "true"
        ]
      }
    },
    {
      "name": "target",
      "type": "Target | undefined",
      "required": false,
      "description": "Where to display the url",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "Target | undefined",
        "schema": [
          "undefined",
          "\"_blank\"",
          "\"_self\"",
          "\"_parent\"",
          "\"_top\""
        ]
      }
    },
    {
      "name": "to",
      "type": "RouteLocationRaw | undefined",
      "required": false,
      "description": "Router link 'to' option, if this prop is provided router-link component will be render\n<a href=\"https://router.vuejs.org/api/interfaces/RouterLinkProps.html#to\" target=\"blank\"> details </a>",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "RouteLocationRaw | undefined",
        "schema": [
          "undefined",
          "string",
          {
            "kind": "object",
            "type": "RouteLocationPathRaw",
            "schema": {
              "query": {
                "name": "query",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "LocationQueryRaw | undefined",
                "declarations": [],
                "schema": {
                  "kind": "enum",
                  "type": "LocationQueryRaw | undefined",
                  "schema": [
                    "undefined",
                    "LocationQueryRaw"
                  ]
                }
              },
              "hash": {
                "name": "hash",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "declarations": [],
                "schema": {
                  "kind": "enum",
                  "type": "string | undefined",
                  "schema": [
                    "undefined",
                    "string"
                  ]
                }
              },
              "path": {
                "name": "path",
                "global": false,
                "description": "",
                "tags": [],
                "required": true,
                "type": "string",
                "declarations": [],
                "schema": "string"
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Replace the entry in the history instead of pushing a new entry",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "declarations": [],
                "schema": {
                  "kind": "enum",
                  "type": "boolean | undefined",
                  "schema": [
                    "undefined",
                    "false",
                    "true"
                  ]
                }
              },
              "force": {
                "name": "force",
                "global": false,
                "description": "Triggers the navigation even if the location is the same as the current one.\nNote this will also add a new entry to the history unless `replace: true`\nis passed.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "declarations": [],
                "schema": "boolean | undefined"
              },
              "state": {
                "name": "state",
                "global": false,
                "description": "State to save using the History API. This cannot contain any reactive\nvalues and some primitives like Symbols are forbidden. More info at\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                "tags": [],
                "required": false,
                "type": "HistoryState | undefined",
                "declarations": [],
                "schema": {
                  "kind": "enum",
                  "type": "HistoryState | undefined",
                  "schema": [
                    "undefined",
                    {
                      "kind": "object",
                      "type": "HistoryState",
                      "schema": {}
                    }
                  ]
                }
              }
            }
          },
          {
            "kind": "object",
            "type": "RouteLocationNamedRaw",
            "schema": {
              "query": {
                "name": "query",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "LocationQueryRaw | undefined",
                "declarations": [],
                "schema": "LocationQueryRaw | undefined"
              },
              "hash": {
                "name": "hash",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "string | undefined",
                "declarations": [],
                "schema": "string | undefined"
              },
              "name": {
                "name": "name",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "RouteRecordName | undefined",
                "declarations": [],
                "schema": {
                  "kind": "enum",
                  "type": "RouteRecordName | undefined",
                  "schema": [
                    "undefined",
                    "string",
                    "symbol"
                  ]
                }
              },
              "params": {
                "name": "params",
                "global": false,
                "description": "",
                "tags": [],
                "required": false,
                "type": "RouteParamsRaw | undefined",
                "declarations": [],
                "schema": {
                  "kind": "enum",
                  "type": "RouteParamsRaw | undefined",
                  "schema": [
                    "undefined",
                    "RouteParamsRaw"
                  ]
                }
              },
              "replace": {
                "name": "replace",
                "global": false,
                "description": "Replace the entry in the history instead of pushing a new entry",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "declarations": [],
                "schema": "boolean | undefined"
              },
              "force": {
                "name": "force",
                "global": false,
                "description": "Triggers the navigation even if the location is the same as the current one.\nNote this will also add a new entry to the history unless `replace: true`\nis passed.",
                "tags": [],
                "required": false,
                "type": "boolean | undefined",
                "declarations": [],
                "schema": "boolean | undefined"
              },
              "state": {
                "name": "state",
                "global": false,
                "description": "State to save using the History API. This cannot contain any reactive\nvalues and some primitives like Symbols are forbidden. More info at\nhttps://developer.mozilla.org/en-US/docs/Web/API/History/state",
                "tags": [],
                "required": false,
                "type": "HistoryState | undefined",
                "declarations": [],
                "schema": "HistoryState | undefined"
              }
            }
          }
        ]
      }
    },
    {
      "name": "monochrome",
      "type": "boolean | undefined",
      "required": false,
      "description": "Makes the link color the same as the current text color and adds an underline",
      "tags": [],
      "declarations": [],
      "schema": {
        "kind": "enum",
        "type": "boolean | undefined",
        "schema": [
          "undefined",
          "false",
          "true"
        ]
      }
    }
  ],
  "events": [
    {
      "name": "click",
      "description": "Callback when a link is clicked",
      "params": {}
    }
  ],
  "slots": [
    {
      "name": "default",
      "type": "VueNode",
      "description": "Content to display inside the link",
      "declarations": [],
      "schema": "VueNode"
    }
  ]
}