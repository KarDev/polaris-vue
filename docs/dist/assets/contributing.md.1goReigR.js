import { _ as _export_sfc, o as openBlock, c as createElementBlock, U as createStaticVNode } from "./chunks/framework.2IsXxFXf.js";
const __pageData = JSON.parse('{"title":"Contributing","description":"","frontmatter":{"title":"Contributing","outline":"deep","next":false},"headers":[],"relativePath":"contributing.md","filePath":"contributing.md"}');
const _sfc_main = { name: "contributing.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h1><p>Polaris Vue by ownego is an open source project and we are very happy to accept community contributions.</p><h2 id="issues" tabindex="-1">Issues <a class="header-anchor" href="#issues" aria-label="Permalink to &quot;Issues&quot;">​</a></h2><p>If you find a bug in the source code or a mistake in the documentation, you can help us by submitting an issue to our <a href="https://github.com/ownego/polaris-vue" target="_blank" rel="noreferrer">GitHub Repository</a>. Even better, you can submit a Pull Request with a fix.</p><p>Follow <a href="https://github.com/orgs/ownego/projects/2" target="_blank" rel="noreferrer">Github Project</a> to see what we are working on and the progress of the project.</p><h2 id="dev-locally" tabindex="-1">Dev locally <a class="header-anchor" href="#dev-locally" aria-label="Permalink to &quot;Dev locally&quot;">​</a></h2><p>Clone/Fork the repository then install dependencies with <code>yarn install</code></p><h4 id="install-shopify-polaris-submodule" tabindex="-1">Install Shopify Polaris submodule <a class="header-anchor" href="#install-shopify-polaris-submodule" aria-label="Permalink to &quot;Install Shopify Polaris submodule&quot;">​</a></h4><ul><li>Fetch the Shopify Polaris submodule with <code>git submodule update --init --recursive</code></li><li>Go to <code>/polaris</code> folder and install dependencies with <code>yarn install</code></li><li>Build tokens &amp; neccessary resources with <code>yarn build</code></li></ul><h4 id="run" tabindex="-1">Run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;Run&quot;">​</a></h4><ul><li>Create <code>Demo.vue</code> file in <code>src/</code> folder and test your component there.</li><li>Run the development server with <code>yarn dev</code></li></ul><h2 id="pull-requests" tabindex="-1">Pull Requests <a class="header-anchor" href="#pull-requests" aria-label="Permalink to &quot;Pull Requests&quot;">​</a></h2><p>We actively welcome your Pull Requests. Before you submit a Pull Request, please make sure that your code follows our coding conventions.</p><p>To submit a Pull Request, follow these steps:</p><ol><li>Fork the repository and create your branch from <code>main</code>.</li><li>If you&#39;ve added code that should be tested.</li><li>The whole documentation is automatically generated from the source code. If you&#39;ve changed something in the source code, please make sure that the documentation is still correct.</li><li>Issue that Pull Request!</li></ol><h3 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h3><p>Currently, we have not used any testing framework yet. You can create Demo.vue file in <code>src/</code> folder and test your component there.</p><p>You can also create examples in <code>docs/components/...</code> folder and test your component there.</p><h3 id="coding-conventions" tabindex="-1">Coding conventions <a class="header-anchor" href="#coding-conventions" aria-label="Permalink to &quot;Coding conventions&quot;">​</a></h3><ul><li>We use <a href="https://eslint.org/" target="_blank" rel="noreferrer">ESLint</a> to ensure that our code follows our coding conventions.</li><li>We use <a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="noreferrer">Pug</a> for HTML templating.</li></ul><p>You can check <code>AppProvider.vue</code> to see the basic structure of a component and how it written.</p><p>Mostly cases we will comment on your Pull Request and ask you to fix it. If you have any questions, please feel free to ask us.</p><h2 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h2><p>We use <a href="https://vitepress.vuejs.org/" target="_blank" rel="noreferrer">VitePress</a> for documentation. The whole documentation is automatically generated from the source code. It&#39;s very easy, huh?</p><p>The main works you have to do is:</p><ol><li>Create a new folder in <code>docs/components/</code> with the name of your component.</li><li>Create <code>README.md</code> file in that folder. That&#39;s it.</li></ol><p>For more details, please check <code>AppProvider</code> component documentation in <code>docs/components/AppProvider/README.md</code> file.</p><h3 id="how-to-run-the-documentation-locally" tabindex="-1">How to run the documentation locally <a class="header-anchor" href="#how-to-run-the-documentation-locally" aria-label="Permalink to &quot;How to run the documentation locally&quot;">​</a></h3><ol><li>Using Node.js <code>v18.18.2</code> as required.</li><li>Run <code>yarn gen:init</code> to prepare automatically generate types.</li><li>Run <code>yarn gen:docs</code> to generate component&#39;s metadata &amp; content. (You have to run this command every time you change the component&#39;s props, events or slots)</li><li>Preview the docs by: <code>yarn docs:dev</code></li></ol><h3 id="create-examples" tabindex="-1">Create examples <a class="header-anchor" href="#create-examples" aria-label="Permalink to &quot;Create examples&quot;">​</a></h3><p>Check this PR for more details: <a href="https://github.com/ownego/polaris-vue/pull/232/files" target="_blank" rel="noreferrer">Text component examples</a></p>', 31);
const _hoisted_32 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_32);
}
const contributing = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  contributing as default
};
