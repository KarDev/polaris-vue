var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
import { G as shallowRef, p as unref, a5 as shallowReactive, R as nextTick, d as defineComponent, a6 as reactive, N as inject, k as computed, a3 as h, Z as provide, h as ref, y as watch, a7 as onBeforeUnmount, a2 as useSlots, o as openBlock, b as createBlock, w as withCtx, e as createCommentVNode, I as createVNode, c as createElementBlock, r as renderSlot, t as toDisplayString, l as onMounted, K as resolveDynamicComponent, n as normalizeClass, Q as normalizeStyle, a as createTextVNode, F as Fragment, m as createBaseVNode, M as mergeProps, E as renderList, a8 as getCurrentInstance, z as watchEffect, A as onUnmounted, C as onUpdated, a9 as mergeModels, aa as useModel, D as resolveComponent, ab as normalizeProps, ac as guardReactiveProps, ad as createSlots, $ as toHandlers, ae as useAttrs, a1 as withModifiers, af as toRaw, ag as toRef, ah as toRefs, T as Transition, ai as Teleport, _ as _export_sfc, u as useData, aj as createApp, W as defineAsyncComponent, ak as __variableDynamicImportRuntimeHelper, X as __vitePreload } from "./framework.2IsXxFXf.js";
/*!
  * vue-router v4.2.5
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */
const isBrowser = typeof window !== "undefined";
function isESModule(obj) {
  return obj.__esModule || obj[Symbol.toStringTag] === "Module";
}
const assign = Object.assign;
function applyToParams(fn, params) {
  const newParams = {};
  for (const key in params) {
    const value = params[key];
    newParams[key] = isArray(value) ? value.map(fn) : fn(value);
  }
  return newParams;
}
const noop$1 = () => {
};
const isArray = Array.isArray;
const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, "");
function parseURL(parseQuery2, location2, currentLocation = "/") {
  let path, query = {}, searchString = "", hash = "";
  const hashPos = location2.indexOf("#");
  let searchPos = location2.indexOf("?");
  if (hashPos < searchPos && hashPos >= 0) {
    searchPos = -1;
  }
  if (searchPos > -1) {
    path = location2.slice(0, searchPos);
    searchString = location2.slice(searchPos + 1, hashPos > -1 ? hashPos : location2.length);
    query = parseQuery2(searchString);
  }
  if (hashPos > -1) {
    path = path || location2.slice(0, hashPos);
    hash = location2.slice(hashPos, location2.length);
  }
  path = resolveRelativePath(path != null ? path : location2, currentLocation);
  return {
    fullPath: path + (searchString && "?") + searchString + hash,
    path,
    query,
    hash
  };
}
function stringifyURL(stringifyQuery2, location2) {
  const query = location2.query ? stringifyQuery2(location2.query) : "";
  return location2.path + (query && "?") + query + (location2.hash || "");
}
function stripBase(pathname, base) {
  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
    return pathname;
  return pathname.slice(base.length) || "/";
}
function isSameRouteLocation(stringifyQuery2, a, b) {
  const aLastIndex = a.matched.length - 1;
  const bLastIndex = b.matched.length - 1;
  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery2(a.query) === stringifyQuery2(b.query) && a.hash === b.hash;
}
function isSameRouteRecord(a, b) {
  return (a.aliasOf || a) === (b.aliasOf || b);
}
function isSameRouteLocationParams(a, b) {
  if (Object.keys(a).length !== Object.keys(b).length)
    return false;
  for (const key in a) {
    if (!isSameRouteLocationParamsValue(a[key], b[key]))
      return false;
  }
  return true;
}
function isSameRouteLocationParamsValue(a, b) {
  return isArray(a) ? isEquivalentArray(a, b) : isArray(b) ? isEquivalentArray(b, a) : a === b;
}
function isEquivalentArray(a, b) {
  return isArray(b) ? a.length === b.length && a.every((value, i) => value === b[i]) : a.length === 1 && a[0] === b;
}
function resolveRelativePath(to, from) {
  if (to.startsWith("/"))
    return to;
  if (!to)
    return from;
  const fromSegments = from.split("/");
  const toSegments = to.split("/");
  const lastToSegment = toSegments[toSegments.length - 1];
  if (lastToSegment === ".." || lastToSegment === ".") {
    toSegments.push("");
  }
  let position = fromSegments.length - 1;
  let toPosition;
  let segment;
  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
    segment = toSegments[toPosition];
    if (segment === ".")
      continue;
    if (segment === "..") {
      if (position > 1)
        position--;
    } else
      break;
  }
  return fromSegments.slice(0, position).join("/") + "/" + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join("/");
}
var NavigationType;
(function(NavigationType2) {
  NavigationType2["pop"] = "pop";
  NavigationType2["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function(NavigationDirection2) {
  NavigationDirection2["back"] = "back";
  NavigationDirection2["forward"] = "forward";
  NavigationDirection2["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
function normalizeBase(base) {
  if (!base) {
    if (isBrowser) {
      const baseEl = document.querySelector("base");
      base = baseEl && baseEl.getAttribute("href") || "/";
      base = base.replace(/^\w+:\/\/[^\/]+/, "");
    } else {
      base = "/";
    }
  }
  if (base[0] !== "/" && base[0] !== "#")
    base = "/" + base;
  return removeTrailingSlash(base);
}
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location2) {
  return base.replace(BEFORE_HASH_RE, "#") + location2;
}
function getElementPosition(el, offset) {
  const docRect = document.documentElement.getBoundingClientRect();
  const elRect = el.getBoundingClientRect();
  return {
    behavior: offset.behavior,
    left: elRect.left - docRect.left - (offset.left || 0),
    top: elRect.top - docRect.top - (offset.top || 0)
  };
}
const computeScrollPosition = () => ({
  left: window.pageXOffset,
  top: window.pageYOffset
});
function scrollToPosition(position) {
  let scrollToOptions;
  if ("el" in position) {
    const positionEl = position.el;
    const isIdSelector = typeof positionEl === "string" && positionEl.startsWith("#");
    const el = typeof positionEl === "string" ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;
    if (!el) {
      return;
    }
    scrollToOptions = getElementPosition(el, position);
  } else {
    scrollToOptions = position;
  }
  if ("scrollBehavior" in document.documentElement.style)
    window.scrollTo(scrollToOptions);
  else {
    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);
  }
}
function getScrollKey(path, delta) {
  const position = history.state ? history.state.position - delta : -1;
  return position + path;
}
const scrollPositions = /* @__PURE__ */ new Map();
function saveScrollPosition(key, scrollPosition2) {
  scrollPositions.set(key, scrollPosition2);
}
function getSavedScrollPosition(key) {
  const scroll = scrollPositions.get(key);
  scrollPositions.delete(key);
  return scroll;
}
let createBaseLocation = () => location.protocol + "//" + location.host;
function createCurrentLocation(base, location2) {
  const { pathname, search, hash } = location2;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    let slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash.slice(slicePos);
    if (pathFromHash[0] !== "/")
      pathFromHash = "/" + pathFromHash;
    return stripBase(pathFromHash, "");
  }
  const path = stripBase(pathname, base);
  return path + search + hash;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
  let listeners = [];
  let teardowns = [];
  let pauseState = null;
  const popStateHandler = ({ state }) => {
    const to = createCurrentLocation(base, location);
    const from = currentLocation.value;
    const fromState = historyState.value;
    let delta = 0;
    if (state) {
      currentLocation.value = to;
      historyState.value = state;
      if (pauseState && pauseState === from) {
        pauseState = null;
        return;
      }
      delta = fromState ? state.position - fromState.position : 0;
    } else {
      replace(to);
    }
    listeners.forEach((listener) => {
      listener(currentLocation.value, from, {
        delta,
        type: NavigationType.pop,
        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown
      });
    });
  };
  function pauseListeners() {
    pauseState = currentLocation.value;
  }
  function listen(callback) {
    listeners.push(callback);
    const teardown = () => {
      const index = listeners.indexOf(callback);
      if (index > -1)
        listeners.splice(index, 1);
    };
    teardowns.push(teardown);
    return teardown;
  }
  function beforeUnloadListener() {
    const { history: history2 } = window;
    if (!history2.state)
      return;
    history2.replaceState(assign({}, history2.state, { scroll: computeScrollPosition() }), "");
  }
  function destroy() {
    for (const teardown of teardowns)
      teardown();
    teardowns = [];
    window.removeEventListener("popstate", popStateHandler);
    window.removeEventListener("beforeunload", beforeUnloadListener);
  }
  window.addEventListener("popstate", popStateHandler);
  window.addEventListener("beforeunload", beforeUnloadListener, {
    passive: true
  });
  return {
    pauseListeners,
    listen,
    destroy
  };
}
function buildState(back, current, forward, replaced = false, computeScroll = false) {
  return {
    back,
    current,
    forward,
    replaced,
    position: window.history.length,
    scroll: computeScroll ? computeScrollPosition() : null
  };
}
function useHistoryStateNavigation(base) {
  const { history: history2, location: location2 } = window;
  const currentLocation = {
    value: createCurrentLocation(base, location2)
  };
  const historyState = { value: history2.state };
  if (!historyState.value) {
    changeLocation(currentLocation.value, {
      back: null,
      current: currentLocation.value,
      forward: null,
      // the length is off by one, we need to decrease it
      position: history2.length - 1,
      replaced: true,
      // don't add a scroll as the user may have an anchor, and we want
      // scrollBehavior to be triggered without a saved position
      scroll: null
    }, true);
  }
  function changeLocation(to, state, replace2) {
    const hashIndex = base.indexOf("#");
    const url = hashIndex > -1 ? (location2.host && document.querySelector("base") ? base : base.slice(hashIndex)) + to : createBaseLocation() + base + to;
    try {
      history2[replace2 ? "replaceState" : "pushState"](state, "", url);
      historyState.value = state;
    } catch (err) {
      {
        console.error(err);
      }
      location2[replace2 ? "replace" : "assign"](url);
    }
  }
  function replace(to, data) {
    const state = assign({}, history2.state, buildState(
      historyState.value.back,
      // keep back and forward entries but override current position
      to,
      historyState.value.forward,
      true
    ), data, { position: historyState.value.position });
    changeLocation(to, state, true);
    currentLocation.value = to;
  }
  function push(to, data) {
    const currentState = assign(
      {},
      // use current history state to gracefully handle a wrong call to
      // history.replaceState
      // https://github.com/vuejs/router/issues/366
      historyState.value,
      history2.state,
      {
        forward: to,
        scroll: computeScrollPosition()
      }
    );
    changeLocation(currentState.current, currentState, true);
    const state = assign({}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data);
    changeLocation(to, state, false);
    currentLocation.value = to;
  }
  return {
    location: currentLocation,
    state: historyState,
    push,
    replace
  };
}
function createWebHistory(base) {
  base = normalizeBase(base);
  const historyNavigation = useHistoryStateNavigation(base);
  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
  function go(delta, triggerListeners = true) {
    if (!triggerListeners)
      historyListeners.pauseListeners();
    history.go(delta);
  }
  const routerHistory = assign({
    // it's overridden right after
    location: "",
    base,
    go,
    createHref: createHref.bind(null, base)
  }, historyNavigation, historyListeners);
  Object.defineProperty(routerHistory, "location", {
    enumerable: true,
    get: () => historyNavigation.location.value
  });
  Object.defineProperty(routerHistory, "state", {
    enumerable: true,
    get: () => historyNavigation.state.value
  });
  return routerHistory;
}
function isRouteLocation(route) {
  return typeof route === "string" || route && typeof route === "object";
}
function isRouteName(name) {
  return typeof name === "string" || typeof name === "symbol";
}
const START_LOCATION_NORMALIZED = {
  path: "/",
  name: void 0,
  params: {},
  query: {},
  hash: "",
  fullPath: "/",
  matched: [],
  meta: {},
  redirectedFrom: void 0
};
const NavigationFailureSymbol = Symbol("");
var NavigationFailureType;
(function(NavigationFailureType2) {
  NavigationFailureType2[NavigationFailureType2["aborted"] = 4] = "aborted";
  NavigationFailureType2[NavigationFailureType2["cancelled"] = 8] = "cancelled";
  NavigationFailureType2[NavigationFailureType2["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
function createRouterError(type, params) {
  {
    return assign(new Error(), {
      type,
      [NavigationFailureSymbol]: true
    }, params);
  }
}
function isNavigationFailure(error2, type) {
  return error2 instanceof Error && NavigationFailureSymbol in error2 && (type == null || !!(error2.type & type));
}
const BASE_PARAM_PATTERN = "[^/]+?";
const BASE_PATH_PARSER_OPTIONS = {
  sensitive: false,
  strict: false,
  start: true,
  end: true
};
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
function tokensToParser(segments, extraOptions) {
  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
  const score = [];
  let pattern = options.start ? "^" : "";
  const keys = [];
  for (const segment of segments) {
    const segmentScores = segment.length ? [] : [
      90
      /* PathScore.Root */
    ];
    if (options.strict && !segment.length)
      pattern += "/";
    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
      const token = segment[tokenIndex];
      let subSegmentScore = 40 + (options.sensitive ? 0.25 : 0);
      if (token.type === 0) {
        if (!tokenIndex)
          pattern += "/";
        pattern += token.value.replace(REGEX_CHARS_RE, "\\$&");
        subSegmentScore += 40;
      } else if (token.type === 1) {
        const { value, repeatable, optional, regexp } = token;
        keys.push({
          name: value,
          repeatable,
          optional
        });
        const re2 = regexp ? regexp : BASE_PARAM_PATTERN;
        if (re2 !== BASE_PARAM_PATTERN) {
          subSegmentScore += 10;
          try {
            new RegExp(`(${re2})`);
          } catch (err) {
            throw new Error(`Invalid custom RegExp for param "${value}" (${re2}): ` + err.message);
          }
        }
        let subPattern = repeatable ? `((?:${re2})(?:/(?:${re2}))*)` : `(${re2})`;
        if (!tokenIndex)
          subPattern = // avoid an optional / if there are more segments e.g. /:p?-static
          // or /:p?-:p2
          optional && segment.length < 2 ? `(?:/${subPattern})` : "/" + subPattern;
        if (optional)
          subPattern += "?";
        pattern += subPattern;
        subSegmentScore += 20;
        if (optional)
          subSegmentScore += -8;
        if (repeatable)
          subSegmentScore += -20;
        if (re2 === ".*")
          subSegmentScore += -50;
      }
      segmentScores.push(subSegmentScore);
    }
    score.push(segmentScores);
  }
  if (options.strict && options.end) {
    const i = score.length - 1;
    score[i][score[i].length - 1] += 0.7000000000000001;
  }
  if (!options.strict)
    pattern += "/?";
  if (options.end)
    pattern += "$";
  else if (options.strict)
    pattern += "(?:/|$)";
  const re = new RegExp(pattern, options.sensitive ? "" : "i");
  function parse(path) {
    const match = path.match(re);
    const params = {};
    if (!match)
      return null;
    for (let i = 1; i < match.length; i++) {
      const value = match[i] || "";
      const key = keys[i - 1];
      params[key.name] = value && key.repeatable ? value.split("/") : value;
    }
    return params;
  }
  function stringify(params) {
    let path = "";
    let avoidDuplicatedSlash = false;
    for (const segment of segments) {
      if (!avoidDuplicatedSlash || !path.endsWith("/"))
        path += "/";
      avoidDuplicatedSlash = false;
      for (const token of segment) {
        if (token.type === 0) {
          path += token.value;
        } else if (token.type === 1) {
          const { value, repeatable, optional } = token;
          const param = value in params ? params[value] : "";
          if (isArray(param) && !repeatable) {
            throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
          }
          const text2 = isArray(param) ? param.join("/") : param;
          if (!text2) {
            if (optional) {
              if (segment.length < 2) {
                if (path.endsWith("/"))
                  path = path.slice(0, -1);
                else
                  avoidDuplicatedSlash = true;
              }
            } else
              throw new Error(`Missing required param "${value}"`);
          }
          path += text2;
        }
      }
    }
    return path || "/";
  }
  return {
    re,
    score,
    keys,
    parse,
    stringify
  };
}
function compareScoreArray(a, b) {
  let i = 0;
  while (i < a.length && i < b.length) {
    const diff = b[i] - a[i];
    if (diff)
      return diff;
    i++;
  }
  if (a.length < b.length) {
    return a.length === 1 && a[0] === 40 + 40 ? -1 : 1;
  } else if (a.length > b.length) {
    return b.length === 1 && b[0] === 40 + 40 ? 1 : -1;
  }
  return 0;
}
function comparePathParserScore(a, b) {
  let i = 0;
  const aScore = a.score;
  const bScore = b.score;
  while (i < aScore.length && i < bScore.length) {
    const comp = compareScoreArray(aScore[i], bScore[i]);
    if (comp)
      return comp;
    i++;
  }
  if (Math.abs(bScore.length - aScore.length) === 1) {
    if (isLastScoreNegative(aScore))
      return 1;
    if (isLastScoreNegative(bScore))
      return -1;
  }
  return bScore.length - aScore.length;
}
function isLastScoreNegative(score) {
  const last = score[score.length - 1];
  return score.length > 0 && last[last.length - 1] < 0;
}
const ROOT_TOKEN = {
  type: 0,
  value: ""
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
function tokenizePath(path) {
  if (!path)
    return [[]];
  if (path === "/")
    return [[ROOT_TOKEN]];
  if (!path.startsWith("/")) {
    throw new Error(`Invalid path "${path}"`);
  }
  function crash(message) {
    throw new Error(`ERR (${state})/"${buffer}": ${message}`);
  }
  let state = 0;
  let previousState = state;
  const tokens = [];
  let segment;
  function finalizeSegment() {
    if (segment)
      tokens.push(segment);
    segment = [];
  }
  let i = 0;
  let char;
  let buffer = "";
  let customRe = "";
  function consumeBuffer() {
    if (!buffer)
      return;
    if (state === 0) {
      segment.push({
        type: 0,
        value: buffer
      });
    } else if (state === 1 || state === 2 || state === 3) {
      if (segment.length > 1 && (char === "*" || char === "+"))
        crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
      segment.push({
        type: 1,
        value: buffer,
        regexp: customRe,
        repeatable: char === "*" || char === "+",
        optional: char === "*" || char === "?"
      });
    } else {
      crash("Invalid state to consume buffer");
    }
    buffer = "";
  }
  function addCharToBuffer() {
    buffer += char;
  }
  while (i < path.length) {
    char = path[i++];
    if (char === "\\" && state !== 2) {
      previousState = state;
      state = 4;
      continue;
    }
    switch (state) {
      case 0:
        if (char === "/") {
          if (buffer) {
            consumeBuffer();
          }
          finalizeSegment();
        } else if (char === ":") {
          consumeBuffer();
          state = 1;
        } else {
          addCharToBuffer();
        }
        break;
      case 4:
        addCharToBuffer();
        state = previousState;
        break;
      case 1:
        if (char === "(") {
          state = 2;
        } else if (VALID_PARAM_RE.test(char)) {
          addCharToBuffer();
        } else {
          consumeBuffer();
          state = 0;
          if (char !== "*" && char !== "?" && char !== "+")
            i--;
        }
        break;
      case 2:
        if (char === ")") {
          if (customRe[customRe.length - 1] == "\\")
            customRe = customRe.slice(0, -1) + char;
          else
            state = 3;
        } else {
          customRe += char;
        }
        break;
      case 3:
        consumeBuffer();
        state = 0;
        if (char !== "*" && char !== "?" && char !== "+")
          i--;
        customRe = "";
        break;
      default:
        crash("Unknown state");
        break;
    }
  }
  if (state === 2)
    crash(`Unfinished custom RegExp for param "${buffer}"`);
  consumeBuffer();
  finalizeSegment();
  return tokens;
}
function createRouteRecordMatcher(record, parent, options) {
  const parser = tokensToParser(tokenizePath(record.path), options);
  const matcher = assign(parser, {
    record,
    parent,
    // these needs to be populated by the parent
    children: [],
    alias: []
  });
  if (parent) {
    if (!matcher.record.aliasOf === !parent.record.aliasOf)
      parent.children.push(matcher);
  }
  return matcher;
}
function createRouterMatcher(routes, globalOptions) {
  const matchers = [];
  const matcherMap = /* @__PURE__ */ new Map();
  globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
  function getRecordMatcher(name) {
    return matcherMap.get(name);
  }
  function addRoute(record, parent, originalRecord) {
    const isRootAdd = !originalRecord;
    const mainNormalizedRecord = normalizeRouteRecord(record);
    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
    const options = mergeOptions(globalOptions, record);
    const normalizedRecords = [
      mainNormalizedRecord
    ];
    if ("alias" in record) {
      const aliases = typeof record.alias === "string" ? [record.alias] : record.alias;
      for (const alias of aliases) {
        normalizedRecords.push(assign({}, mainNormalizedRecord, {
          // this allows us to hold a copy of the `components` option
          // so that async components cache is hold on the original record
          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,
          path: alias,
          // we might be the child of an alias
          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord
          // the aliases are always of the same kind as the original since they
          // are defined on the same record
        }));
      }
    }
    let matcher;
    let originalMatcher;
    for (const normalizedRecord of normalizedRecords) {
      const { path } = normalizedRecord;
      if (parent && path[0] !== "/") {
        const parentPath = parent.record.path;
        const connectingSlash = parentPath[parentPath.length - 1] === "/" ? "" : "/";
        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);
      }
      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
      if (originalRecord) {
        originalRecord.alias.push(matcher);
      } else {
        originalMatcher = originalMatcher || matcher;
        if (originalMatcher !== matcher)
          originalMatcher.alias.push(matcher);
        if (isRootAdd && record.name && !isAliasRecord(matcher))
          removeRoute(record.name);
      }
      if (mainNormalizedRecord.children) {
        const children = mainNormalizedRecord.children;
        for (let i = 0; i < children.length; i++) {
          addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);
        }
      }
      originalRecord = originalRecord || matcher;
      if (matcher.record.components && Object.keys(matcher.record.components).length || matcher.record.name || matcher.record.redirect) {
        insertMatcher(matcher);
      }
    }
    return originalMatcher ? () => {
      removeRoute(originalMatcher);
    } : noop$1;
  }
  function removeRoute(matcherRef) {
    if (isRouteName(matcherRef)) {
      const matcher = matcherMap.get(matcherRef);
      if (matcher) {
        matcherMap.delete(matcherRef);
        matchers.splice(matchers.indexOf(matcher), 1);
        matcher.children.forEach(removeRoute);
        matcher.alias.forEach(removeRoute);
      }
    } else {
      const index = matchers.indexOf(matcherRef);
      if (index > -1) {
        matchers.splice(index, 1);
        if (matcherRef.record.name)
          matcherMap.delete(matcherRef.record.name);
        matcherRef.children.forEach(removeRoute);
        matcherRef.alias.forEach(removeRoute);
      }
    }
  }
  function getRoutes() {
    return matchers;
  }
  function insertMatcher(matcher) {
    let i = 0;
    while (i < matchers.length && comparePathParserScore(matcher, matchers[i]) >= 0 && // Adding children with empty path should still appear before the parent
    // https://github.com/vuejs/router/issues/1124
    (matcher.record.path !== matchers[i].record.path || !isRecordChildOf(matcher, matchers[i])))
      i++;
    matchers.splice(i, 0, matcher);
    if (matcher.record.name && !isAliasRecord(matcher))
      matcherMap.set(matcher.record.name, matcher);
  }
  function resolve(location2, currentLocation) {
    let matcher;
    let params = {};
    let path;
    let name;
    if ("name" in location2 && location2.name) {
      matcher = matcherMap.get(location2.name);
      if (!matcher)
        throw createRouterError(1, {
          location: location2
        });
      name = matcher.record.name;
      params = assign(
        // paramsFromLocation is a new object
        paramsFromLocation(
          currentLocation.params,
          // only keep params that exist in the resolved location
          // TODO: only keep optional params coming from a parent record
          matcher.keys.filter((k) => !k.optional).map((k) => k.name)
        ),
        // discard any existing params in the current location that do not exist here
        // #1497 this ensures better active/exact matching
        location2.params && paramsFromLocation(location2.params, matcher.keys.map((k) => k.name))
      );
      path = matcher.stringify(params);
    } else if ("path" in location2) {
      path = location2.path;
      matcher = matchers.find((m) => m.re.test(path));
      if (matcher) {
        params = matcher.parse(path);
        name = matcher.record.name;
      }
    } else {
      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find((m) => m.re.test(currentLocation.path));
      if (!matcher)
        throw createRouterError(1, {
          location: location2,
          currentLocation
        });
      name = matcher.record.name;
      params = assign({}, currentLocation.params, location2.params);
      path = matcher.stringify(params);
    }
    const matched = [];
    let parentMatcher = matcher;
    while (parentMatcher) {
      matched.unshift(parentMatcher.record);
      parentMatcher = parentMatcher.parent;
    }
    return {
      name,
      path,
      params,
      matched,
      meta: mergeMetaFields(matched)
    };
  }
  routes.forEach((route) => addRoute(route));
  return { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher };
}
function paramsFromLocation(params, keys) {
  const newParams = {};
  for (const key of keys) {
    if (key in params)
      newParams[key] = params[key];
  }
  return newParams;
}
function normalizeRouteRecord(record) {
  return {
    path: record.path,
    redirect: record.redirect,
    name: record.name,
    meta: record.meta || {},
    aliasOf: void 0,
    beforeEnter: record.beforeEnter,
    props: normalizeRecordProps(record),
    children: record.children || [],
    instances: {},
    leaveGuards: /* @__PURE__ */ new Set(),
    updateGuards: /* @__PURE__ */ new Set(),
    enterCallbacks: {},
    components: "components" in record ? record.components || null : record.component && { default: record.component }
  };
}
function normalizeRecordProps(record) {
  const propsObject = {};
  const props = record.props || false;
  if ("component" in record) {
    propsObject.default = props;
  } else {
    for (const name in record.components)
      propsObject[name] = typeof props === "object" ? props[name] : props;
  }
  return propsObject;
}
function isAliasRecord(record) {
  while (record) {
    if (record.record.aliasOf)
      return true;
    record = record.parent;
  }
  return false;
}
function mergeMetaFields(matched) {
  return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults, partialOptions) {
  const options = {};
  for (const key in defaults) {
    options[key] = key in partialOptions ? partialOptions[key] : defaults[key];
  }
  return options;
}
function isRecordChildOf(record, parent) {
  return parent.children.some((child) => child === record || isRecordChildOf(record, child));
}
const HASH_RE = /#/g;
const AMPERSAND_RE = /&/g;
const SLASH_RE = /\//g;
const EQUAL_RE = /=/g;
const IM_RE = /\?/g;
const PLUS_RE = /\+/g;
const ENC_BRACKET_OPEN_RE = /%5B/g;
const ENC_BRACKET_CLOSE_RE = /%5D/g;
const ENC_CARET_RE = /%5E/g;
const ENC_BACKTICK_RE = /%60/g;
const ENC_CURLY_OPEN_RE = /%7B/g;
const ENC_PIPE_RE = /%7C/g;
const ENC_CURLY_CLOSE_RE = /%7D/g;
const ENC_SPACE_RE = /%20/g;
function commonEncode(text2) {
  return encodeURI("" + text2).replace(ENC_PIPE_RE, "|").replace(ENC_BRACKET_OPEN_RE, "[").replace(ENC_BRACKET_CLOSE_RE, "]");
}
function encodeHash(text2) {
  return commonEncode(text2).replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryValue(text2) {
  return commonEncode(text2).replace(PLUS_RE, "%2B").replace(ENC_SPACE_RE, "+").replace(HASH_RE, "%23").replace(AMPERSAND_RE, "%26").replace(ENC_BACKTICK_RE, "`").replace(ENC_CURLY_OPEN_RE, "{").replace(ENC_CURLY_CLOSE_RE, "}").replace(ENC_CARET_RE, "^");
}
function encodeQueryKey(text2) {
  return encodeQueryValue(text2).replace(EQUAL_RE, "%3D");
}
function encodePath(text2) {
  return commonEncode(text2).replace(HASH_RE, "%23").replace(IM_RE, "%3F");
}
function encodeParam(text2) {
  return text2 == null ? "" : encodePath(text2).replace(SLASH_RE, "%2F");
}
function decode(text2) {
  try {
    return decodeURIComponent("" + text2);
  } catch (err) {
  }
  return "" + text2;
}
function parseQuery(search) {
  const query = {};
  if (search === "" || search === "?")
    return query;
  const hasLeadingIM = search[0] === "?";
  const searchParams = (hasLeadingIM ? search.slice(1) : search).split("&");
  for (let i = 0; i < searchParams.length; ++i) {
    const searchParam = searchParams[i].replace(PLUS_RE, " ");
    const eqPos = searchParam.indexOf("=");
    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
    if (key in query) {
      let currentValue = query[key];
      if (!isArray(currentValue)) {
        currentValue = query[key] = [currentValue];
      }
      currentValue.push(value);
    } else {
      query[key] = value;
    }
  }
  return query;
}
function stringifyQuery(query) {
  let search = "";
  for (let key in query) {
    const value = query[key];
    key = encodeQueryKey(key);
    if (value == null) {
      if (value !== void 0) {
        search += (search.length ? "&" : "") + key;
      }
      continue;
    }
    const values = isArray(value) ? value.map((v) => v && encodeQueryValue(v)) : [value && encodeQueryValue(value)];
    values.forEach((value2) => {
      if (value2 !== void 0) {
        search += (search.length ? "&" : "") + key;
        if (value2 != null)
          search += "=" + value2;
      }
    });
  }
  return search;
}
function normalizeQuery(query) {
  const normalizedQuery = {};
  for (const key in query) {
    const value = query[key];
    if (value !== void 0) {
      normalizedQuery[key] = isArray(value) ? value.map((v) => v == null ? null : "" + v) : value == null ? value : "" + value;
    }
  }
  return normalizedQuery;
}
const matchedRouteKey = Symbol("");
const viewDepthKey = Symbol("");
const routerKey = Symbol("");
const routeLocationKey = Symbol("");
const routerViewLocationKey = Symbol("");
function useCallbacks() {
  let handlers = [];
  function add(handler) {
    handlers.push(handler);
    return () => {
      const i = handlers.indexOf(handler);
      if (i > -1)
        handlers.splice(i, 1);
    };
  }
  function reset() {
    handlers = [];
  }
  return {
    add,
    list: () => handlers.slice(),
    reset
  };
}
function guardToPromiseFn(guard, to, from, record, name) {
  const enterCallbackArray = record && // name is defined if record is because of the function overload
  (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
  return () => new Promise((resolve, reject) => {
    const next = (valid) => {
      if (valid === false) {
        reject(createRouterError(4, {
          from,
          to
        }));
      } else if (valid instanceof Error) {
        reject(valid);
      } else if (isRouteLocation(valid)) {
        reject(createRouterError(2, {
          from: to,
          to: valid
        }));
      } else {
        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are
        record.enterCallbacks[name] === enterCallbackArray && typeof valid === "function") {
          enterCallbackArray.push(valid);
        }
        resolve();
      }
    };
    const guardReturn = guard.call(record && record.instances[name], to, from, next);
    let guardCall = Promise.resolve(guardReturn);
    if (guard.length < 3)
      guardCall = guardCall.then(next);
    guardCall.catch((err) => reject(err));
  });
}
function extractComponentsGuards(matched, guardType, to, from) {
  const guards = [];
  for (const record of matched) {
    for (const name in record.components) {
      let rawComponent = record.components[name];
      if (guardType !== "beforeRouteEnter" && !record.instances[name])
        continue;
      if (isRouteComponent(rawComponent)) {
        const options = rawComponent.__vccOpts || rawComponent;
        const guard = options[guardType];
        guard && guards.push(guardToPromiseFn(guard, to, from, record, name));
      } else {
        let componentPromise = rawComponent();
        guards.push(() => componentPromise.then((resolved) => {
          if (!resolved)
            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved;
          record.components[name] = resolvedComponent;
          const options = resolvedComponent.__vccOpts || resolvedComponent;
          const guard = options[guardType];
          return guard && guardToPromiseFn(guard, to, from, record, name)();
        }));
      }
    }
  }
  return guards;
}
function isRouteComponent(component) {
  return typeof component === "object" || "displayName" in component || "props" in component || "__vccOpts" in component;
}
function useLink$1(props) {
  const router = inject(routerKey);
  const currentRoute = inject(routeLocationKey);
  const route = computed(() => router.resolve(unref(props.to)));
  const activeRecordIndex = computed(() => {
    const { matched } = route.value;
    const { length } = matched;
    const routeMatched = matched[length - 1];
    const currentMatched = currentRoute.matched;
    if (!routeMatched || !currentMatched.length)
      return -1;
    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index > -1)
      return index;
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1 && // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent
      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index
    );
  });
  const isActive = computed(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));
  const isExactActive = computed(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));
  function navigate(e = {}) {
    if (guardEvent(e)) {
      return router[unref(props.replace) ? "replace" : "push"](
        unref(props.to)
        // avoid uncaught errors are they are logged anyway
      ).catch(noop$1);
    }
    return Promise.resolve();
  }
  return {
    route,
    href: computed(() => route.value.href),
    isActive,
    isExactActive,
    navigate
  };
}
const RouterLinkImpl = /* @__PURE__ */ defineComponent({
  name: "RouterLink",
  compatConfig: { MODE: 3 },
  props: {
    to: {
      type: [String, Object],
      required: true
    },
    replace: Boolean,
    activeClass: String,
    // inactiveClass: String,
    exactActiveClass: String,
    custom: Boolean,
    ariaCurrentValue: {
      type: String,
      default: "page"
    }
  },
  useLink: useLink$1,
  setup(props, { slots }) {
    const link = reactive(useLink$1(props));
    const { options } = inject(routerKey);
    const elClass = computed(() => ({
      [getLinkClass(props.activeClass, options.linkActiveClass, "router-link-active")]: link.isActive,
      // [getLinkClass(
      //   props.inactiveClass,
      //   options.linkInactiveClass,
      //   'router-link-inactive'
      // )]: !link.isExactActive,
      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, "router-link-exact-active")]: link.isExactActive
    }));
    return () => {
      const children = slots.default && slots.default(link);
      return props.custom ? children : h("a", {
        "aria-current": link.isExactActive ? props.ariaCurrentValue : null,
        href: link.href,
        // this would override user added attrs but Vue will still add
        // the listener, so we end up triggering both
        onClick: link.navigate,
        class: elClass.value
      }, children);
    };
  }
});
const RouterLink = RouterLinkImpl;
function guardEvent(e) {
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)
    return;
  if (e.defaultPrevented)
    return;
  if (e.button !== void 0 && e.button !== 0)
    return;
  if (e.currentTarget && e.currentTarget.getAttribute) {
    const target = e.currentTarget.getAttribute("target");
    if (/\b_blank\b/i.test(target))
      return;
  }
  if (e.preventDefault)
    e.preventDefault();
  return true;
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key];
    const outerValue = outer[key];
    if (typeof innerValue === "string") {
      if (innerValue !== outerValue)
        return false;
    } else {
      if (!isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i]))
        return false;
    }
  }
  return true;
}
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : "";
}
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;
const RouterViewImpl = /* @__PURE__ */ defineComponent({
  name: "RouterView",
  // #674 we manually inherit them
  inheritAttrs: false,
  props: {
    name: {
      type: String,
      default: "default"
    },
    route: Object
  },
  // Better compat for @vue/compat users
  // https://github.com/vuejs/router/issues/1315
  compatConfig: { MODE: 3 },
  setup(props, { attrs, slots }) {
    const injectedRoute = inject(routerViewLocationKey);
    const routeToDisplay = computed(() => props.route || injectedRoute.value);
    const injectedDepth = inject(viewDepthKey, 0);
    const depth = computed(() => {
      let initialDepth = unref(injectedDepth);
      const { matched } = routeToDisplay.value;
      let matchedRoute;
      while ((matchedRoute = matched[initialDepth]) && !matchedRoute.components) {
        initialDepth++;
      }
      return initialDepth;
    });
    const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth.value]);
    provide(viewDepthKey, computed(() => depth.value + 1));
    provide(matchedRouteKey, matchedRouteRef);
    provide(routerViewLocationKey, routeToDisplay);
    const viewRef = ref();
    watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {
      if (to) {
        to.instances[name] = instance;
        if (from && from !== to && instance && instance === oldInstance) {
          if (!to.leaveGuards.size) {
            to.leaveGuards = from.leaveGuards;
          }
          if (!to.updateGuards.size) {
            to.updateGuards = from.updateGuards;
          }
        }
      }
      if (instance && to && // if there is no instance but to and from are the same this might be
      // the first visit
      (!from || !isSameRouteRecord(to, from) || !oldInstance)) {
        (to.enterCallbacks[name] || []).forEach((callback) => callback(instance));
      }
    }, { flush: "post" });
    return () => {
      const route = routeToDisplay.value;
      const currentName = props.name;
      const matchedRoute = matchedRouteRef.value;
      const ViewComponent = matchedRoute && matchedRoute.components[currentName];
      if (!ViewComponent) {
        return normalizeSlot(slots.default, { Component: ViewComponent, route });
      }
      const routePropsOption = matchedRoute.props[currentName];
      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === "function" ? routePropsOption(route) : routePropsOption : null;
      const onVnodeUnmounted = (vnode) => {
        if (vnode.component.isUnmounted) {
          matchedRoute.instances[currentName] = null;
        }
      };
      const component = h(ViewComponent, assign({}, routeProps, attrs, {
        onVnodeUnmounted,
        ref: viewRef
      }));
      return (
        // pass the vnode to the slot as a prop.
        // h and <component :is="..."> both accept vnodes
        normalizeSlot(slots.default, { Component: component, route }) || component
      );
    };
  }
});
function normalizeSlot(slot, data) {
  if (!slot)
    return null;
  const slotContent = slot(data);
  return slotContent.length === 1 ? slotContent[0] : slotContent;
}
const RouterView = RouterViewImpl;
function createRouter(options) {
  const matcher = createRouterMatcher(options.routes, options);
  const parseQuery$1 = options.parseQuery || parseQuery;
  const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
  const routerHistory = options.history;
  const beforeGuards = useCallbacks();
  const beforeResolveGuards = useCallbacks();
  const afterGuards = useCallbacks();
  const currentRoute = shallowRef(START_LOCATION_NORMALIZED);
  let pendingLocation = START_LOCATION_NORMALIZED;
  if (isBrowser && options.scrollBehavior && "scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  const normalizeParams = applyToParams.bind(null, (paramValue) => "" + paramValue);
  const encodeParams = applyToParams.bind(null, encodeParam);
  const decodeParams = (
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode)
  );
  function addRoute(parentOrRoute, route) {
    let parent;
    let record;
    if (isRouteName(parentOrRoute)) {
      parent = matcher.getRecordMatcher(parentOrRoute);
      record = route;
    } else {
      record = parentOrRoute;
    }
    return matcher.addRoute(record, parent);
  }
  function removeRoute(name) {
    const recordMatcher = matcher.getRecordMatcher(name);
    if (recordMatcher) {
      matcher.removeRoute(recordMatcher);
    }
  }
  function getRoutes() {
    return matcher.getRoutes().map((routeMatcher) => routeMatcher.record);
  }
  function hasRoute(name) {
    return !!matcher.getRecordMatcher(name);
  }
  function resolve(rawLocation, currentLocation) {
    currentLocation = assign({}, currentLocation || currentRoute.value);
    if (typeof rawLocation === "string") {
      const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
      const matchedRoute2 = matcher.resolve({ path: locationNormalized.path }, currentLocation);
      const href2 = routerHistory.createHref(locationNormalized.fullPath);
      return assign(locationNormalized, matchedRoute2, {
        params: decodeParams(matchedRoute2.params),
        hash: decode(locationNormalized.hash),
        redirectedFrom: void 0,
        href: href2
      });
    }
    let matcherLocation;
    if ("path" in rawLocation) {
      matcherLocation = assign({}, rawLocation, {
        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path
      });
    } else {
      const targetParams = assign({}, rawLocation.params);
      for (const key in targetParams) {
        if (targetParams[key] == null) {
          delete targetParams[key];
        }
      }
      matcherLocation = assign({}, rawLocation, {
        params: encodeParams(targetParams)
      });
      currentLocation.params = encodeParams(currentLocation.params);
    }
    const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
    const hash = rawLocation.hash || "";
    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
      hash: encodeHash(hash),
      path: matchedRoute.path
    }));
    const href = routerHistory.createHref(fullPath);
    return assign({
      fullPath,
      // keep the hash encoded so fullPath is effectively path + encodedQuery +
      // hash
      hash,
      query: (
        // if the user is using a custom query lib like qs, we might have
        // nested objects, so we keep the query as is, meaning it can contain
        // numbers at `$route.query`, but at the point, the user will have to
        // use their own type anyway.
        // https://github.com/vuejs/router/issues/328#issuecomment-649481567
        stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query || {}
      )
    }, matchedRoute, {
      redirectedFrom: void 0,
      href
    });
  }
  function locationAsObject(to) {
    return typeof to === "string" ? parseURL(parseQuery$1, to, currentRoute.value.path) : assign({}, to);
  }
  function checkCanceledNavigation(to, from) {
    if (pendingLocation !== to) {
      return createRouterError(8, {
        from,
        to
      });
    }
  }
  function push(to) {
    return pushWithRedirect(to);
  }
  function replace(to) {
    return push(assign(locationAsObject(to), { replace: true }));
  }
  function handleRedirectRecord(to) {
    const lastMatched = to.matched[to.matched.length - 1];
    if (lastMatched && lastMatched.redirect) {
      const { redirect } = lastMatched;
      let newTargetLocation = typeof redirect === "function" ? redirect(to) : redirect;
      if (typeof newTargetLocation === "string") {
        newTargetLocation = newTargetLocation.includes("?") || newTargetLocation.includes("#") ? newTargetLocation = locationAsObject(newTargetLocation) : (
          // force empty params
          { path: newTargetLocation }
        );
        newTargetLocation.params = {};
      }
      return assign({
        query: to.query,
        hash: to.hash,
        // avoid transferring params if the redirect has a path
        params: "path" in newTargetLocation ? {} : to.params
      }, newTargetLocation);
    }
  }
  function pushWithRedirect(to, redirectedFrom) {
    const targetLocation = pendingLocation = resolve(to);
    const from = currentRoute.value;
    const data = to.state;
    const force = to.force;
    const replace2 = to.replace === true;
    const shouldRedirect = handleRedirectRecord(targetLocation);
    if (shouldRedirect)
      return pushWithRedirect(
        assign(locationAsObject(shouldRedirect), {
          state: typeof shouldRedirect === "object" ? assign({}, data, shouldRedirect.state) : data,
          force,
          replace: replace2
        }),
        // keep original redirectedFrom if it exists
        redirectedFrom || targetLocation
      );
    const toLocation = targetLocation;
    toLocation.redirectedFrom = redirectedFrom;
    let failure;
    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {
      failure = createRouterError(16, { to: toLocation, from });
      handleScroll(
        from,
        from,
        // this is a push, the only way for it to be triggered from a
        // history.listen is with a redirect, which makes it become a push
        true,
        // This cannot be the first navigation because the initial location
        // cannot be manually navigated to
        false
      );
    }
    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch((error2) => isNavigationFailure(error2) ? (
      // navigation redirects still mark the router as ready
      isNavigationFailure(
        error2,
        2
        /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
      ) ? error2 : markAsReady(error2)
    ) : (
      // reject any unknown error
      triggerError(error2, toLocation, from)
    )).then((failure2) => {
      if (failure2) {
        if (isNavigationFailure(
          failure2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          return pushWithRedirect(
            // keep options
            assign({
              // preserve an existing replacement but allow the redirect to override it
              replace: replace2
            }, locationAsObject(failure2.to), {
              state: typeof failure2.to === "object" ? assign({}, data, failure2.to.state) : data,
              force
            }),
            // preserve the original redirectedFrom if any
            redirectedFrom || toLocation
          );
        }
      } else {
        failure2 = finalizeNavigation(toLocation, from, true, replace2, data);
      }
      triggerAfterEach(toLocation, from, failure2);
      return failure2;
    });
  }
  function checkCanceledNavigationAndReject(to, from) {
    const error2 = checkCanceledNavigation(to, from);
    return error2 ? Promise.reject(error2) : Promise.resolve();
  }
  function runWithContext(fn) {
    const app = installedApps.values().next().value;
    return app && typeof app.runWithContext === "function" ? app.runWithContext(fn) : fn();
  }
  function navigate(to, from) {
    let guards;
    const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);
    guards = extractComponentsGuards(leavingRecords.reverse(), "beforeRouteLeave", to, from);
    for (const record of leavingRecords) {
      record.leaveGuards.forEach((guard) => {
        guards.push(guardToPromiseFn(guard, to, from));
      });
    }
    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);
    guards.push(canceledNavigationCheck);
    return runGuardQueue(guards).then(() => {
      guards = [];
      for (const guard of beforeGuards.list()) {
        guards.push(guardToPromiseFn(guard, to, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = extractComponentsGuards(updatingRecords, "beforeRouteUpdate", to, from);
      for (const record of updatingRecords) {
        record.updateGuards.forEach((guard) => {
          guards.push(guardToPromiseFn(guard, to, from));
        });
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const record of enteringRecords) {
        if (record.beforeEnter) {
          if (isArray(record.beforeEnter)) {
            for (const beforeEnter of record.beforeEnter)
              guards.push(guardToPromiseFn(beforeEnter, to, from));
          } else {
            guards.push(guardToPromiseFn(record.beforeEnter, to, from));
          }
        }
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      to.matched.forEach((record) => record.enterCallbacks = {});
      guards = extractComponentsGuards(enteringRecords, "beforeRouteEnter", to, from);
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).then(() => {
      guards = [];
      for (const guard of beforeResolveGuards.list()) {
        guards.push(guardToPromiseFn(guard, to, from));
      }
      guards.push(canceledNavigationCheck);
      return runGuardQueue(guards);
    }).catch((err) => isNavigationFailure(
      err,
      8
      /* ErrorTypes.NAVIGATION_CANCELLED */
    ) ? err : Promise.reject(err));
  }
  function triggerAfterEach(to, from, failure) {
    afterGuards.list().forEach((guard) => runWithContext(() => guard(to, from, failure)));
  }
  function finalizeNavigation(toLocation, from, isPush, replace2, data) {
    const error2 = checkCanceledNavigation(toLocation, from);
    if (error2)
      return error2;
    const isFirstNavigation = from === START_LOCATION_NORMALIZED;
    const state = !isBrowser ? {} : history.state;
    if (isPush) {
      if (replace2 || isFirstNavigation)
        routerHistory.replace(toLocation.fullPath, assign({
          scroll: isFirstNavigation && state && state.scroll
        }, data));
      else
        routerHistory.push(toLocation.fullPath, data);
    }
    currentRoute.value = toLocation;
    handleScroll(toLocation, from, isPush, isFirstNavigation);
    markAsReady();
  }
  let removeHistoryListener;
  function setupListeners() {
    if (removeHistoryListener)
      return;
    removeHistoryListener = routerHistory.listen((to, _from, info) => {
      if (!router.listening)
        return;
      const toLocation = resolve(to);
      const shouldRedirect = handleRedirectRecord(toLocation);
      if (shouldRedirect) {
        pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop$1);
        return;
      }
      pendingLocation = toLocation;
      const from = currentRoute.value;
      if (isBrowser) {
        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
      }
      navigate(toLocation, from).catch((error2) => {
        if (isNavigationFailure(
          error2,
          4 | 8
          /* ErrorTypes.NAVIGATION_CANCELLED */
        )) {
          return error2;
        }
        if (isNavigationFailure(
          error2,
          2
          /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */
        )) {
          pushWithRedirect(
            error2.to,
            toLocation
            // avoid an uncaught rejection, let push call triggerError
          ).then((failure) => {
            if (isNavigationFailure(
              failure,
              4 | 16
              /* ErrorTypes.NAVIGATION_DUPLICATED */
            ) && !info.delta && info.type === NavigationType.pop) {
              routerHistory.go(-1, false);
            }
          }).catch(noop$1);
          return Promise.reject();
        }
        if (info.delta) {
          routerHistory.go(-info.delta, false);
        }
        return triggerError(error2, toLocation, from);
      }).then((failure) => {
        failure = failure || finalizeNavigation(
          // after navigation, all matched components are resolved
          toLocation,
          from,
          false
        );
        if (failure) {
          if (info.delta && // a new navigation has been triggered, so we do not want to revert, that will change the current history
          // entry while a different route is displayed
          !isNavigationFailure(
            failure,
            8
            /* ErrorTypes.NAVIGATION_CANCELLED */
          )) {
            routerHistory.go(-info.delta, false);
          } else if (info.type === NavigationType.pop && isNavigationFailure(
            failure,
            4 | 16
            /* ErrorTypes.NAVIGATION_DUPLICATED */
          )) {
            routerHistory.go(-1, false);
          }
        }
        triggerAfterEach(toLocation, from, failure);
      }).catch(noop$1);
    });
  }
  let readyHandlers = useCallbacks();
  let errorListeners = useCallbacks();
  let ready;
  function triggerError(error2, to, from) {
    markAsReady(error2);
    const list = errorListeners.list();
    if (list.length) {
      list.forEach((handler) => handler(error2, to, from));
    } else {
      console.error(error2);
    }
    return Promise.reject(error2);
  }
  function isReady() {
    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
      return Promise.resolve();
    return new Promise((resolve2, reject) => {
      readyHandlers.add([resolve2, reject]);
    });
  }
  function markAsReady(err) {
    if (!ready) {
      ready = !err;
      setupListeners();
      readyHandlers.list().forEach(([resolve2, reject]) => err ? reject(err) : resolve2());
      readyHandlers.reset();
    }
    return err;
  }
  function handleScroll(to, from, isPush, isFirstNavigation) {
    const { scrollBehavior } = options;
    if (!isBrowser || !scrollBehavior)
      return Promise.resolve();
    const scrollPosition2 = !isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;
    return nextTick().then(() => scrollBehavior(to, from, scrollPosition2)).then((position) => position && scrollToPosition(position)).catch((err) => triggerError(err, to, from));
  }
  const go = (delta) => routerHistory.go(delta);
  let started;
  const installedApps = /* @__PURE__ */ new Set();
  const router = {
    currentRoute,
    listening: true,
    addRoute,
    removeRoute,
    hasRoute,
    getRoutes,
    resolve,
    options,
    push,
    replace,
    go,
    back: () => go(-1),
    forward: () => go(1),
    beforeEach: beforeGuards.add,
    beforeResolve: beforeResolveGuards.add,
    afterEach: afterGuards.add,
    onError: errorListeners.add,
    isReady,
    install(app) {
      const router2 = this;
      app.component("RouterLink", RouterLink);
      app.component("RouterView", RouterView);
      app.config.globalProperties.$router = router2;
      Object.defineProperty(app.config.globalProperties, "$route", {
        enumerable: true,
        get: () => unref(currentRoute)
      });
      if (isBrowser && // used for the initial navigation client side to avoid pushing
      // multiple times when the router is used in multiple apps
      !started && currentRoute.value === START_LOCATION_NORMALIZED) {
        started = true;
        push(routerHistory.location).catch((err) => {
        });
      }
      const reactiveRoute = {};
      for (const key in START_LOCATION_NORMALIZED) {
        Object.defineProperty(reactiveRoute, key, {
          get: () => currentRoute.value[key],
          enumerable: true
        });
      }
      app.provide(routerKey, router2);
      app.provide(routeLocationKey, shallowReactive(reactiveRoute));
      app.provide(routerViewLocationKey, currentRoute);
      const unmountApp = app.unmount;
      installedApps.add(app);
      app.unmount = function() {
        installedApps.delete(app);
        if (installedApps.size < 1) {
          pendingLocation = START_LOCATION_NORMALIZED;
          removeHistoryListener && removeHistoryListener();
          removeHistoryListener = null;
          currentRoute.value = START_LOCATION_NORMALIZED;
          started = false;
          ready = false;
        }
        unmountApp();
      };
    }
  };
  function runGuardQueue(guards) {
    return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());
  }
  return router;
}
function extractChangingRecords(to, from) {
  const leavingRecords = [];
  const updatingRecords = [];
  const enteringRecords = [];
  const len = Math.max(from.matched.length, to.matched.length);
  for (let i = 0; i < len; i++) {
    const recordFrom = from.matched[i];
    if (recordFrom) {
      if (to.matched.find((record) => isSameRouteRecord(record, recordFrom)))
        updatingRecords.push(recordFrom);
      else
        leavingRecords.push(recordFrom);
    }
    const recordTo = to.matched[i];
    if (recordTo) {
      if (!from.matched.find((record) => isSameRouteRecord(record, recordTo))) {
        enteringRecords.push(recordTo);
      }
    }
  }
  return [leavingRecords, updatingRecords, enteringRecords];
}
var breakpointsAliases = ["xs", "sm", "md", "lg", "xl"];
var breakpoints = {
  "breakpoints-xs": {
    value: "0px",
    description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
  },
  "breakpoints-sm": {
    value: "490px",
    description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
  },
  "breakpoints-md": {
    value: "768px",
    description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
  },
  "breakpoints-lg": {
    value: "1040px",
    description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
  },
  "breakpoints-xl": {
    value: "1440px",
    description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage."
  }
};
function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i)
          return;
        _n = false;
      } else
        for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
          ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r))
          return;
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
}
function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  strings.raw = raw;
  return strings;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var _templateObject;
var BASE_FONT_SIZE = 16;
var UNIT_PX = "px";
var UNIT_EM = "em";
var UNIT_REM = "rem";
var DIGIT_REGEX = new RegExp(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["-?d+(?:.d+|d*)"], ["-?\\d+(?:\\.\\d+|\\d*)"]))));
var UNIT_REGEX = new RegExp(UNIT_PX + "|" + UNIT_EM + "|" + UNIT_REM);
function getUnit(value) {
  if (value === void 0) {
    value = "";
  }
  var unit = value.match(new RegExp(DIGIT_REGEX.source + "(" + UNIT_REGEX.source + ")"));
  return unit && unit[1];
}
function toPx(value) {
  if (value === void 0) {
    value = "";
  }
  var unit = getUnit(value);
  if (!unit)
    return value;
  if (unit === UNIT_PX) {
    return value;
  }
  if (unit === UNIT_EM || unit === UNIT_REM) {
    return "" + parseFloat(value) * BASE_FONT_SIZE + UNIT_PX;
  }
}
function toEm(value, fontSize) {
  if (value === void 0) {
    value = "";
  }
  if (fontSize === void 0) {
    fontSize = BASE_FONT_SIZE;
  }
  var unit = getUnit(value);
  if (!unit)
    return value;
  if (unit === UNIT_EM) {
    return value;
  }
  if (unit === UNIT_PX) {
    return "" + parseFloat(value) / fontSize + UNIT_EM;
  }
  if (unit === UNIT_REM) {
    return "" + parseFloat(value) * BASE_FONT_SIZE / fontSize + UNIT_EM;
  }
}
function toRem(value) {
  if (value === void 0) {
    value = "";
  }
  var unit = getUnit(value);
  if (!unit)
    return value;
  if (unit === UNIT_REM) {
    return value;
  }
  if (unit === UNIT_EM) {
    return "" + parseFloat(value) + UNIT_REM;
  }
  if (unit === UNIT_PX) {
    return "" + parseFloat(value) / BASE_FONT_SIZE + UNIT_REM;
  }
}
function rem(value) {
  return value.replace(new RegExp(DIGIT_REGEX.source + "(" + UNIT_PX + ")", "g"), function(px) {
    var _toRem;
    return (_toRem = toRem(px)) != null ? _toRem : px;
  });
}
function tokenGroupToRems(metaTokenGroup) {
  return Object.fromEntries(
    Object.entries(metaTokenGroup).map(function(_ref) {
      var _ref2 = _slicedToArray(_ref, 2), tokenName = _ref2[0], tokenProperties = _ref2[1];
      return [tokenName, Object.assign(Object.assign({}, tokenProperties), {}, {
        value: rem(tokenProperties.value)
      })];
    })
    // We loose the `metaTokenGroup` inference after transforming the object with
    // `Object.fromEntries()` and `Object.entries()`. Thus, we cast the result
    // back to `T` since we are simply converting the `value` from px to rem.
  );
}
function createVarName(tokenName) {
  return "--p-" + tokenName;
}
function createVar$1(tokenName) {
  return "var(" + createVarName(tokenName) + ")";
}
function getTokenNames(theme) {
  return Object.values(theme).flatMap(function(tokenGroup) {
    return Object.keys(tokenGroup);
  });
}
function getMediaConditions(breakpoints2) {
  var breakpointEntries = Object.entries(breakpoints2);
  var lastBreakpointIndex = breakpointEntries.length - 1;
  return Object.fromEntries(breakpointEntries.map(function(entry, index) {
    var _ref3 = entry, _ref4 = _slicedToArray(_ref3, 2), breakpointsTokenName = _ref4[0], breakpoint = _ref4[1];
    var upMediaCondition = getUpMediaCondition(breakpoint);
    var downMediaCondition = getDownMediaCondition(breakpoint);
    var onlyMediaCondition = index === lastBreakpointIndex ? upMediaCondition : upMediaCondition + " and " + getDownMediaCondition(breakpointEntries[index + 1][1]);
    return [breakpointsTokenName, {
      // Media condition for the current breakpoint and up
      up: upMediaCondition,
      // Media condition for current breakpoint and down
      down: downMediaCondition,
      // Media condition for only the current breakpoint
      only: onlyMediaCondition
    }];
  }));
}
function getUpMediaCondition(breakpoint) {
  return "(min-width: " + toEm(breakpoint) + ")";
}
function getDownMediaCondition(breakpoint) {
  var _toPx2;
  var offsetBreakpoint = parseFloat((_toPx2 = toPx(breakpoint)) != null ? _toPx2 : "") - 0.04;
  return "(max-width: " + toEm(offsetBreakpoint + "px") + ")";
}
var tokenGroupNamesToRems = ["border", "breakpoints", "font", "height", "shadow", "space", "text", "width"];
function createMetaThemeBase(metaTheme) {
  return Object.fromEntries(Object.entries(metaTheme).map(function(_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2), tokenGroupName = _ref6[0], tokenGroup = _ref6[1];
    return [tokenGroupName, tokenGroupNamesToRems.includes(tokenGroupName) ? tokenGroupToRems(tokenGroup) : tokenGroup];
  }));
}
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var isMergeableObject = function isMergeableObject2(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source2, options) {
  return target.concat(source2).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }
  var customMerge = options.customMerge(key);
  return typeof customMerge === "function" ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    return Object.propertyIsEnumerable.call(target, symbol);
  }) : [];
}
function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
}
function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
}
function mergeObject(target, source2, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  getKeys(source2).forEach(function(key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }
    if (propertyIsOnObject(target, key) && options.isMergeableObject(source2[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source2[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source2[key], options);
    }
  });
  return destination;
}
function deepmerge(target, source2, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source2);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source2, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source2, options);
  } else {
    return mergeObject(target, source2, options);
  }
}
deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error("first argument should be an array");
  }
  return array.reduce(function(prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var cjs = deepmerge_1;
const deepmerge$1 = /* @__PURE__ */ getDefaultExportFromCjs(cjs);
var size = {
  "0": "0px",
  "0165": "0.66px",
  "025": "1px",
  "050": "2px",
  "100": "4px",
  "150": "6px",
  "200": "8px",
  "275": "11px",
  "300": "12px",
  "325": "13px",
  "350": "14px",
  "400": "16px",
  "450": "18px",
  "500": "20px",
  "550": "22px",
  "600": "24px",
  "700": "28px",
  "750": "30px",
  "800": "32px",
  "900": "36px",
  "1000": "40px",
  "1200": "48px",
  "1600": "64px",
  "2000": "80px",
  "2400": "96px",
  "2800": "112px",
  "3200": "128px"
};
var border = {
  "border-radius-0": {
    value: size[0]
  },
  "border-radius-050": {
    value: size["050"]
  },
  "border-radius-100": {
    value: size[100]
  },
  "border-radius-150": {
    value: size[150]
  },
  "border-radius-200": {
    value: size[200]
  },
  "border-radius-300": {
    value: size[300]
  },
  "border-radius-400": {
    value: size[400]
  },
  "border-radius-500": {
    value: size[500]
  },
  "border-radius-750": {
    value: size[750]
  },
  "border-radius-full": {
    value: "9999px"
  },
  "border-width-0": {
    value: size["0"]
  },
  "border-width-0165": {
    value: size["0165"]
  },
  "border-width-025": {
    value: size["025"]
  },
  "border-width-050": {
    value: size["050"]
  },
  "border-width-100": {
    value: size[100]
  }
};
var gray = {
  1: "rgba(255, 255, 255, 1)",
  2: "rgba(253, 253, 253, 1)",
  3: "rgba(250, 250, 250, 1)",
  4: "rgba(247, 247, 247, 1)",
  5: "rgba(243, 243, 243, 1)",
  6: "rgba(241, 241, 241, 1)",
  7: "rgba(235, 235, 235, 1)",
  8: "rgba(227, 227, 227, 1)",
  9: "rgba(212, 212, 212, 1)",
  10: "rgba(204, 204, 204, 1)",
  11: "rgba(181, 181, 181, 1)",
  12: "rgba(138, 138, 138, 1)",
  13: "rgba(97, 97, 97, 1)",
  14: "rgba(74, 74, 74, 1)",
  15: "rgba(48, 48, 48, 1)",
  16: "rgba(26, 26, 26, 1)"
};
var azure = {
  "1": "rgba(251, 253, 255, 1)",
  "2": "rgba(242, 249, 255, 1)",
  "3": "rgba(234, 244, 255, 1)",
  "4": "rgba(224, 240, 255, 1)",
  "5": "rgba(213, 235, 255, 1)",
  "6": "rgba(202, 230, 255, 1)",
  "7": "rgba(192, 225, 255, 1)",
  "8": "rgba(168, 216, 255, 1)",
  "9": "rgba(145, 208, 255, 1)",
  "10": "rgba(81, 192, 255, 1)",
  "11": "rgba(0, 148, 213, 1)",
  "12": "rgba(0, 124, 180, 1)",
  "13": "rgba(0, 103, 155, 1)",
  "14": "rgba(0, 82, 124, 1)",
  "15": "rgba(0, 58, 90, 1)",
  "16": "rgba(0, 33, 51, 1)"
};
var blue = {
  "1": "rgba(252, 253, 255, 1)",
  "2": "rgba(246, 248, 255, 1)",
  "3": "rgba(240, 242, 255, 1)",
  "4": "rgba(234, 237, 255, 1)",
  "5": "rgba(226, 231, 255, 1)",
  "6": "rgba(219, 225, 255, 1)",
  "7": "rgba(213, 220, 255, 1)",
  "8": "rgba(197, 208, 255, 1)",
  "9": "rgba(186, 199, 255, 1)",
  "10": "rgba(151, 173, 255, 1)",
  "11": "rgba(65, 136, 255, 1)",
  "12": "rgba(0, 113, 233, 1)",
  "13": "rgba(0, 91, 211, 1)",
  "14": "rgba(0, 66, 153, 1)",
  "15": "rgba(0, 46, 106, 1)",
  "16": "rgba(0, 22, 51, 1)"
};
var green = {
  "1": "rgba(248, 255, 251, 1)",
  "2": "rgba(227, 255, 237, 1)",
  "3": "rgba(205, 254, 225, 1)",
  "4": "rgba(180, 254, 210, 1)",
  "5": "rgba(146, 254, 194, 1)",
  "6": "rgba(99, 253, 176, 1)",
  "7": "rgba(56, 250, 163, 1)",
  "8": "rgba(53, 238, 155, 1)",
  "9": "rgba(50, 225, 147, 1)",
  "10": "rgba(46, 211, 137, 1)",
  "11": "rgba(50, 160, 110, 1)",
  "12": "rgba(41, 132, 90, 1)",
  "13": "rgba(19, 111, 69, 1)",
  "14": "rgba(12, 81, 50, 1)",
  "15": "rgba(8, 61, 37, 1)",
  "16": "rgba(9, 42, 27, 1)"
};
var lime = {
  "1": "rgba(250, 255, 250, 1)",
  "2": "rgba(228, 255, 229, 1)",
  "3": "rgba(208, 255, 209, 1)",
  "4": "rgba(187, 254, 190, 1)",
  "5": "rgba(157, 254, 160, 1)",
  "6": "rgba(119, 254, 122, 1)",
  "7": "rgba(56, 254, 62, 1)",
  "8": "rgba(40, 242, 47, 1)",
  "9": "rgba(37, 232, 43, 1)",
  "10": "rgba(32, 207, 39, 1)",
  "11": "rgba(24, 168, 29, 1)",
  "12": "rgba(17, 135, 21, 1)",
  "13": "rgba(12, 113, 15, 1)",
  "14": "rgba(11, 85, 13, 1)",
  "15": "rgba(3, 61, 5, 1)",
  "16": "rgba(3, 33, 4, 1)"
};
var magenta = {
  "1": "rgba(255, 253, 255, 1)",
  "2": "rgba(255, 245, 255, 1)",
  "3": "rgba(253, 239, 253, 1)",
  "4": "rgba(254, 231, 254, 1)",
  "5": "rgba(252, 223, 252, 1)",
  "6": "rgba(251, 215, 251, 1)",
  "7": "rgba(251, 207, 251, 1)",
  "8": "rgba(249, 190, 249, 1)",
  "9": "rgba(248, 177, 248, 1)",
  "10": "rgba(246, 141, 246, 1)",
  "11": "rgba(225, 86, 225, 1)",
  "12": "rgba(197, 48, 197, 1)",
  "13": "rgba(159, 38, 159, 1)",
  "14": "rgba(121, 26, 121, 1)",
  "15": "rgba(86, 16, 86, 1)",
  "16": "rgba(52, 6, 52, 1)"
};
var orange = {
  "1": "rgba(255, 253, 250, 1)",
  "2": "rgba(255, 247, 238, 1)",
  "3": "rgba(255, 241, 227, 1)",
  "4": "rgba(255, 235, 213, 1)",
  "5": "rgba(255, 228, 198, 1)",
  "6": "rgba(255, 221, 182, 1)",
  "7": "rgba(255, 214, 164, 1)",
  "8": "rgba(255, 200, 121, 1)",
  "9": "rgba(255, 184, 0, 1)",
  "10": "rgba(229, 165, 0, 1)",
  "11": "rgba(178, 132, 0, 1)",
  "12": "rgba(149, 111, 0, 1)",
  "13": "rgba(124, 88, 0, 1)",
  "14": "rgba(94, 66, 0, 1)",
  "15": "rgba(65, 45, 0, 1)",
  "16": "rgba(37, 26, 0, 1)"
};
var purple = {
  "1": "rgba(253, 253, 255, 1)",
  "2": "rgba(248, 247, 255, 1)",
  "3": "rgba(243, 241, 255, 1)",
  "4": "rgba(239, 236, 255, 1)",
  "5": "rgba(233, 229, 255, 1)",
  "6": "rgba(228, 222, 255, 1)",
  "7": "rgba(223, 217, 255, 1)",
  "8": "rgba(212, 204, 255, 1)",
  "9": "rgba(199, 188, 255, 1)",
  "10": "rgba(170, 149, 255, 1)",
  "11": "rgba(148, 116, 255, 1)",
  "12": "rgba(128, 81, 255, 1)",
  "13": "rgba(113, 38, 255, 1)",
  "14": "rgba(87, 0, 209, 1)",
  "15": "rgba(59, 0, 147, 1)",
  "16": "rgba(28, 0, 79, 1)"
};
var red = {
  "1": "rgba(255, 251, 251, 1)",
  "2": "rgba(255, 246, 246, 1)",
  "3": "rgba(255, 237, 236, 1)",
  "4": "rgba(254, 233, 232, 1)",
  "5": "rgba(254, 226, 225, 1)",
  "6": "rgba(254, 218, 217, 1)",
  "7": "rgba(254, 211, 209, 1)",
  "8": "rgba(254, 195, 193, 1)",
  "9": "rgba(253, 176, 172, 1)",
  "10": "rgba(253, 129, 122, 1)",
  "11": "rgba(239, 77, 47, 1)",
  "12": "rgba(229, 28, 0, 1)",
  "13": "rgba(181, 38, 11, 1)",
  "14": "rgba(142, 31, 11, 1)",
  "15": "rgba(95, 21, 7, 1)",
  "16": "rgba(47, 10, 4, 1)"
};
var rose = {
  "1": "rgba(255, 253, 253, 1)",
  "2": "rgba(255, 246, 248, 1)",
  "3": "rgba(255, 239, 243, 1)",
  "4": "rgba(255, 232, 238, 1)",
  "5": "rgba(255, 225, 232, 1)",
  "6": "rgba(255, 217, 227, 1)",
  "7": "rgba(254, 209, 221, 1)",
  "8": "rgba(254, 193, 210, 1)",
  "9": "rgba(254, 181, 202, 1)",
  "10": "rgba(254, 142, 177, 1)",
  "11": "rgba(253, 75, 146, 1)",
  "12": "rgba(227, 12, 118, 1)",
  "13": "rgba(185, 7, 95, 1)",
  "14": "rgba(141, 4, 72, 1)",
  "15": "rgba(100, 2, 49, 1)",
  "16": "rgba(62, 1, 28, 1)"
};
var teal = {
  "1": "rgba(248, 255, 254, 1)",
  "2": "rgba(232, 252, 250, 1)",
  "3": "rgba(215, 250, 247, 1)",
  "4": "rgba(195, 247, 242, 1)",
  "5": "rgba(170, 246, 239, 1)",
  "6": "rgba(137, 245, 236, 1)",
  "7": "rgba(112, 240, 229, 1)",
  "8": "rgba(90, 230, 219, 1)",
  "9": "rgba(44, 224, 212, 1)",
  "10": "rgba(30, 199, 188, 1)",
  "11": "rgba(0, 161, 152, 1)",
  "12": "rgba(18, 131, 124, 1)",
  "13": "rgba(12, 106, 100, 1)",
  "14": "rgba(12, 83, 79, 1)",
  "15": "rgba(3, 60, 57, 1)",
  "16": "rgba(6, 44, 41, 1)"
};
var yellow = {
  "1": "rgba(255, 253, 246, 1)",
  "2": "rgba(255, 248, 219, 1)",
  "3": "rgba(255, 244, 191, 1)",
  "4": "rgba(255, 239, 157, 1)",
  "5": "rgba(255, 235, 120, 1)",
  "6": "rgba(255, 230, 0, 1)",
  "7": "rgba(247, 223, 0, 1)",
  "8": "rgba(234, 211, 0, 1)",
  "9": "rgba(225, 203, 0, 1)",
  "10": "rgba(197, 178, 0, 1)",
  "11": "rgba(153, 138, 0, 1)",
  "12": "rgba(130, 117, 0, 1)",
  "13": "rgba(105, 95, 0, 1)",
  "14": "rgba(79, 71, 0, 1)",
  "15": "rgba(51, 46, 0, 1)",
  "16": "rgba(31, 28, 0, 1)"
};
var blackAlpha = {
  1: "rgba(0, 0, 0, 0)",
  2: "rgba(0, 0, 0, 0.01)",
  3: "rgba(0, 0, 0, 0.02)",
  4: "rgba(0, 0, 0, 0.03)",
  5: "rgba(0, 0, 0, 0.05)",
  6: "rgba(0, 0, 0, 0.06)",
  7: "rgba(0, 0, 0, 0.08)",
  8: "rgba(0, 0, 0, 0.11)",
  9: "rgba(0, 0, 0, 0.17)",
  10: "rgba(0, 0, 0, 0.20)",
  11: "rgba(0, 0, 0, 0.29)",
  12: "rgba(0, 0, 0, 0.46)",
  13: "rgba(0, 0, 0, 0.62)",
  14: "rgba(0, 0, 0, 0.71)",
  15: "rgba(0, 0, 0, 0.81)",
  16: "rgba(0, 0, 0, 0.90)"
};
var color = {
  "color-bg": {
    value: gray[6],
    description: "The default background color of the admin."
  },
  "color-bg-inverse": {
    value: gray[16],
    description: "Use for high contrast page or component backgrounds."
  },
  "color-bg-surface": {
    value: gray[1],
    description: "The background color for elements with the highest level of prominence, like a card."
  },
  "color-bg-surface-hover": {
    value: gray[4],
    description: "The hover state color for elements with the highest level of prominence."
  },
  "color-bg-surface-active": {
    value: gray[5],
    description: "The active state (on press) color for elements with the highest level of prominence."
  },
  "color-bg-surface-selected": {
    value: gray[6],
    description: "The selected state color for elements with the highest level of prominence."
  },
  "color-bg-surface-disabled": {
    value: blackAlpha[5],
    description: "The disabled state color for elements."
  },
  "color-bg-surface-secondary": {
    value: gray[4],
    description: "The background color for elements with a secondary level of prominence."
  },
  "color-bg-surface-secondary-hover": {
    value: gray[6],
    description: "The hover state color for elements with a secondary level of prominence."
  },
  "color-bg-surface-secondary-active": {
    value: gray[7],
    description: "The active state (on press) color for elements with a secondary level of prominence."
  },
  "color-bg-surface-secondary-selected": {
    value: gray[7],
    description: "The selected state color for elements with a secondary level of prominence."
  },
  "color-bg-surface-tertiary": {
    value: gray[5],
    description: "The background color for elements with a third level of prominence."
  },
  "color-bg-surface-tertiary-hover": {
    value: gray[7],
    description: "The hover state color for elements with a third level of prominence."
  },
  "color-bg-surface-tertiary-active": {
    value: gray[8],
    description: "The active state (on press) color for elements with a third level of prominence."
  },
  "color-bg-surface-brand": {
    value: gray[8],
    description: "Use to apply the key color to elements."
  },
  "color-bg-surface-brand-hover": {
    value: gray[7],
    description: "The hover state color for key elements."
  },
  "color-bg-surface-brand-active": {
    value: gray[6],
    description: "The active state (on press) color for key elements."
  },
  "color-bg-surface-brand-selected": {
    value: gray[6],
    description: "The selected state color for key elements."
  },
  "color-bg-surface-info": {
    value: azure[3],
    description: "Use for backgrounds communicating important information, like banners."
  },
  "color-bg-surface-info-hover": {
    value: azure[4],
    description: "The hover state color for communicating important information."
  },
  "color-bg-surface-info-active": {
    value: azure[6],
    description: "The active state (on press) color for communicating important information."
  },
  "color-bg-surface-success": {
    value: green[3],
    description: "Use for backgrounds communicating success, like banners."
  },
  "color-bg-surface-success-hover": {
    value: green[4],
    description: "The hover state color for communicating success."
  },
  "color-bg-surface-success-active": {
    value: green[5],
    description: "The active state (on press) color for communicating success."
  },
  "color-bg-surface-caution": {
    value: yellow[2],
    description: "Use for backgrounds communicating caution, like banners."
  },
  "color-bg-surface-caution-hover": {
    value: yellow[3],
    description: "The hover state for communicating caution."
  },
  "color-bg-surface-caution-active": {
    value: yellow[4],
    description: "The active state (on press) color for communicating caution."
  },
  "color-bg-surface-warning": {
    value: orange[3],
    description: "Use for backgrounds communicating warning, like banners."
  },
  "color-bg-surface-warning-hover": {
    value: orange[4],
    description: "The hover state color for communicating warning."
  },
  "color-bg-surface-warning-active": {
    value: orange[5],
    description: "The active state (on press) color for communicating warning."
  },
  "color-bg-surface-critical": {
    value: red[4],
    description: "Use for backgrounds communicating critical information, like banners or input errors."
  },
  "color-bg-surface-critical-hover": {
    value: red[5],
    description: "The hover state color for communicating critical information."
  },
  "color-bg-surface-critical-active": {
    value: red[6],
    description: "The active state (on press) color for communicating critical information."
  },
  "color-bg-surface-emphasis": {
    value: blue[3],
    description: "Use for backgrounds indicating areas of focus in editors, such as the theme editor."
  },
  "color-bg-surface-emphasis-hover": {
    value: blue[4],
    description: "The hover state color for elements indicating areas of focus in editors."
  },
  "color-bg-surface-emphasis-active": {
    value: blue[5],
    description: "The active state (on press) color for elements indicating areas of focus in editors."
  },
  "color-bg-surface-magic": {
    value: purple[2],
    description: "Use for backgrounds of elements suggested by magic AI."
  },
  "color-bg-surface-magic-hover": {
    value: purple[3],
    description: "The hover state color for elements suggested by magic AI."
  },
  "color-bg-surface-magic-active": {
    value: purple[5],
    description: "The active state (on press) color for elements suggested by magic AI."
  },
  "color-bg-surface-inverse": {
    value: gray[15],
    description: "Use for elements on bg-inverse."
  },
  "color-bg-surface-transparent": {
    value: blackAlpha[1],
    description: "Use for elements that need a fully transparent background."
  },
  "color-bg-fill": {
    value: gray[1],
    description: "The background color of contained elements with a smaller surface area, like a button."
  },
  "color-bg-fill-hover": {
    value: gray[3],
    description: "The hover state color of contained elements with a smaller surface area, like a button."
  },
  "color-bg-fill-active": {
    value: gray[4],
    description: "The active state (on press) color of contained elements with a smaller surface area, like a button."
  },
  "color-bg-fill-selected": {
    value: gray[10],
    description: "The selected state color of contained elements with a smaller surface area, like a button or checkbox."
  },
  "color-bg-fill-disabled": {
    value: blackAlpha[5],
    description: "The disabled state color of contained elements with a smaller surface area, like a button."
  },
  "color-bg-fill-secondary": {
    value: gray[6],
    description: "The background color of elements with a smaller surface area and a secondary level of prominence."
  },
  "color-bg-fill-secondary-hover": {
    value: gray[7],
    description: "The hover state color of elements with a smaller surface area and a secondary level of prominence."
  },
  "color-bg-fill-secondary-active": {
    value: gray[8],
    description: "The active state (on press) color of elements with a smaller surface area and a secondary level of prominence."
  },
  "color-bg-fill-tertiary": {
    value: gray[8],
    description: "The background color of elements with a smaller surface area and a third level of prominence."
  },
  "color-bg-fill-tertiary-hover": {
    value: gray[9],
    description: "The hover state color of elements with a smaller surface area and a third level of prominence."
  },
  "color-bg-fill-tertiary-active": {
    value: gray[10],
    description: "The active state (on press) color of elements with a smaller surface area and a third level of prominence."
  },
  "color-bg-fill-brand": {
    value: gray[15],
    description: "The background color of main actions, like primary buttons."
  },
  "color-bg-fill-brand-hover": {
    value: gray[16],
    description: "The hover state color of main actions, like primary buttons."
  },
  "color-bg-fill-brand-active": {
    value: gray[16],
    description: "The active state (on press) color of main actions, like primary buttons."
  },
  "color-bg-fill-brand-selected": {
    value: gray[15],
    description: "The selected state color of main actions, like primary buttons."
  },
  "color-bg-fill-brand-disabled": {
    value: blackAlpha[9],
    description: "The disabled state color of main actions, like primary buttons."
  },
  "color-bg-fill-info": {
    value: azure[9],
    description: "Use for backgrounds communicating important information on elements with a smaller surface area, like a badge or button."
  },
  "color-bg-fill-info-hover": {
    value: azure[10],
    description: "The hover state color for communicating important information on elements with a smaller surface area."
  },
  "color-bg-fill-info-active": {
    value: azure[11],
    description: "The active state (on press) color for communicating important information on elements with a smaller surface area."
  },
  "color-bg-fill-info-secondary": {
    value: azure[5],
    description: "Use for backgrounds communicating important information on elements with a smaller surface area, with a secondary level of prominence."
  },
  "color-bg-fill-success": {
    value: green[12],
    description: "Use for backgrounds communicating success on elements with a smaller surface area, like a badge or a banner."
  },
  "color-bg-fill-success-hover": {
    value: green[13],
    description: "The hover state color for communicating success on elements with a smaller surface area."
  },
  "color-bg-fill-success-active": {
    value: green[14],
    description: "The active state (on press) color for communicating success on elements with a smaller surface area."
  },
  "color-bg-fill-success-secondary": {
    value: green[4],
    description: "Use for backgrounds communicating success on elements with a smaller surface area, with a secondary level of prominence."
  },
  "color-bg-fill-warning": {
    value: orange[9],
    description: "Use for backgrounds communicating warning on elements with a smaller surface area, like a badge or a banner."
  },
  "color-bg-fill-warning-hover": {
    value: orange[10],
    description: "The hover state color for communicating warning on elements with a smaller surface area."
  },
  "color-bg-fill-warning-active": {
    value: orange[11],
    description: "The active state (on press) color for communicating warning on elements with a smaller surface area."
  },
  "color-bg-fill-warning-secondary": {
    value: orange[7],
    description: "Use for backgrounds communicating warning on elements with a smaller surface area, with a secondary level of prominence."
  },
  "color-bg-fill-caution": {
    value: yellow[6],
    description: "Use for backgrounds communicating caution on elements with a smaller surface area, like a badge or a banner."
  },
  "color-bg-fill-caution-hover": {
    value: yellow[8],
    description: "The hover state color for communicating caution on elements with a smaller surface area."
  },
  "color-bg-fill-caution-active": {
    value: yellow[9],
    description: "The active state (on press) color for communicating caution on elements with a smaller surface area."
  },
  "color-bg-fill-caution-secondary": {
    value: yellow[5],
    description: "Use for backgrounds communicating caution on elements with a smaller surface area, with a secondary level of prominence."
  },
  "color-bg-fill-critical": {
    value: red[12],
    description: "Use for backgrounds communicating critical information on elements with a smaller surface area, like a badge or a banner."
  },
  "color-bg-fill-critical-hover": {
    value: red[13],
    description: "The hover state color for communicating critical information on elements with a smaller surface area."
  },
  "color-bg-fill-critical-active": {
    value: red[14],
    description: "The active state (on press) color for communicating critical information on elements with a smaller surface area."
  },
  "color-bg-fill-critical-selected": {
    value: red[14],
    description: "The selected state color for communicating critical information on elements with a smaller surface area."
  },
  "color-bg-fill-critical-secondary": {
    value: red[7],
    description: "Use for backgrounds communicating critical information on elements with a smaller surface area, with a secondary level of prominence."
  },
  "color-bg-fill-emphasis": {
    value: blue[13],
    description: "Use for backgrounds indicating areas of focus in editors on elements with a smaller surface area, like a button or a badge."
  },
  "color-bg-fill-emphasis-hover": {
    value: blue[14],
    description: "The hover state color for indicating areas of focus in editors on elements with a smaller surface area."
  },
  "color-bg-fill-emphasis-active": {
    value: blue[15],
    description: "The active state (on press) color for indicating areas of focus in editors on elements with a smaller surface area."
  },
  "color-bg-fill-magic": {
    value: purple[12],
    description: "The background color of elements suggested by magic AI, like a badge or a banner."
  },
  "color-bg-fill-magic-secondary": {
    value: purple[5],
    description: "The background color of elements suggested by magic AI, with a secondary level of prominence."
  },
  "color-bg-fill-magic-secondary-hover": {
    value: purple[6],
    description: "The hover state color of elements suggested by magic AI, with a secondary level of prominence."
  },
  "color-bg-fill-magic-secondary-active": {
    value: purple[7],
    description: "The active state (on press) color of elements suggested by magic AI, with a secondary level of prominence."
  },
  "color-bg-fill-inverse": {
    value: gray[15],
    description: "The background color of elements with a smaller surface area on an inverse background."
  },
  "color-bg-fill-inverse-hover": {
    value: gray[14],
    description: "The hover state color of elements with a smaller surface area on an inverse background."
  },
  "color-bg-fill-inverse-active": {
    value: gray[13],
    description: "The active state (on press) color of elements with a smaller surface area on an inverse background."
  },
  "color-bg-fill-transparent": {
    value: blackAlpha[3],
    description: "The background color of elements that need to sit on different background colors, like tabs."
  },
  "color-bg-fill-transparent-hover": {
    value: blackAlpha[5],
    description: "The hover state color of elements that need to sit on different background colors, like tabs."
  },
  "color-bg-fill-transparent-active": {
    value: blackAlpha[7],
    description: "The active state (on press) color of elements that need to sit on different background colors, like tabs."
  },
  "color-bg-fill-transparent-selected": {
    value: blackAlpha[7],
    description: "The selected state color of elements that need to sit on different background colors, like tabs."
  },
  "color-bg-fill-transparent-secondary": {
    value: blackAlpha[6],
    description: "The background color of elements that need to sit on different background colors, with a secondary level of prominence."
  },
  "color-bg-fill-transparent-secondary-hover": {
    value: blackAlpha[7],
    description: "The hover state color of elements that need to sit on different background colors, with a secondary level of prominence."
  },
  "color-bg-fill-transparent-secondary-active": {
    value: blackAlpha[8],
    description: "The active state (on press) color of elements that need to sit on different background colors, with a secondary level of prominence."
  },
  "color-text": {
    value: gray[15],
    description: "The default text color."
  },
  "color-text-secondary": {
    value: gray[13],
    description: "Use for text with a secondary level of prominence."
  },
  "color-text-disabled": {
    value: gray[11],
    description: "Use for text in a disabled state."
  },
  "color-text-link": {
    value: blue[13],
    description: "Use for text links."
  },
  "color-text-link-hover": {
    value: blue[14],
    description: "The hover state color for text links."
  },
  "color-text-link-active": {
    value: blue[15],
    description: "The active state (on press) color for text links."
  },
  "color-text-brand": {
    value: gray[14],
    description: "Use for text that needs to pull attention."
  },
  "color-text-brand-hover": {
    value: gray[15],
    description: "The hover state color for text that needs to pull attention."
  },
  "color-text-brand-on-bg-fill": {
    value: gray[1],
    description: "Use for text on bg-fill-brand, like primary buttons."
  },
  "color-text-brand-on-bg-fill-hover": {
    value: gray[8],
    description: "The hover state color for text on bg-fill-brand-hover."
  },
  "color-text-brand-on-bg-fill-active": {
    value: gray[10],
    description: "The active state (on press) color for text on bg-fill-brand."
  },
  "color-text-brand-on-bg-fill-disabled": {
    value: gray[1],
    description: "The disabled state color for text on bg-fill-brand-disabled."
  },
  "color-text-info": {
    value: azure[15],
    description: "Use for text communicating important information."
  },
  "color-text-info-hover": {
    value: azure[15],
    description: "The hover state color for text communicating important information."
  },
  "color-text-info-active": {
    value: azure[16],
    description: "The active state (on press) color for text communicating important information."
  },
  "color-text-info-secondary": {
    value: azure[12],
    description: "Use for text communicating important information with a secondary level of prominence."
  },
  "color-text-info-on-bg-fill": {
    value: azure[16],
    description: "Use for text and icons on bg-fill-info."
  },
  "color-text-success": {
    value: green[14],
    description: "Use for text communicating success."
  },
  "color-text-success-hover": {
    value: green[15],
    description: "The hover state color for text communicating success."
  },
  "color-text-success-active": {
    value: green[16],
    description: "The active state (on press) color for text communicating success."
  },
  "color-text-success-secondary": {
    value: green[12],
    description: "Use for text communicating success with a secondary level of prominence."
  },
  "color-text-success-on-bg-fill": {
    value: green[1],
    description: "Use for text and icons on bg-fill-success."
  },
  "color-text-caution": {
    value: yellow[14],
    description: "Use for text communicating caution."
  },
  "color-text-caution-hover": {
    value: yellow[15],
    description: "The hover state color for text communicating caution."
  },
  "color-text-caution-active": {
    value: yellow[16],
    description: "The active state (on press) color for text communicating caution."
  },
  "color-text-caution-secondary": {
    value: yellow[12],
    description: "Use for text communicating caution with a secondary level of prominence."
  },
  "color-text-caution-on-bg-fill": {
    value: yellow[15],
    description: "Use for text and icons on bg-fill-caution."
  },
  "color-text-warning": {
    value: orange[14],
    description: "Use for text communicating warning."
  },
  "color-text-warning-hover": {
    value: orange[15],
    description: "The hover state color for text communicating warning."
  },
  "color-text-warning-active": {
    value: orange[16],
    description: "The active state (on press) color for text communicating warning."
  },
  "color-text-warning-secondary": {
    value: orange[12],
    description: "Use for text communicating warning with a secondary level of prominence."
  },
  "color-text-warning-on-bg-fill": {
    value: orange[16],
    description: "Use for text and icons on bg-fill-warning."
  },
  "color-text-critical": {
    value: red[14],
    description: "Use for text communicating critical information."
  },
  "color-text-critical-hover": {
    value: red[15],
    description: "The hover state color for text communicating critical information."
  },
  "color-text-critical-active": {
    value: red[16],
    description: "The active state (on press) color for text communicating critical information."
  },
  "color-text-critical-secondary": {
    value: red[12],
    description: "Use for text communicating critical information with a secondary level of prominence."
  },
  "color-text-critical-on-bg-fill": {
    value: red[1],
    description: "Use for text and icons on bg-fill-critical."
  },
  "color-text-emphasis": {
    value: blue[13],
    description: "Use for text indicating areas of focus in editors, like the theme editor."
  },
  "color-text-emphasis-hover": {
    value: blue[14],
    description: "The hover state color for text indicating areas of focus."
  },
  "color-text-emphasis-active": {
    value: blue[15],
    description: "The active state (on press) color for text indicating areas of focus."
  },
  "color-text-emphasis-on-bg-fill": {
    value: blue[1],
    description: "Use for text and icons on bg-fill-emphasis."
  },
  "color-text-emphasis-on-bg-fill-hover": {
    value: blue[5],
    description: "Use for text and icons on bg-fill-emphasis-hover."
  },
  "color-text-emphasis-on-bg-fill-active": {
    value: blue[7],
    description: "Use for text and icons on bg-fill-emphasis-active."
  },
  "color-text-magic": {
    value: purple[14],
    description: "Use for text suggested by magic AI."
  },
  "color-text-magic-secondary": {
    value: purple[13],
    description: "Use for text suggested by magic AI with a secondary level of prominence."
  },
  "color-text-magic-on-bg-fill": {
    value: purple[1],
    description: "Use for text and icons on bg-fill-magic."
  },
  "color-text-inverse": {
    value: gray[8],
    description: "Use for text on an inverse background."
  },
  "color-text-inverse-secondary": {
    value: gray[11],
    description: "Use for secondary text on an inverse background."
  },
  "color-text-link-inverse": {
    value: blue[8],
    description: "Use for text links on an inverse background."
  },
  "color-border": {
    value: gray[8],
    description: "The default color for borders on any element."
  },
  "color-border-hover": {
    value: gray[10],
    description: "The hover color for borders on any element."
  },
  "color-border-disabled": {
    value: gray[7],
    description: "The disabled color for borders on any element."
  },
  "color-border-secondary": {
    value: gray[7],
    description: "The color for hr elements or any visual dividers."
  },
  "color-border-tertiary": {
    value: gray[10],
    description: "The border color on any element. Pair with bg-surface-tertiary or bg-fill-tertiary."
  },
  "color-border-focus": {
    value: blue[13],
    description: "The focus ring for any interactive element in a focused state."
  },
  "color-border-brand": {
    value: gray[8],
    description: "Use for borders paired with brand colors."
  },
  "color-border-info": {
    value: azure[8],
    description: "Use for borders communicating information."
  },
  "color-border-success": {
    value: green[5],
    description: "Use for borders communicating success."
  },
  "color-border-caution": {
    value: yellow[5],
    description: "Use for borders communicating caution."
  },
  "color-border-warning": {
    value: orange[8],
    description: "Use for borders communicating warning."
  },
  "color-border-critical": {
    value: red[8],
    description: "Use for borders communicating critical information."
  },
  "color-border-critical-secondary": {
    value: red[14],
    description: "Use for borders communicating critical information, such as borders on invalid text fields."
  },
  "color-border-emphasis": {
    value: blue[13],
    description: "Use for borders indicating areas of focus."
  },
  "color-border-emphasis-hover": {
    value: blue[14],
    description: "The hover state color for borders indicating areas of focus."
  },
  "color-border-emphasis-active": {
    value: blue[15],
    description: "The active state (on press) color for borders indicating areas of focus."
  },
  "color-border-magic": {
    value: purple[6],
    description: "Use for borders suggested by magic AI."
  },
  "color-border-magic-secondary": {
    value: purple[11],
    description: "Use for borders suggested by magic AI, such as borders on text fields."
  },
  "color-border-magic-secondary-hover": {
    value: purple[12],
    description: "Use for borders suggested by magic AI, such as borders on text fields."
  },
  "color-border-inverse": {
    value: gray[13],
    description: "Use for borders on an inverse background, such as borders on the global search."
  },
  "color-border-inverse-hover": {
    value: gray[10],
    description: "The hover state color for borders on an inverse background."
  },
  "color-border-inverse-active": {
    value: gray[8],
    description: "The active state (on press) color for borders on an inverse background."
  },
  "color-icon": {
    value: gray[14],
    description: "The default color for icons."
  },
  "color-icon-hover": {
    value: gray[15],
    description: "The hover state color for icons."
  },
  "color-icon-active": {
    value: gray[16],
    description: "The active state (on press) color for icons."
  },
  "color-icon-disabled": {
    value: gray[10],
    description: "The disabled state color for icons."
  },
  "color-icon-secondary": {
    value: gray[12],
    description: "Use for secondary icons."
  },
  "color-icon-secondary-hover": {
    value: gray[13],
    description: "The hover state color for secondary icons."
  },
  "color-icon-secondary-active": {
    value: gray[14],
    description: "The active state (on press) color for secondary icons."
  },
  "color-icon-brand": {
    value: gray[16],
    description: "Use for icons that need to pull more focus."
  },
  "color-icon-info": {
    value: azure[11],
    description: "Use for icons communicating information."
  },
  "color-icon-success": {
    value: green[12],
    description: "Use for icons communicating success."
  },
  "color-icon-caution": {
    value: yellow[11],
    description: "Use for icons communicating caution."
  },
  "color-icon-warning": {
    value: orange[11],
    description: "Use for icons communicating warning."
  },
  "color-icon-critical": {
    value: red[11],
    description: "Use for icons communicating critical information."
  },
  "color-icon-emphasis": {
    value: blue[13],
    description: "Use for icons indicating areas of focus in editors, like the theme editor."
  },
  "color-icon-emphasis-hover": {
    value: blue[14],
    description: "The hover color for icons indicating areas of focus in editors."
  },
  "color-icon-emphasis-active": {
    value: blue[15],
    description: "The active state (on press) color for icons indicating areas of focus in editors."
  },
  "color-icon-magic": {
    value: purple[12],
    description: "Use for icons suggested by magic AI."
  },
  "color-icon-inverse": {
    value: gray[8],
    description: "Use for icons on an inverse background."
  },
  "color-avatar-bg-fill": {
    value: gray[11]
  },
  "color-avatar-five-bg-fill": {
    value: rose[11]
  },
  "color-avatar-five-text-on-bg-fill": {
    value: rose[2]
  },
  "color-avatar-four-bg-fill": {
    value: azure[10]
  },
  "color-avatar-four-text-on-bg-fill": {
    value: azure[16]
  },
  "color-avatar-one-bg-fill": {
    value: magenta[12]
  },
  "color-avatar-one-text-on-bg-fill": {
    value: magenta[3]
  },
  "color-avatar-seven-bg-fill": {
    value: purple[11]
  },
  "color-avatar-seven-text-on-bg-fill": {
    value: purple[2]
  },
  "color-avatar-six-bg-fill": {
    value: lime[9]
  },
  "color-avatar-six-text-on-bg-fill": {
    value: lime[15]
  },
  "color-avatar-text-on-bg-fill": {
    value: gray[1]
  },
  "color-avatar-three-bg-fill": {
    value: teal[9]
  },
  "color-avatar-three-text-on-bg-fill": {
    value: teal[15]
  },
  "color-avatar-two-bg-fill": {
    value: green[7]
  },
  "color-avatar-two-text-on-bg-fill": {
    value: green[14]
  },
  "color-backdrop-bg": {
    value: blackAlpha[14]
  },
  "color-button-gradient-bg-fill": {
    value: "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)"
  },
  "color-checkbox-bg-surface-disabled": {
    value: blackAlpha[7]
  },
  "color-checkbox-icon-disabled": {
    value: gray[1]
  },
  "color-input-bg-surface": {
    value: gray[2]
  },
  "color-input-bg-surface-hover": {
    value: gray[3]
  },
  "color-input-bg-surface-active": {
    value: gray[4]
  },
  "color-input-border": {
    value: gray[12]
  },
  "color-input-border-hover": {
    value: gray[13]
  },
  "color-input-border-active": {
    value: gray[16]
  },
  "color-nav-bg": {
    value: gray[7]
  },
  "color-nav-bg-surface": {
    value: blackAlpha[3]
  },
  "color-nav-bg-surface-hover": {
    value: gray[6]
  },
  "color-nav-bg-surface-active": {
    value: gray[3]
  },
  "color-nav-bg-surface-selected": {
    value: gray[3]
  },
  "color-radio-button-bg-surface-disabled": {
    value: blackAlpha[7]
  },
  "color-radio-button-icon-disabled": {
    value: gray[1]
  },
  "color-video-thumbnail-play-button-bg-fill-hover": {
    value: blackAlpha[15]
  },
  "color-video-thumbnail-play-button-bg-fill": {
    value: blackAlpha[14]
  },
  "color-video-thumbnail-play-button-text-on-bg-fill": {
    value: gray[1]
  },
  "color-scrollbar-thumb-bg-hover": {
    value: gray[12]
  }
};
var font = {
  "font-family-sans": {
    value: "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif"
  },
  "font-family-mono": {
    value: "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace"
  },
  "font-size-275": {
    value: size[275]
  },
  "font-size-300": {
    value: size[300]
  },
  "font-size-325": {
    value: size[325]
  },
  "font-size-350": {
    value: size[350]
  },
  "font-size-400": {
    value: size[400]
  },
  "font-size-450": {
    value: size[450]
  },
  "font-size-500": {
    value: size[500]
  },
  "font-size-550": {
    value: size[550]
  },
  "font-size-600": {
    value: size[600]
  },
  "font-size-750": {
    value: size[750]
  },
  "font-size-800": {
    value: size[800]
  },
  "font-size-900": {
    value: size[900]
  },
  "font-size-1000": {
    value: size[1e3]
  },
  "font-weight-regular": {
    value: "450"
  },
  "font-weight-medium": {
    value: "550"
  },
  "font-weight-semibold": {
    value: "650"
  },
  "font-weight-bold": {
    value: "700"
  },
  "font-letter-spacing-densest": {
    value: "-0.54px"
  },
  "font-letter-spacing-denser": {
    value: "-0.3px"
  },
  "font-letter-spacing-dense": {
    value: "-0.2px"
  },
  "font-letter-spacing-normal": {
    value: "0px"
  },
  "font-line-height-300": {
    value: size[300]
  },
  "font-line-height-400": {
    value: size[400]
  },
  "font-line-height-500": {
    value: size[500]
  },
  "font-line-height-600": {
    value: size[600]
  },
  "font-line-height-700": {
    value: size[700]
  },
  "font-line-height-800": {
    value: size[800]
  },
  "font-line-height-1000": {
    value: size[1e3]
  },
  "font-line-height-1200": {
    value: size[1200]
  }
};
var height = {
  "height-0": {
    value: size[0]
  },
  "height-025": {
    value: size["025"]
  },
  "height-050": {
    value: size["050"]
  },
  "height-100": {
    value: size[100]
  },
  "height-150": {
    value: size[150]
  },
  "height-200": {
    value: size[200]
  },
  "height-300": {
    value: size[300]
  },
  "height-400": {
    value: size[400]
  },
  "height-500": {
    value: size[500]
  },
  "height-600": {
    value: size[600]
  },
  "height-700": {
    value: size[700]
  },
  "height-800": {
    value: size[800]
  },
  "height-900": {
    value: size[900]
  },
  "height-1000": {
    value: size[1e3]
  },
  "height-1200": {
    value: size[1200]
  },
  "height-1600": {
    value: size[1600]
  },
  "height-2000": {
    value: size[2e3]
  },
  "height-2400": {
    value: size[2400]
  },
  "height-2800": {
    value: size[2800]
  },
  "height-3200": {
    value: size[3200]
  }
};
var motion = {
  "motion-duration-0": {
    value: "0ms"
  },
  "motion-duration-50": {
    value: "50ms"
  },
  "motion-duration-100": {
    value: "100ms"
  },
  "motion-duration-150": {
    value: "150ms"
  },
  "motion-duration-200": {
    value: "200ms"
  },
  "motion-duration-250": {
    value: "250ms"
  },
  "motion-duration-300": {
    value: "300ms"
  },
  "motion-duration-350": {
    value: "350ms"
  },
  "motion-duration-400": {
    value: "400ms"
  },
  "motion-duration-450": {
    value: "450ms"
  },
  "motion-duration-500": {
    value: "500ms"
  },
  "motion-duration-5000": {
    value: "5000ms"
  },
  "motion-ease": {
    value: "cubic-bezier(0.25, 0.1, 0.25, 1)",
    description: "Responds quickly and finishes with control. A great default for any user interaction."
  },
  "motion-ease-in": {
    value: "cubic-bezier(0.42, 0, 1, 1)",
    description: "Starts slowly and finishes at top speed. Use sparingly."
  },
  "motion-ease-out": {
    value: "cubic-bezier(0.19, 0.91, 0.38, 1)",
    description: "Starts at top speed and finishes slowly. Use sparingly."
  },
  "motion-ease-in-out": {
    value: "cubic-bezier(0.42, 0, 0.58, 1)",
    description: "Starts and finishes with equal speed. A good default for transitions triggered by the system."
  },
  "motion-linear": {
    value: "cubic-bezier(0, 0, 1, 1)",
    description: "Moves with constant speed. Use for continuous and mechanical animations, such as rotating spinners."
  },
  "motion-keyframes-bounce": {
    value: "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }"
  },
  "motion-keyframes-fade-in": {
    value: "{ to { opacity: 1 } }"
  },
  "motion-keyframes-pulse": {
    value: "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }"
  },
  "motion-keyframes-spin": {
    value: "{ to { transform: rotate(1turn) } }"
  },
  "motion-keyframes-appear-above": {
    value: "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }"
  },
  "motion-keyframes-appear-below": {
    value: "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
  }
};
var shadow = {
  "shadow-0": {
    value: "none"
  },
  "shadow-100": {
    value: "0px 1px 0px 0px rgba(26, 26, 26, 0.07)"
  },
  "shadow-200": {
    value: "0px 3px 1px -1px rgba(26, 26, 26, 0.07)"
  },
  "shadow-300": {
    value: "0px 4px 6px -2px rgba(26, 26, 26, 0.20)"
  },
  "shadow-400": {
    value: "0px 8px 16px -4px rgba(26, 26, 26, 0.22)"
  },
  "shadow-500": {
    value: "0px 12px 20px -8px rgba(26, 26, 26, 0.24)"
  },
  "shadow-600": {
    value: "0px 20px 20px -8px rgba(26, 26, 26, 0.28)"
  },
  "shadow-bevel-100": {
    value: "1px 0px 0px 0px rgba(0, 0, 0, 0.13) inset, -1px 0px 0px 0px rgba(0, 0, 0, 0.13) inset, 0px -1px 0px 0px rgba(0, 0, 0, 0.17) inset, 0px 1px 0px 0px rgba(204, 204, 204, 0.5) inset"
  },
  "shadow-inset-100": {
    value: "0px 1px 2px 0px rgba(26, 26, 26, 0.15) inset, 0px 1px 1px 0px rgba(26, 26, 26, 0.15) inset"
  },
  "shadow-inset-200": {
    value: "0px 2px 1px 0px rgba(26, 26, 26, 0.20) inset, 1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset, -1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset"
  },
  "shadow-button": {
    value: "0px -1px 0px 0px #b5b5b5 inset, 0px 0px 0px 1px rgba(0, 0, 0, 0.1) inset, 0px 0.5px 0px 1.5px #FFF inset"
  },
  "shadow-button-hover": {
    value: "0px 1px 0px 0px #EBEBEB inset, -1px 0px 0px 0px #EBEBEB inset, 1px 0px 0px 0px #EBEBEB inset, 0px -1px 0px 0px #CCC inset"
  },
  "shadow-button-inset": {
    value: "-1px 0px 1px 0px rgba(26, 26, 26, 0.122) inset, 1px 0px 1px 0px rgba(26, 26, 26, 0.122) inset, 0px 2px 1px 0px rgba(26, 26, 26, 0.2) inset"
  },
  "shadow-button-primary": {
    value: "0px -1px 0px 1px rgba(0, 0, 0, 0.8) inset, 0px 0px 0px 1px rgba(48, 48, 48, 1) inset, 0px 0.5px 0px 1.5px rgba(255, 255, 255, 0.25) inset;"
  },
  "shadow-button-primary-hover": {
    value: "0px 1px 0px 0px rgba(255, 255, 255, 0.24) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1px 0px 0px #000 inset, 0px -1px 0px 1px #1A1A1A"
  },
  "shadow-button-primary-inset": {
    value: "0px 3px 0px 0px rgb(0, 0, 0) inset"
  },
  "shadow-button-primary-critical": {
    value: "0px -1px 0px 1px rgba(142, 31, 11, 0.8) inset, 0px 0px 0px 1px rgba(181, 38, 11, 0.8) inset, 0px 0.5px 0px 1.5px rgba(255, 255, 255, 0.349) inset"
  },
  "shadow-button-primary-critical-hover": {
    value: "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset"
  },
  "shadow-button-primary-critical-inset": {
    value: "-1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 0px 2px 0px 0px rgba(0, 0, 0, 0.6) inset"
  },
  "shadow-button-primary-success": {
    value: "0px -1px 0px 1px rgba(12, 81, 50, 0.8) inset, 0px 0px 0px 1px rgba(19, 111, 69, 0.8) inset, 0px 0.5px 0px 1.5px rgba(255, 255, 255, 0.251) inset"
  },
  "shadow-button-primary-success-hover": {
    value: "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset"
  },
  "shadow-button-primary-success-inset": {
    value: "-1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 0px 2px 0px 0px rgba(0, 0, 0, 0.6) inset"
  },
  "shadow-border-inset": {
    value: "0px 0px 0px 1px rgba(0, 0, 0, 0.08) inset"
  }
};
var space = {
  "space-0": {
    value: size[0]
  },
  "space-025": {
    value: size["025"]
  },
  "space-050": {
    value: size["050"]
  },
  "space-100": {
    value: size[100]
  },
  "space-150": {
    value: size[150]
  },
  "space-200": {
    value: size[200]
  },
  "space-300": {
    value: size[300]
  },
  "space-400": {
    value: size[400]
  },
  "space-500": {
    value: size[500]
  },
  "space-600": {
    value: size[600]
  },
  "space-800": {
    value: size[800]
  },
  "space-1000": {
    value: size[1e3]
  },
  "space-1200": {
    value: size[1200]
  },
  "space-1600": {
    value: size[1600]
  },
  "space-2000": {
    value: size[2e3]
  },
  "space-2400": {
    value: size[2400]
  },
  "space-2800": {
    value: size[2800]
  },
  "space-3200": {
    value: size[3200]
  },
  "space-button-group-gap": {
    value: createVar("space-200")
  },
  "space-card-gap": {
    value: createVar("space-400")
  },
  "space-card-padding": {
    value: createVar("space-400")
  },
  "space-table-cell-padding": {
    value: createVar("space-150")
  }
};
function createVar(spaceTokenName) {
  return "var(" + createVarName(spaceTokenName) + ")";
}
var text = {
  // heading-3xl
  "text-heading-3xl-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-heading-3xl-font-size": {
    value: createVar$1("font-size-900")
  },
  "text-heading-3xl-font-weight": {
    value: createVar$1("font-weight-bold")
  },
  "text-heading-3xl-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-densest")
  },
  "text-heading-3xl-font-line-height": {
    value: createVar$1("font-line-height-1200")
  },
  // heading-2xl
  "text-heading-2xl-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-heading-2xl-font-size": {
    value: createVar$1("font-size-750")
  },
  "text-heading-2xl-font-weight": {
    value: createVar$1("font-weight-bold")
  },
  "text-heading-2xl-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-denser")
  },
  "text-heading-2xl-font-line-height": {
    value: createVar$1("font-line-height-1000")
  },
  // heading-xl
  "text-heading-xl-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-heading-xl-font-size": {
    value: createVar$1("font-size-600")
  },
  "text-heading-xl-font-weight": {
    value: createVar$1("font-weight-bold")
  },
  "text-heading-xl-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-dense")
  },
  "text-heading-xl-font-line-height": {
    value: createVar$1("font-line-height-800")
  },
  // heading-lg
  "text-heading-lg-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-heading-lg-font-size": {
    value: createVar$1("font-size-500")
  },
  "text-heading-lg-font-weight": {
    value: createVar$1("font-weight-semibold")
  },
  "text-heading-lg-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-dense")
  },
  "text-heading-lg-font-line-height": {
    value: createVar$1("font-line-height-600")
  },
  // heading-md
  "text-heading-md-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-heading-md-font-size": {
    value: createVar$1("font-size-350")
  },
  "text-heading-md-font-weight": {
    value: createVar$1("font-weight-semibold")
  },
  "text-heading-md-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-normal")
  },
  "text-heading-md-font-line-height": {
    value: createVar$1("font-line-height-500")
  },
  // heading-sm
  "text-heading-sm-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-heading-sm-font-size": {
    value: createVar$1("font-size-325")
  },
  "text-heading-sm-font-weight": {
    value: createVar$1("font-weight-semibold")
  },
  "text-heading-sm-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-normal")
  },
  "text-heading-sm-font-line-height": {
    value: createVar$1("font-line-height-500")
  },
  // heading-xs
  "text-heading-xs-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-heading-xs-font-size": {
    value: createVar$1("font-size-300")
  },
  "text-heading-xs-font-weight": {
    value: createVar$1("font-weight-semibold")
  },
  "text-heading-xs-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-normal")
  },
  "text-heading-xs-font-line-height": {
    value: createVar$1("font-line-height-400")
  },
  // body-lg
  "text-body-lg-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-body-lg-font-size": {
    value: createVar$1("font-size-350")
  },
  "text-body-lg-font-weight": {
    value: createVar$1("font-weight-regular")
  },
  "text-body-lg-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-normal")
  },
  "text-body-lg-font-line-height": {
    value: createVar$1("font-line-height-500")
  },
  // body-md
  "text-body-md-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-body-md-font-size": {
    value: createVar$1("font-size-325")
  },
  "text-body-md-font-weight": {
    value: createVar$1("font-weight-regular")
  },
  "text-body-md-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-normal")
  },
  "text-body-md-font-line-height": {
    value: createVar$1("font-line-height-500")
  },
  // body-sm
  "text-body-sm-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-body-sm-font-size": {
    value: createVar$1("font-size-300")
  },
  "text-body-sm-font-weight": {
    value: createVar$1("font-weight-regular")
  },
  "text-body-sm-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-normal")
  },
  "text-body-sm-font-line-height": {
    value: createVar$1("font-line-height-400")
  },
  // body-xs
  "text-body-xs-font-family": {
    value: createVar$1("font-family-sans")
  },
  "text-body-xs-font-size": {
    value: createVar$1("font-size-275")
  },
  "text-body-xs-font-weight": {
    value: createVar$1("font-weight-regular")
  },
  "text-body-xs-font-letter-spacing": {
    value: createVar$1("font-letter-spacing-normal")
  },
  "text-body-xs-font-line-height": {
    value: createVar$1("font-line-height-300")
  }
};
var width = {
  "width-0": {
    value: size[0]
  },
  "width-025": {
    value: size["025"]
  },
  "width-050": {
    value: size["050"]
  },
  "width-100": {
    value: size[100]
  },
  "width-150": {
    value: size[150]
  },
  "width-200": {
    value: size[200]
  },
  "width-300": {
    value: size[300]
  },
  "width-400": {
    value: size[400]
  },
  "width-500": {
    value: size[500]
  },
  "width-600": {
    value: size[600]
  },
  "width-700": {
    value: size[700]
  },
  "width-800": {
    value: size[800]
  },
  "width-900": {
    value: size[900]
  },
  "width-1000": {
    value: size[1e3]
  },
  "width-1200": {
    value: size[1200]
  },
  "width-1600": {
    value: size[1600]
  },
  "width-2000": {
    value: size[2e3]
  },
  "width-2400": {
    value: size[2400]
  },
  "width-2800": {
    value: size[2800]
  },
  "width-3200": {
    value: size[3200]
  }
};
var zIndex = {
  "z-index-0": {
    value: "auto"
  },
  "z-index-1": {
    value: "100"
  },
  "z-index-2": {
    value: "400"
  },
  "z-index-3": {
    value: "510"
  },
  "z-index-4": {
    value: "512"
  },
  "z-index-5": {
    value: "513"
  },
  "z-index-6": {
    value: "514"
  },
  "z-index-7": {
    value: "515"
  },
  "z-index-8": {
    value: "516"
  },
  "z-index-9": {
    value: "517"
  },
  "z-index-10": {
    value: "518"
  },
  "z-index-11": {
    value: "519"
  },
  "z-index-12": {
    value: "520"
  }
};
var metaThemeBase = createMetaThemeBase({
  border,
  breakpoints,
  color,
  font,
  height,
  motion,
  shadow,
  space,
  text,
  width,
  zIndex
});
function createMetaThemePartial(metaThemePartial) {
  return Object.fromEntries(Object.entries(metaThemePartial).map(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), tokenGroupName = _ref2[0], tokenGroup = _ref2[1];
    return [tokenGroupName, tokenGroup && tokenGroupNamesToRems.includes(tokenGroupName) ? tokenGroupToRems(tokenGroup) : tokenGroup];
  }));
}
function createMetaTheme(metaThemePartial) {
  return deepmerge$1(metaThemeBase, metaThemePartial);
}
function createThemeClassName(themeName) {
  return "p-theme-" + themeName;
}
function createIsTokenName(theme) {
  var tokenNames = new Set(getTokenNames(theme));
  return function(tokenName) {
    return tokenNames.has(tokenName);
  };
}
createIsTokenName(metaThemeBase);
var themeNameLight = "light";
var themeNameDefault = themeNameLight;
var themeNames = [themeNameLight, "light-mobile", "light-high-contrast-experimental"];
var metaThemeLightPartial = createMetaThemePartial({});
createMetaTheme(metaThemeLightPartial);
var metaThemeLightHighContrastPartial = createMetaThemePartial({
  color: {
    "color-text": {
      value: gray[16]
    },
    "color-text-secondary": {
      value: gray[16]
    },
    "color-text-brand": {
      value: gray[16]
    },
    "color-icon-secondary": {
      value: gray[14]
    },
    "color-border": {
      value: gray[12]
    },
    "color-input-border": {
      value: gray[14]
    },
    "color-border-secondary": {
      value: gray[12]
    },
    "color-bg-surface-secondary": {
      value: gray[6]
    }
  },
  shadow: {
    "shadow-bevel-100": {
      value: "0px 1px 0px 0px rgba(26, 26, 26, 0.07), 0px 1px 0px 0px rgba(208, 208, 208, 0.40) inset, 1px 0px 0px 0px #CCC inset, -1px 0px 0px 0px #CCC inset, 0px -1px 0px 0px #999 inset"
    }
  }
});
createMetaTheme(metaThemeLightHighContrastPartial);
var buttonShadow = "0 0 0 " + createVar$1("border-width-025") + " " + createVar$1("color-border") + " inset";
var metaThemeLightMobilePartial = createMetaThemePartial({
  color: {
    "color-button-gradient-bg-fill": {
      value: "none"
    }
  },
  shadow: {
    "shadow-100": {
      value: "none"
    },
    "shadow-bevel-100": {
      value: "none"
    },
    "shadow-button": {
      value: buttonShadow
    },
    "shadow-button-hover": {
      value: buttonShadow
    },
    "shadow-button-inset": {
      value: buttonShadow
    },
    "shadow-button-primary": {
      value: "none"
    },
    "shadow-button-primary-hover": {
      value: "none"
    },
    "shadow-button-primary-inset": {
      value: "none"
    },
    "shadow-button-primary-critical": {
      value: "none"
    },
    "shadow-button-primary-critical-hover": {
      value: "none"
    },
    "shadow-button-primary-critical-inset": {
      value: "none"
    },
    "shadow-button-primary-success": {
      value: "none"
    },
    "shadow-button-primary-success-hover": {
      value: "none"
    },
    "shadow-button-primary-success-inset": {
      value: "none"
    }
  },
  space: {
    "space-card-gap": {
      value: createVar$1("space-200")
    }
  },
  text: {
    // heading-2xl
    "text-heading-2xl-font-size": {
      value: createVar$1("font-size-800")
    },
    // heading-xl
    "text-heading-xl-font-size": {
      value: createVar$1("font-size-550")
    },
    "text-heading-xl-font-line-height": {
      value: createVar$1("font-line-height-700")
    },
    // heading-lg
    "text-heading-lg-font-size": {
      value: createVar$1("font-size-450")
    },
    // heading-md
    "text-heading-md-font-size": {
      value: createVar$1("font-size-400")
    },
    // heading-sm
    "text-heading-sm-font-size": {
      value: createVar$1("font-size-350")
    },
    // body-lg
    "text-body-lg-font-size": {
      value: createVar$1("font-size-450")
    },
    "text-body-lg-font-line-height": {
      value: createVar$1("font-line-height-700")
    },
    // body-md
    "text-body-md-font-size": {
      value: createVar$1("font-size-400")
    },
    "text-body-md-font-line-height": {
      value: createVar$1("font-line-height-600")
    },
    // body-sm
    "text-body-sm-font-size": {
      value: createVar$1("font-size-350")
    },
    "text-body-sm-font-line-height": {
      value: createVar$1("font-line-height-500")
    },
    // body-xs
    "text-body-xs-font-size": {
      value: createVar$1("font-size-300")
    },
    "text-body-xs-font-line-height": {
      value: createVar$1("font-line-height-400")
    }
  }
});
createMetaTheme(metaThemeLightMobilePartial);
var metaThemePartials = {
  light: metaThemeLightPartial,
  "light-mobile": metaThemeLightMobilePartial,
  "light-high-contrast-experimental": metaThemeLightHighContrastPartial
};
var metaThemeDefaultPartial = metaThemePartials[themeNameDefault];
createMetaTheme(metaThemeDefaultPartial);
var themes = {
  "light": {
    "border": {
      "border-radius-0": "0rem",
      "border-radius-050": "0.125rem",
      "border-radius-100": "0.25rem",
      "border-radius-150": "0.375rem",
      "border-radius-200": "0.5rem",
      "border-radius-300": "0.75rem",
      "border-radius-400": "1rem",
      "border-radius-500": "1.25rem",
      "border-radius-750": "1.875rem",
      "border-radius-full": "624.9375rem",
      "border-width-0": "0rem",
      "border-width-0165": "0.04125rem",
      "border-width-025": "0.0625rem",
      "border-width-050": "0.125rem",
      "border-width-100": "0.25rem"
    },
    "breakpoints": {
      "breakpoints-xs": "0rem",
      "breakpoints-sm": "30.625rem",
      "breakpoints-md": "48rem",
      "breakpoints-lg": "65rem",
      "breakpoints-xl": "90rem"
    },
    "color": {
      "color-bg": "rgba(241, 241, 241, 1)",
      "color-bg-inverse": "rgba(26, 26, 26, 1)",
      "color-bg-surface": "rgba(255, 255, 255, 1)",
      "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
      "color-bg-surface-active": "rgba(243, 243, 243, 1)",
      "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
      "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
      "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
      "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
      "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
      "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
      "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
      "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
      "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
      "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
      "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
      "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
      "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
      "color-bg-surface-info": "rgba(234, 244, 255, 1)",
      "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
      "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
      "color-bg-surface-success": "rgba(205, 254, 225, 1)",
      "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
      "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
      "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
      "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
      "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
      "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
      "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
      "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
      "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
      "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
      "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
      "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
      "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
      "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
      "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
      "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
      "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
      "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
      "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
      "color-bg-fill": "rgba(255, 255, 255, 1)",
      "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
      "color-bg-fill-active": "rgba(247, 247, 247, 1)",
      "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
      "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
      "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
      "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
      "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
      "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
      "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
      "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
      "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
      "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
      "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
      "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
      "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
      "color-bg-fill-info": "rgba(145, 208, 255, 1)",
      "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
      "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
      "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
      "color-bg-fill-success": "rgba(41, 132, 90, 1)",
      "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
      "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
      "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
      "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
      "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
      "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
      "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
      "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
      "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
      "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
      "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
      "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
      "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
      "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
      "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
      "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
      "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
      "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
      "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
      "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
      "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
      "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
      "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
      "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
      "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
      "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
      "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
      "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
      "color-text": "rgba(48, 48, 48, 1)",
      "color-text-secondary": "rgba(97, 97, 97, 1)",
      "color-text-disabled": "rgba(181, 181, 181, 1)",
      "color-text-link": "rgba(0, 91, 211, 1)",
      "color-text-link-hover": "rgba(0, 66, 153, 1)",
      "color-text-link-active": "rgba(0, 46, 106, 1)",
      "color-text-brand": "rgba(74, 74, 74, 1)",
      "color-text-brand-hover": "rgba(48, 48, 48, 1)",
      "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
      "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
      "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
      "color-text-info": "rgba(0, 58, 90, 1)",
      "color-text-info-hover": "rgba(0, 58, 90, 1)",
      "color-text-info-active": "rgba(0, 33, 51, 1)",
      "color-text-info-secondary": "rgba(0, 124, 180, 1)",
      "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
      "color-text-success": "rgba(12, 81, 50, 1)",
      "color-text-success-hover": "rgba(8, 61, 37, 1)",
      "color-text-success-active": "rgba(9, 42, 27, 1)",
      "color-text-success-secondary": "rgba(41, 132, 90, 1)",
      "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
      "color-text-caution": "rgba(79, 71, 0, 1)",
      "color-text-caution-hover": "rgba(51, 46, 0, 1)",
      "color-text-caution-active": "rgba(31, 28, 0, 1)",
      "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
      "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
      "color-text-warning": "rgba(94, 66, 0, 1)",
      "color-text-warning-hover": "rgba(65, 45, 0, 1)",
      "color-text-warning-active": "rgba(37, 26, 0, 1)",
      "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
      "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
      "color-text-critical": "rgba(142, 31, 11, 1)",
      "color-text-critical-hover": "rgba(95, 21, 7, 1)",
      "color-text-critical-active": "rgba(47, 10, 4, 1)",
      "color-text-critical-secondary": "rgba(229, 28, 0, 1)",
      "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
      "color-text-emphasis": "rgba(0, 91, 211, 1)",
      "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
      "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
      "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
      "color-text-magic": "rgba(87, 0, 209, 1)",
      "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
      "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
      "color-text-inverse": "rgba(227, 227, 227, 1)",
      "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
      "color-text-link-inverse": "rgba(197, 208, 255, 1)",
      "color-border": "rgba(227, 227, 227, 1)",
      "color-border-hover": "rgba(204, 204, 204, 1)",
      "color-border-disabled": "rgba(235, 235, 235, 1)",
      "color-border-secondary": "rgba(235, 235, 235, 1)",
      "color-border-tertiary": "rgba(204, 204, 204, 1)",
      "color-border-focus": "rgba(0, 91, 211, 1)",
      "color-border-brand": "rgba(227, 227, 227, 1)",
      "color-border-info": "rgba(168, 216, 255, 1)",
      "color-border-success": "rgba(146, 254, 194, 1)",
      "color-border-caution": "rgba(255, 235, 120, 1)",
      "color-border-warning": "rgba(255, 200, 121, 1)",
      "color-border-critical": "rgba(254, 195, 193, 1)",
      "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
      "color-border-emphasis": "rgba(0, 91, 211, 1)",
      "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-border-magic": "rgba(228, 222, 255, 1)",
      "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
      "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
      "color-border-inverse": "rgba(97, 97, 97, 1)",
      "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
      "color-border-inverse-active": "rgba(227, 227, 227, 1)",
      "color-icon": "rgba(74, 74, 74, 1)",
      "color-icon-hover": "rgba(48, 48, 48, 1)",
      "color-icon-active": "rgba(26, 26, 26, 1)",
      "color-icon-disabled": "rgba(204, 204, 204, 1)",
      "color-icon-secondary": "rgba(138, 138, 138, 1)",
      "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
      "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
      "color-icon-brand": "rgba(26, 26, 26, 1)",
      "color-icon-info": "rgba(0, 148, 213, 1)",
      "color-icon-success": "rgba(41, 132, 90, 1)",
      "color-icon-caution": "rgba(153, 138, 0, 1)",
      "color-icon-warning": "rgba(178, 132, 0, 1)",
      "color-icon-critical": "rgba(239, 77, 47, 1)",
      "color-icon-emphasis": "rgba(0, 91, 211, 1)",
      "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-icon-magic": "rgba(128, 81, 255, 1)",
      "color-icon-inverse": "rgba(227, 227, 227, 1)",
      "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
      "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
      "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
      "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
      "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
      "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
      "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
      "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
      "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
      "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
      "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
      "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
      "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
      "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
      "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
      "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
      "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
      "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
      "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
      "color-input-bg-surface": "rgba(253, 253, 253, 1)",
      "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
      "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
      "color-input-border": "rgba(138, 138, 138, 1)",
      "color-input-border-hover": "rgba(97, 97, 97, 1)",
      "color-input-border-active": "rgba(26, 26, 26, 1)",
      "color-nav-bg": "rgba(235, 235, 235, 1)",
      "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
      "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
      "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
      "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
      "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
      "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
      "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
      "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
      "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)"
    },
    "font": {
      "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
      "font-size-275": "0.6875rem",
      "font-size-300": "0.75rem",
      "font-size-325": "0.8125rem",
      "font-size-350": "0.875rem",
      "font-size-400": "1rem",
      "font-size-450": "1.125rem",
      "font-size-500": "1.25rem",
      "font-size-550": "1.375rem",
      "font-size-600": "1.5rem",
      "font-size-750": "1.875rem",
      "font-size-800": "2rem",
      "font-size-900": "2.25rem",
      "font-size-1000": "2.5rem",
      "font-weight-regular": "450",
      "font-weight-medium": "550",
      "font-weight-semibold": "650",
      "font-weight-bold": "700",
      "font-letter-spacing-densest": "-0.03375rem",
      "font-letter-spacing-denser": "-0.01875rem",
      "font-letter-spacing-dense": "-0.0125rem",
      "font-letter-spacing-normal": "0rem",
      "font-line-height-300": "0.75rem",
      "font-line-height-400": "1rem",
      "font-line-height-500": "1.25rem",
      "font-line-height-600": "1.5rem",
      "font-line-height-700": "1.75rem",
      "font-line-height-800": "2rem",
      "font-line-height-1000": "2.5rem",
      "font-line-height-1200": "3rem"
    },
    "height": {
      "height-0": "0rem",
      "height-025": "0.0625rem",
      "height-050": "0.125rem",
      "height-100": "0.25rem",
      "height-150": "0.375rem",
      "height-200": "0.5rem",
      "height-300": "0.75rem",
      "height-400": "1rem",
      "height-500": "1.25rem",
      "height-600": "1.5rem",
      "height-700": "1.75rem",
      "height-800": "2rem",
      "height-900": "2.25rem",
      "height-1000": "2.5rem",
      "height-1200": "3rem",
      "height-1600": "4rem",
      "height-2000": "5rem",
      "height-2400": "6rem",
      "height-2800": "7rem",
      "height-3200": "8rem"
    },
    "motion": {
      "motion-duration-0": "0ms",
      "motion-duration-50": "50ms",
      "motion-duration-100": "100ms",
      "motion-duration-150": "150ms",
      "motion-duration-200": "200ms",
      "motion-duration-250": "250ms",
      "motion-duration-300": "300ms",
      "motion-duration-350": "350ms",
      "motion-duration-400": "400ms",
      "motion-duration-450": "450ms",
      "motion-duration-500": "500ms",
      "motion-duration-5000": "5000ms",
      "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
      "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
      "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
      "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
      "motion-linear": "cubic-bezier(0, 0, 1, 1)",
      "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
      "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
      "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
      "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
      "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
      "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
    },
    "shadow": {
      "shadow-0": "none",
      "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
      "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
      "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
      "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
      "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
      "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
      "shadow-bevel-100": "0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, -0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, 0rem -0.0625rem 0rem 0rem rgba(0, 0, 0, 0.17) inset, 0rem 0.0625rem 0rem 0rem rgba(204, 204, 204, 0.5) inset",
      "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
      "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
      "shadow-button": "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
      "shadow-button-hover": "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
      "shadow-button-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
      "shadow-button-primary": "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
      "shadow-button-primary-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
      "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
      "shadow-button-primary-critical": "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
      "shadow-button-primary-critical-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
      "shadow-button-primary-critical-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
      "shadow-button-primary-success": "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
      "shadow-button-primary-success-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
      "shadow-button-primary-success-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
      "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
    },
    "space": {
      "space-0": "0rem",
      "space-025": "0.0625rem",
      "space-050": "0.125rem",
      "space-100": "0.25rem",
      "space-150": "0.375rem",
      "space-200": "0.5rem",
      "space-300": "0.75rem",
      "space-400": "1rem",
      "space-500": "1.25rem",
      "space-600": "1.5rem",
      "space-800": "2rem",
      "space-1000": "2.5rem",
      "space-1200": "3rem",
      "space-1600": "4rem",
      "space-2000": "5rem",
      "space-2400": "6rem",
      "space-2800": "7rem",
      "space-3200": "8rem",
      "space-button-group-gap": "0.5rem",
      "space-card-gap": "1rem",
      "space-card-padding": "1rem",
      "space-table-cell-padding": "0.375rem"
    },
    "text": {
      "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-3xl-font-size": "2.25rem",
      "text-heading-3xl-font-weight": "700",
      "text-heading-3xl-font-letter-spacing": "-0.03375rem",
      "text-heading-3xl-font-line-height": "3rem",
      "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-2xl-font-size": "1.875rem",
      "text-heading-2xl-font-weight": "700",
      "text-heading-2xl-font-letter-spacing": "-0.01875rem",
      "text-heading-2xl-font-line-height": "2.5rem",
      "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-xl-font-size": "1.5rem",
      "text-heading-xl-font-weight": "700",
      "text-heading-xl-font-letter-spacing": "-0.0125rem",
      "text-heading-xl-font-line-height": "2rem",
      "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-lg-font-size": "1.25rem",
      "text-heading-lg-font-weight": "650",
      "text-heading-lg-font-letter-spacing": "-0.0125rem",
      "text-heading-lg-font-line-height": "1.5rem",
      "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-md-font-size": "0.875rem",
      "text-heading-md-font-weight": "650",
      "text-heading-md-font-letter-spacing": "0rem",
      "text-heading-md-font-line-height": "1.25rem",
      "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-sm-font-size": "0.8125rem",
      "text-heading-sm-font-weight": "650",
      "text-heading-sm-font-letter-spacing": "0rem",
      "text-heading-sm-font-line-height": "1.25rem",
      "text-heading-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-xs-font-size": "0.75rem",
      "text-heading-xs-font-weight": "650",
      "text-heading-xs-font-letter-spacing": "0rem",
      "text-heading-xs-font-line-height": "1rem",
      "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-lg-font-size": "0.875rem",
      "text-body-lg-font-weight": "450",
      "text-body-lg-font-letter-spacing": "0rem",
      "text-body-lg-font-line-height": "1.25rem",
      "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-md-font-size": "0.8125rem",
      "text-body-md-font-weight": "450",
      "text-body-md-font-letter-spacing": "0rem",
      "text-body-md-font-line-height": "1.25rem",
      "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-sm-font-size": "0.75rem",
      "text-body-sm-font-weight": "450",
      "text-body-sm-font-letter-spacing": "0rem",
      "text-body-sm-font-line-height": "1rem",
      "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-xs-font-size": "0.6875rem",
      "text-body-xs-font-weight": "450",
      "text-body-xs-font-letter-spacing": "0rem",
      "text-body-xs-font-line-height": "0.75rem"
    },
    "width": {
      "width-0": "0rem",
      "width-025": "0.0625rem",
      "width-050": "0.125rem",
      "width-100": "0.25rem",
      "width-150": "0.375rem",
      "width-200": "0.5rem",
      "width-300": "0.75rem",
      "width-400": "1rem",
      "width-500": "1.25rem",
      "width-600": "1.5rem",
      "width-700": "1.75rem",
      "width-800": "2rem",
      "width-900": "2.25rem",
      "width-1000": "2.5rem",
      "width-1200": "3rem",
      "width-1600": "4rem",
      "width-2000": "5rem",
      "width-2400": "6rem",
      "width-2800": "7rem",
      "width-3200": "8rem"
    },
    "zIndex": {
      "z-index-0": "auto",
      "z-index-1": "100",
      "z-index-2": "400",
      "z-index-3": "510",
      "z-index-4": "512",
      "z-index-5": "513",
      "z-index-6": "514",
      "z-index-7": "515",
      "z-index-8": "516",
      "z-index-9": "517",
      "z-index-10": "518",
      "z-index-11": "519",
      "z-index-12": "520"
    }
  },
  "light-mobile": {
    "border": {
      "border-radius-0": "0rem",
      "border-radius-050": "0.125rem",
      "border-radius-100": "0.25rem",
      "border-radius-150": "0.375rem",
      "border-radius-200": "0.5rem",
      "border-radius-300": "0.75rem",
      "border-radius-400": "1rem",
      "border-radius-500": "1.25rem",
      "border-radius-750": "1.875rem",
      "border-radius-full": "624.9375rem",
      "border-width-0": "0rem",
      "border-width-0165": "0.04125rem",
      "border-width-025": "0.0625rem",
      "border-width-050": "0.125rem",
      "border-width-100": "0.25rem"
    },
    "breakpoints": {
      "breakpoints-xs": "0rem",
      "breakpoints-sm": "30.625rem",
      "breakpoints-md": "48rem",
      "breakpoints-lg": "65rem",
      "breakpoints-xl": "90rem"
    },
    "color": {
      "color-bg": "rgba(241, 241, 241, 1)",
      "color-bg-inverse": "rgba(26, 26, 26, 1)",
      "color-bg-surface": "rgba(255, 255, 255, 1)",
      "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
      "color-bg-surface-active": "rgba(243, 243, 243, 1)",
      "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
      "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
      "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
      "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
      "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
      "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
      "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
      "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
      "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
      "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
      "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
      "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
      "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
      "color-bg-surface-info": "rgba(234, 244, 255, 1)",
      "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
      "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
      "color-bg-surface-success": "rgba(205, 254, 225, 1)",
      "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
      "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
      "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
      "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
      "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
      "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
      "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
      "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
      "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
      "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
      "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
      "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
      "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
      "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
      "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
      "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
      "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
      "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
      "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
      "color-bg-fill": "rgba(255, 255, 255, 1)",
      "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
      "color-bg-fill-active": "rgba(247, 247, 247, 1)",
      "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
      "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
      "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
      "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
      "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
      "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
      "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
      "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
      "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
      "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
      "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
      "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
      "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
      "color-bg-fill-info": "rgba(145, 208, 255, 1)",
      "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
      "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
      "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
      "color-bg-fill-success": "rgba(41, 132, 90, 1)",
      "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
      "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
      "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
      "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
      "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
      "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
      "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
      "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
      "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
      "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
      "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
      "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
      "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
      "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
      "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
      "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
      "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
      "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
      "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
      "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
      "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
      "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
      "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
      "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
      "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
      "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
      "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
      "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
      "color-text": "rgba(48, 48, 48, 1)",
      "color-text-secondary": "rgba(97, 97, 97, 1)",
      "color-text-disabled": "rgba(181, 181, 181, 1)",
      "color-text-link": "rgba(0, 91, 211, 1)",
      "color-text-link-hover": "rgba(0, 66, 153, 1)",
      "color-text-link-active": "rgba(0, 46, 106, 1)",
      "color-text-brand": "rgba(74, 74, 74, 1)",
      "color-text-brand-hover": "rgba(48, 48, 48, 1)",
      "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
      "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
      "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
      "color-text-info": "rgba(0, 58, 90, 1)",
      "color-text-info-hover": "rgba(0, 58, 90, 1)",
      "color-text-info-active": "rgba(0, 33, 51, 1)",
      "color-text-info-secondary": "rgba(0, 124, 180, 1)",
      "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
      "color-text-success": "rgba(12, 81, 50, 1)",
      "color-text-success-hover": "rgba(8, 61, 37, 1)",
      "color-text-success-active": "rgba(9, 42, 27, 1)",
      "color-text-success-secondary": "rgba(41, 132, 90, 1)",
      "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
      "color-text-caution": "rgba(79, 71, 0, 1)",
      "color-text-caution-hover": "rgba(51, 46, 0, 1)",
      "color-text-caution-active": "rgba(31, 28, 0, 1)",
      "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
      "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
      "color-text-warning": "rgba(94, 66, 0, 1)",
      "color-text-warning-hover": "rgba(65, 45, 0, 1)",
      "color-text-warning-active": "rgba(37, 26, 0, 1)",
      "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
      "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
      "color-text-critical": "rgba(142, 31, 11, 1)",
      "color-text-critical-hover": "rgba(95, 21, 7, 1)",
      "color-text-critical-active": "rgba(47, 10, 4, 1)",
      "color-text-critical-secondary": "rgba(229, 28, 0, 1)",
      "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
      "color-text-emphasis": "rgba(0, 91, 211, 1)",
      "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
      "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
      "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
      "color-text-magic": "rgba(87, 0, 209, 1)",
      "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
      "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
      "color-text-inverse": "rgba(227, 227, 227, 1)",
      "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
      "color-text-link-inverse": "rgba(197, 208, 255, 1)",
      "color-border": "rgba(227, 227, 227, 1)",
      "color-border-hover": "rgba(204, 204, 204, 1)",
      "color-border-disabled": "rgba(235, 235, 235, 1)",
      "color-border-secondary": "rgba(235, 235, 235, 1)",
      "color-border-tertiary": "rgba(204, 204, 204, 1)",
      "color-border-focus": "rgba(0, 91, 211, 1)",
      "color-border-brand": "rgba(227, 227, 227, 1)",
      "color-border-info": "rgba(168, 216, 255, 1)",
      "color-border-success": "rgba(146, 254, 194, 1)",
      "color-border-caution": "rgba(255, 235, 120, 1)",
      "color-border-warning": "rgba(255, 200, 121, 1)",
      "color-border-critical": "rgba(254, 195, 193, 1)",
      "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
      "color-border-emphasis": "rgba(0, 91, 211, 1)",
      "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-border-magic": "rgba(228, 222, 255, 1)",
      "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
      "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
      "color-border-inverse": "rgba(97, 97, 97, 1)",
      "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
      "color-border-inverse-active": "rgba(227, 227, 227, 1)",
      "color-icon": "rgba(74, 74, 74, 1)",
      "color-icon-hover": "rgba(48, 48, 48, 1)",
      "color-icon-active": "rgba(26, 26, 26, 1)",
      "color-icon-disabled": "rgba(204, 204, 204, 1)",
      "color-icon-secondary": "rgba(138, 138, 138, 1)",
      "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
      "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
      "color-icon-brand": "rgba(26, 26, 26, 1)",
      "color-icon-info": "rgba(0, 148, 213, 1)",
      "color-icon-success": "rgba(41, 132, 90, 1)",
      "color-icon-caution": "rgba(153, 138, 0, 1)",
      "color-icon-warning": "rgba(178, 132, 0, 1)",
      "color-icon-critical": "rgba(239, 77, 47, 1)",
      "color-icon-emphasis": "rgba(0, 91, 211, 1)",
      "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-icon-magic": "rgba(128, 81, 255, 1)",
      "color-icon-inverse": "rgba(227, 227, 227, 1)",
      "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
      "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
      "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
      "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
      "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
      "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
      "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
      "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
      "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
      "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
      "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
      "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
      "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
      "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
      "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
      "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
      "color-button-gradient-bg-fill": "none",
      "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
      "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
      "color-input-bg-surface": "rgba(253, 253, 253, 1)",
      "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
      "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
      "color-input-border": "rgba(138, 138, 138, 1)",
      "color-input-border-hover": "rgba(97, 97, 97, 1)",
      "color-input-border-active": "rgba(26, 26, 26, 1)",
      "color-nav-bg": "rgba(235, 235, 235, 1)",
      "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
      "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
      "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
      "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
      "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
      "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
      "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
      "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
      "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)"
    },
    "font": {
      "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
      "font-size-275": "0.6875rem",
      "font-size-300": "0.75rem",
      "font-size-325": "0.8125rem",
      "font-size-350": "0.875rem",
      "font-size-400": "1rem",
      "font-size-450": "1.125rem",
      "font-size-500": "1.25rem",
      "font-size-550": "1.375rem",
      "font-size-600": "1.5rem",
      "font-size-750": "1.875rem",
      "font-size-800": "2rem",
      "font-size-900": "2.25rem",
      "font-size-1000": "2.5rem",
      "font-weight-regular": "450",
      "font-weight-medium": "550",
      "font-weight-semibold": "650",
      "font-weight-bold": "700",
      "font-letter-spacing-densest": "-0.03375rem",
      "font-letter-spacing-denser": "-0.01875rem",
      "font-letter-spacing-dense": "-0.0125rem",
      "font-letter-spacing-normal": "0rem",
      "font-line-height-300": "0.75rem",
      "font-line-height-400": "1rem",
      "font-line-height-500": "1.25rem",
      "font-line-height-600": "1.5rem",
      "font-line-height-700": "1.75rem",
      "font-line-height-800": "2rem",
      "font-line-height-1000": "2.5rem",
      "font-line-height-1200": "3rem"
    },
    "height": {
      "height-0": "0rem",
      "height-025": "0.0625rem",
      "height-050": "0.125rem",
      "height-100": "0.25rem",
      "height-150": "0.375rem",
      "height-200": "0.5rem",
      "height-300": "0.75rem",
      "height-400": "1rem",
      "height-500": "1.25rem",
      "height-600": "1.5rem",
      "height-700": "1.75rem",
      "height-800": "2rem",
      "height-900": "2.25rem",
      "height-1000": "2.5rem",
      "height-1200": "3rem",
      "height-1600": "4rem",
      "height-2000": "5rem",
      "height-2400": "6rem",
      "height-2800": "7rem",
      "height-3200": "8rem"
    },
    "motion": {
      "motion-duration-0": "0ms",
      "motion-duration-50": "50ms",
      "motion-duration-100": "100ms",
      "motion-duration-150": "150ms",
      "motion-duration-200": "200ms",
      "motion-duration-250": "250ms",
      "motion-duration-300": "300ms",
      "motion-duration-350": "350ms",
      "motion-duration-400": "400ms",
      "motion-duration-450": "450ms",
      "motion-duration-500": "500ms",
      "motion-duration-5000": "5000ms",
      "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
      "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
      "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
      "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
      "motion-linear": "cubic-bezier(0, 0, 1, 1)",
      "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
      "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
      "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
      "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
      "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
      "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
    },
    "shadow": {
      "shadow-0": "none",
      "shadow-100": "none",
      "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
      "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
      "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
      "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
      "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
      "shadow-bevel-100": "none",
      "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
      "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
      "shadow-button": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
      "shadow-button-hover": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
      "shadow-button-inset": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
      "shadow-button-primary": "none",
      "shadow-button-primary-hover": "none",
      "shadow-button-primary-inset": "none",
      "shadow-button-primary-critical": "none",
      "shadow-button-primary-critical-hover": "none",
      "shadow-button-primary-critical-inset": "none",
      "shadow-button-primary-success": "none",
      "shadow-button-primary-success-hover": "none",
      "shadow-button-primary-success-inset": "none",
      "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
    },
    "space": {
      "space-0": "0rem",
      "space-025": "0.0625rem",
      "space-050": "0.125rem",
      "space-100": "0.25rem",
      "space-150": "0.375rem",
      "space-200": "0.5rem",
      "space-300": "0.75rem",
      "space-400": "1rem",
      "space-500": "1.25rem",
      "space-600": "1.5rem",
      "space-800": "2rem",
      "space-1000": "2.5rem",
      "space-1200": "3rem",
      "space-1600": "4rem",
      "space-2000": "5rem",
      "space-2400": "6rem",
      "space-2800": "7rem",
      "space-3200": "8rem",
      "space-button-group-gap": "0.5rem",
      "space-card-gap": "0.5rem",
      "space-card-padding": "1rem",
      "space-table-cell-padding": "0.375rem"
    },
    "text": {
      "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-3xl-font-size": "2.25rem",
      "text-heading-3xl-font-weight": "700",
      "text-heading-3xl-font-letter-spacing": "-0.03375rem",
      "text-heading-3xl-font-line-height": "3rem",
      "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-2xl-font-size": "2rem",
      "text-heading-2xl-font-weight": "700",
      "text-heading-2xl-font-letter-spacing": "-0.01875rem",
      "text-heading-2xl-font-line-height": "2.5rem",
      "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-xl-font-size": "1.375rem",
      "text-heading-xl-font-weight": "700",
      "text-heading-xl-font-letter-spacing": "-0.0125rem",
      "text-heading-xl-font-line-height": "1.75rem",
      "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-lg-font-size": "1.125rem",
      "text-heading-lg-font-weight": "650",
      "text-heading-lg-font-letter-spacing": "-0.0125rem",
      "text-heading-lg-font-line-height": "1.5rem",
      "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-md-font-size": "1rem",
      "text-heading-md-font-weight": "650",
      "text-heading-md-font-letter-spacing": "0rem",
      "text-heading-md-font-line-height": "1.25rem",
      "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-sm-font-size": "0.875rem",
      "text-heading-sm-font-weight": "650",
      "text-heading-sm-font-letter-spacing": "0rem",
      "text-heading-sm-font-line-height": "1.25rem",
      "text-heading-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-xs-font-size": "0.75rem",
      "text-heading-xs-font-weight": "650",
      "text-heading-xs-font-letter-spacing": "0rem",
      "text-heading-xs-font-line-height": "1rem",
      "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-lg-font-size": "1.125rem",
      "text-body-lg-font-weight": "450",
      "text-body-lg-font-letter-spacing": "0rem",
      "text-body-lg-font-line-height": "1.75rem",
      "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-md-font-size": "1rem",
      "text-body-md-font-weight": "450",
      "text-body-md-font-letter-spacing": "0rem",
      "text-body-md-font-line-height": "1.5rem",
      "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-sm-font-size": "0.875rem",
      "text-body-sm-font-weight": "450",
      "text-body-sm-font-letter-spacing": "0rem",
      "text-body-sm-font-line-height": "1.25rem",
      "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-xs-font-size": "0.75rem",
      "text-body-xs-font-weight": "450",
      "text-body-xs-font-letter-spacing": "0rem",
      "text-body-xs-font-line-height": "1rem"
    },
    "width": {
      "width-0": "0rem",
      "width-025": "0.0625rem",
      "width-050": "0.125rem",
      "width-100": "0.25rem",
      "width-150": "0.375rem",
      "width-200": "0.5rem",
      "width-300": "0.75rem",
      "width-400": "1rem",
      "width-500": "1.25rem",
      "width-600": "1.5rem",
      "width-700": "1.75rem",
      "width-800": "2rem",
      "width-900": "2.25rem",
      "width-1000": "2.5rem",
      "width-1200": "3rem",
      "width-1600": "4rem",
      "width-2000": "5rem",
      "width-2400": "6rem",
      "width-2800": "7rem",
      "width-3200": "8rem"
    },
    "zIndex": {
      "z-index-0": "auto",
      "z-index-1": "100",
      "z-index-2": "400",
      "z-index-3": "510",
      "z-index-4": "512",
      "z-index-5": "513",
      "z-index-6": "514",
      "z-index-7": "515",
      "z-index-8": "516",
      "z-index-9": "517",
      "z-index-10": "518",
      "z-index-11": "519",
      "z-index-12": "520"
    }
  },
  "light-high-contrast-experimental": {
    "border": {
      "border-radius-0": "0rem",
      "border-radius-050": "0.125rem",
      "border-radius-100": "0.25rem",
      "border-radius-150": "0.375rem",
      "border-radius-200": "0.5rem",
      "border-radius-300": "0.75rem",
      "border-radius-400": "1rem",
      "border-radius-500": "1.25rem",
      "border-radius-750": "1.875rem",
      "border-radius-full": "624.9375rem",
      "border-width-0": "0rem",
      "border-width-0165": "0.04125rem",
      "border-width-025": "0.0625rem",
      "border-width-050": "0.125rem",
      "border-width-100": "0.25rem"
    },
    "breakpoints": {
      "breakpoints-xs": "0rem",
      "breakpoints-sm": "30.625rem",
      "breakpoints-md": "48rem",
      "breakpoints-lg": "65rem",
      "breakpoints-xl": "90rem"
    },
    "color": {
      "color-bg": "rgba(241, 241, 241, 1)",
      "color-bg-inverse": "rgba(26, 26, 26, 1)",
      "color-bg-surface": "rgba(255, 255, 255, 1)",
      "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
      "color-bg-surface-active": "rgba(243, 243, 243, 1)",
      "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
      "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
      "color-bg-surface-secondary": "rgba(241, 241, 241, 1)",
      "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
      "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
      "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
      "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
      "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
      "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
      "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
      "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
      "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
      "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
      "color-bg-surface-info": "rgba(234, 244, 255, 1)",
      "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
      "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
      "color-bg-surface-success": "rgba(205, 254, 225, 1)",
      "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
      "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
      "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
      "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
      "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
      "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
      "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
      "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
      "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
      "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
      "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
      "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
      "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
      "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
      "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
      "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
      "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
      "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
      "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
      "color-bg-fill": "rgba(255, 255, 255, 1)",
      "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
      "color-bg-fill-active": "rgba(247, 247, 247, 1)",
      "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
      "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
      "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
      "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
      "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
      "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
      "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
      "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
      "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
      "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
      "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
      "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
      "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
      "color-bg-fill-info": "rgba(145, 208, 255, 1)",
      "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
      "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
      "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
      "color-bg-fill-success": "rgba(41, 132, 90, 1)",
      "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
      "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
      "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
      "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
      "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
      "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
      "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
      "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
      "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
      "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
      "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
      "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
      "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
      "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
      "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
      "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
      "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
      "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
      "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
      "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
      "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
      "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
      "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
      "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
      "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
      "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
      "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
      "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
      "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
      "color-text": "rgba(26, 26, 26, 1)",
      "color-text-secondary": "rgba(26, 26, 26, 1)",
      "color-text-disabled": "rgba(181, 181, 181, 1)",
      "color-text-link": "rgba(0, 91, 211, 1)",
      "color-text-link-hover": "rgba(0, 66, 153, 1)",
      "color-text-link-active": "rgba(0, 46, 106, 1)",
      "color-text-brand": "rgba(26, 26, 26, 1)",
      "color-text-brand-hover": "rgba(48, 48, 48, 1)",
      "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
      "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
      "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
      "color-text-info": "rgba(0, 58, 90, 1)",
      "color-text-info-hover": "rgba(0, 58, 90, 1)",
      "color-text-info-active": "rgba(0, 33, 51, 1)",
      "color-text-info-secondary": "rgba(0, 124, 180, 1)",
      "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
      "color-text-success": "rgba(12, 81, 50, 1)",
      "color-text-success-hover": "rgba(8, 61, 37, 1)",
      "color-text-success-active": "rgba(9, 42, 27, 1)",
      "color-text-success-secondary": "rgba(41, 132, 90, 1)",
      "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
      "color-text-caution": "rgba(79, 71, 0, 1)",
      "color-text-caution-hover": "rgba(51, 46, 0, 1)",
      "color-text-caution-active": "rgba(31, 28, 0, 1)",
      "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
      "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
      "color-text-warning": "rgba(94, 66, 0, 1)",
      "color-text-warning-hover": "rgba(65, 45, 0, 1)",
      "color-text-warning-active": "rgba(37, 26, 0, 1)",
      "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
      "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
      "color-text-critical": "rgba(142, 31, 11, 1)",
      "color-text-critical-hover": "rgba(95, 21, 7, 1)",
      "color-text-critical-active": "rgba(47, 10, 4, 1)",
      "color-text-critical-secondary": "rgba(229, 28, 0, 1)",
      "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
      "color-text-emphasis": "rgba(0, 91, 211, 1)",
      "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
      "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
      "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
      "color-text-magic": "rgba(87, 0, 209, 1)",
      "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
      "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
      "color-text-inverse": "rgba(227, 227, 227, 1)",
      "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
      "color-text-link-inverse": "rgba(197, 208, 255, 1)",
      "color-border": "rgba(138, 138, 138, 1)",
      "color-border-hover": "rgba(204, 204, 204, 1)",
      "color-border-disabled": "rgba(235, 235, 235, 1)",
      "color-border-secondary": "rgba(138, 138, 138, 1)",
      "color-border-tertiary": "rgba(204, 204, 204, 1)",
      "color-border-focus": "rgba(0, 91, 211, 1)",
      "color-border-brand": "rgba(227, 227, 227, 1)",
      "color-border-info": "rgba(168, 216, 255, 1)",
      "color-border-success": "rgba(146, 254, 194, 1)",
      "color-border-caution": "rgba(255, 235, 120, 1)",
      "color-border-warning": "rgba(255, 200, 121, 1)",
      "color-border-critical": "rgba(254, 195, 193, 1)",
      "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
      "color-border-emphasis": "rgba(0, 91, 211, 1)",
      "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-border-magic": "rgba(228, 222, 255, 1)",
      "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
      "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
      "color-border-inverse": "rgba(97, 97, 97, 1)",
      "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
      "color-border-inverse-active": "rgba(227, 227, 227, 1)",
      "color-icon": "rgba(74, 74, 74, 1)",
      "color-icon-hover": "rgba(48, 48, 48, 1)",
      "color-icon-active": "rgba(26, 26, 26, 1)",
      "color-icon-disabled": "rgba(204, 204, 204, 1)",
      "color-icon-secondary": "rgba(74, 74, 74, 1)",
      "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
      "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
      "color-icon-brand": "rgba(26, 26, 26, 1)",
      "color-icon-info": "rgba(0, 148, 213, 1)",
      "color-icon-success": "rgba(41, 132, 90, 1)",
      "color-icon-caution": "rgba(153, 138, 0, 1)",
      "color-icon-warning": "rgba(178, 132, 0, 1)",
      "color-icon-critical": "rgba(239, 77, 47, 1)",
      "color-icon-emphasis": "rgba(0, 91, 211, 1)",
      "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
      "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
      "color-icon-magic": "rgba(128, 81, 255, 1)",
      "color-icon-inverse": "rgba(227, 227, 227, 1)",
      "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
      "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
      "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
      "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
      "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
      "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
      "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
      "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
      "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
      "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
      "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
      "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
      "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
      "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
      "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
      "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
      "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
      "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
      "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
      "color-input-bg-surface": "rgba(253, 253, 253, 1)",
      "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
      "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
      "color-input-border": "rgba(74, 74, 74, 1)",
      "color-input-border-hover": "rgba(97, 97, 97, 1)",
      "color-input-border-active": "rgba(26, 26, 26, 1)",
      "color-nav-bg": "rgba(235, 235, 235, 1)",
      "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
      "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
      "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
      "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
      "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
      "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
      "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
      "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
      "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
      "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)"
    },
    "font": {
      "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
      "font-size-275": "0.6875rem",
      "font-size-300": "0.75rem",
      "font-size-325": "0.8125rem",
      "font-size-350": "0.875rem",
      "font-size-400": "1rem",
      "font-size-450": "1.125rem",
      "font-size-500": "1.25rem",
      "font-size-550": "1.375rem",
      "font-size-600": "1.5rem",
      "font-size-750": "1.875rem",
      "font-size-800": "2rem",
      "font-size-900": "2.25rem",
      "font-size-1000": "2.5rem",
      "font-weight-regular": "450",
      "font-weight-medium": "550",
      "font-weight-semibold": "650",
      "font-weight-bold": "700",
      "font-letter-spacing-densest": "-0.03375rem",
      "font-letter-spacing-denser": "-0.01875rem",
      "font-letter-spacing-dense": "-0.0125rem",
      "font-letter-spacing-normal": "0rem",
      "font-line-height-300": "0.75rem",
      "font-line-height-400": "1rem",
      "font-line-height-500": "1.25rem",
      "font-line-height-600": "1.5rem",
      "font-line-height-700": "1.75rem",
      "font-line-height-800": "2rem",
      "font-line-height-1000": "2.5rem",
      "font-line-height-1200": "3rem"
    },
    "height": {
      "height-0": "0rem",
      "height-025": "0.0625rem",
      "height-050": "0.125rem",
      "height-100": "0.25rem",
      "height-150": "0.375rem",
      "height-200": "0.5rem",
      "height-300": "0.75rem",
      "height-400": "1rem",
      "height-500": "1.25rem",
      "height-600": "1.5rem",
      "height-700": "1.75rem",
      "height-800": "2rem",
      "height-900": "2.25rem",
      "height-1000": "2.5rem",
      "height-1200": "3rem",
      "height-1600": "4rem",
      "height-2000": "5rem",
      "height-2400": "6rem",
      "height-2800": "7rem",
      "height-3200": "8rem"
    },
    "motion": {
      "motion-duration-0": "0ms",
      "motion-duration-50": "50ms",
      "motion-duration-100": "100ms",
      "motion-duration-150": "150ms",
      "motion-duration-200": "200ms",
      "motion-duration-250": "250ms",
      "motion-duration-300": "300ms",
      "motion-duration-350": "350ms",
      "motion-duration-400": "400ms",
      "motion-duration-450": "450ms",
      "motion-duration-500": "500ms",
      "motion-duration-5000": "5000ms",
      "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
      "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
      "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
      "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
      "motion-linear": "cubic-bezier(0, 0, 1, 1)",
      "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
      "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
      "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
      "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
      "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
      "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
    },
    "shadow": {
      "shadow-0": "none",
      "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
      "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
      "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
      "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
      "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
      "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
      "shadow-bevel-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07), 0rem 0.0625rem 0rem 0rem rgba(208, 208, 208, 0.40) inset, 0.0625rem 0rem 0rem 0rem #CCC inset, -0.0625rem 0rem 0rem 0rem #CCC inset, 0rem -0.0625rem 0rem 0rem #999 inset",
      "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
      "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
      "shadow-button": "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
      "shadow-button-hover": "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
      "shadow-button-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
      "shadow-button-primary": "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
      "shadow-button-primary-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
      "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
      "shadow-button-primary-critical": "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
      "shadow-button-primary-critical-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
      "shadow-button-primary-critical-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
      "shadow-button-primary-success": "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
      "shadow-button-primary-success-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
      "shadow-button-primary-success-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
      "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
    },
    "space": {
      "space-0": "0rem",
      "space-025": "0.0625rem",
      "space-050": "0.125rem",
      "space-100": "0.25rem",
      "space-150": "0.375rem",
      "space-200": "0.5rem",
      "space-300": "0.75rem",
      "space-400": "1rem",
      "space-500": "1.25rem",
      "space-600": "1.5rem",
      "space-800": "2rem",
      "space-1000": "2.5rem",
      "space-1200": "3rem",
      "space-1600": "4rem",
      "space-2000": "5rem",
      "space-2400": "6rem",
      "space-2800": "7rem",
      "space-3200": "8rem",
      "space-button-group-gap": "0.5rem",
      "space-card-gap": "1rem",
      "space-card-padding": "1rem",
      "space-table-cell-padding": "0.375rem"
    },
    "text": {
      "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-3xl-font-size": "2.25rem",
      "text-heading-3xl-font-weight": "700",
      "text-heading-3xl-font-letter-spacing": "-0.03375rem",
      "text-heading-3xl-font-line-height": "3rem",
      "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-2xl-font-size": "1.875rem",
      "text-heading-2xl-font-weight": "700",
      "text-heading-2xl-font-letter-spacing": "-0.01875rem",
      "text-heading-2xl-font-line-height": "2.5rem",
      "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-xl-font-size": "1.5rem",
      "text-heading-xl-font-weight": "700",
      "text-heading-xl-font-letter-spacing": "-0.0125rem",
      "text-heading-xl-font-line-height": "2rem",
      "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-lg-font-size": "1.25rem",
      "text-heading-lg-font-weight": "650",
      "text-heading-lg-font-letter-spacing": "-0.0125rem",
      "text-heading-lg-font-line-height": "1.5rem",
      "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-md-font-size": "0.875rem",
      "text-heading-md-font-weight": "650",
      "text-heading-md-font-letter-spacing": "0rem",
      "text-heading-md-font-line-height": "1.25rem",
      "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-sm-font-size": "0.8125rem",
      "text-heading-sm-font-weight": "650",
      "text-heading-sm-font-letter-spacing": "0rem",
      "text-heading-sm-font-line-height": "1.25rem",
      "text-heading-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-heading-xs-font-size": "0.75rem",
      "text-heading-xs-font-weight": "650",
      "text-heading-xs-font-letter-spacing": "0rem",
      "text-heading-xs-font-line-height": "1rem",
      "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-lg-font-size": "0.875rem",
      "text-body-lg-font-weight": "450",
      "text-body-lg-font-letter-spacing": "0rem",
      "text-body-lg-font-line-height": "1.25rem",
      "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-md-font-size": "0.8125rem",
      "text-body-md-font-weight": "450",
      "text-body-md-font-letter-spacing": "0rem",
      "text-body-md-font-line-height": "1.25rem",
      "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-sm-font-size": "0.75rem",
      "text-body-sm-font-weight": "450",
      "text-body-sm-font-letter-spacing": "0rem",
      "text-body-sm-font-line-height": "1rem",
      "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
      "text-body-xs-font-size": "0.6875rem",
      "text-body-xs-font-weight": "450",
      "text-body-xs-font-letter-spacing": "0rem",
      "text-body-xs-font-line-height": "0.75rem"
    },
    "width": {
      "width-0": "0rem",
      "width-025": "0.0625rem",
      "width-050": "0.125rem",
      "width-100": "0.25rem",
      "width-150": "0.375rem",
      "width-200": "0.5rem",
      "width-300": "0.75rem",
      "width-400": "1rem",
      "width-500": "1.25rem",
      "width-600": "1.5rem",
      "width-700": "1.75rem",
      "width-800": "2rem",
      "width-900": "2.25rem",
      "width-1000": "2.5rem",
      "width-1200": "3rem",
      "width-1600": "4rem",
      "width-2000": "5rem",
      "width-2400": "6rem",
      "width-2800": "7rem",
      "width-3200": "8rem"
    },
    "zIndex": {
      "z-index-0": "auto",
      "z-index-1": "100",
      "z-index-2": "400",
      "z-index-3": "510",
      "z-index-4": "512",
      "z-index-5": "513",
      "z-index-6": "514",
      "z-index-7": "515",
      "z-index-8": "516",
      "z-index-9": "517",
      "z-index-10": "518",
      "z-index-11": "519",
      "z-index-12": "520"
    }
  }
};
var themeDefault = themes[themeNameDefault];
createIsTokenName(themes[themeNameDefault]);
const isServer = typeof window === "undefined" || typeof document === "undefined";
const Breakpoints = {
  // TODO: Update to smDown
  navigationBarCollapsed: "767.95px",
  // TODO: Update to lgDown
  stackedContent: "1039.95px"
};
const noWindowMatches = {
  media: "",
  addListener: noop,
  removeListener: noop,
  matches: false,
  onchange: noop,
  addEventListener: noop,
  removeEventListener: noop,
  dispatchEvent: (_) => true
};
function noop() {
}
function navigationBarCollapsed() {
  return typeof window === "undefined" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
}
function stackedContent() {
  return typeof window === "undefined" ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
}
const breakpointsQueryEntries = getBreakpointsQueryEntries(
  themeDefault.breakpoints
);
function getMatches(defaults, forceDefaults) {
  if (!isServer && !forceDefaults) {
    return Object.fromEntries(
      breakpointsQueryEntries.map(([directionAlias, query]) => [
        directionAlias,
        window.matchMedia(query).matches
      ])
    );
  }
  if (typeof defaults === "object" && defaults !== null) {
    return Object.fromEntries(
      breakpointsQueryEntries.map(([directionAlias]) => [
        directionAlias,
        defaults[directionAlias] ?? false
      ])
    );
  }
  return Object.fromEntries(
    breakpointsQueryEntries.map(([directionAlias]) => [
      directionAlias,
      defaults ?? false
    ])
  );
}
function useBreakpoints(options) {
  const breakpoints2 = ref(getMatches(options == null ? void 0 : options.defaults, true));
  const setBreakpoints = (value) => {
    breakpoints2.value = value;
  };
  const mediaQueryLists = breakpointsQueryEntries.map(
    ([_, query]) => window.matchMedia(query)
  );
  const handler = () => setBreakpoints(getMatches());
  mediaQueryLists.forEach((mql) => {
    if (mql.addListener) {
      mql.addListener(handler);
    } else {
      mql.addEventListener("change", handler);
    }
  });
  handler();
  onBeforeUnmount(() => {
    mediaQueryLists.forEach((mql) => {
      if (mql.removeListener) {
        mql.removeListener(handler);
      } else {
        mql.removeEventListener("change", handler);
      }
    });
  });
  return breakpoints2;
}
function getBreakpointsQueryEntries(breakpoints2) {
  const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints2));
  return mediaConditionEntries.map(
    ([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {
      const breakpointsAlias = breakpointsToken.split("-")[1];
      const directionAlias = `${breakpointsAlias}${capitalize$1(direction)}`;
      return [directionAlias, mediaCondition];
    })
  ).flat();
}
function capitalize$1(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function useHasSlot() {
  const hasSlot = (slot) => {
    if (!slot) {
      return false;
    }
    if (slot && slot()[0].children) {
      if (typeof slot()[0].children === "string") {
        return slot()[0].children !== "v-if";
      }
      if (Array.isArray(slot()[0].children)) {
        return slot()[0].children.length > 0;
      }
    }
    return true;
  };
  const hasContent = (node) => {
    return node.type.toString() !== "Symbol(v-cmt)";
  };
  const isSlotContainHtml = (slot) => {
    if (!slot) {
      return false;
    }
    if (slot().length > 1) {
      return true;
    }
    if (slot()[0] && slot()[0].type.toString() !== "Symbol(Text)" && slot()[0].type.toString() !== "Symbol(v-txt)" && slot()[0].type.toString() !== "Symbol()") {
      return true;
    }
    return false;
  };
  return {
    hasSlot,
    hasContent,
    isSlotContainHtml
  };
}
const _hoisted_1$1z = { key: 0 };
const _hoisted_2$_ = { key: 1 };
const _sfc_main$32 = /* @__PURE__ */ defineComponent({
  __name: "AccountConnection",
  props: {
    accountName: { default: "" },
    avatarUrl: {},
    connected: { type: Boolean, default: false },
    action: {}
  },
  setup(__props) {
    const breakpoints2 = useBreakpoints();
    const { hasSlot } = useHasSlot();
    const props = __props;
    const slots = useSlots();
    const initials = computed(() => {
      return props.accountName ? props.accountName.split(/\s+/).map((name) => name[0]).join("") : void 0;
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2n), null, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$x), null, {
            action: withCtx(() => [
              _ctx.action ? (openBlock(), createBlock(unref(_sfc_main$2s), {
                key: 0,
                action: _ctx.action,
                overrides: { variant: _ctx.connected ? void 0 : "primary" }
              }, null, 8, ["action", "overrides"])) : createCommentVNode("", true)
            ]),
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1r), { gap: "400" }, {
                default: withCtx(() => [
                  _ctx.connected ? (openBlock(), createElementBlock("span", _hoisted_1$1z, [
                    createVNode(unref(_sfc_main$2L), {
                      "accessibility-label": "",
                      name: _ctx.accountName,
                      initials: initials.value,
                      source: _ctx.avatarUrl
                    }, null, 8, ["name", "initials", "source"])
                  ])) : createCommentVNode("", true),
                  createVNode(unref(_sfc_main$2C), { gap: "100" }, {
                    default: withCtx(() => [
                      createVNode(unref(_sfc_main$f), {
                        as: "h2",
                        variant: "headingSm"
                      }, {
                        default: withCtx(() => [
                          unref(hasSlot)(unref(slots).title) ? renderSlot(_ctx.$slots, "title", { key: 0 }) : (openBlock(), createElementBlock("span", _hoisted_2$_, toDisplayString(_ctx.accountName), 1))
                        ]),
                        _: 3
                      }),
                      unref(hasSlot)(unref(slots).details) ? (openBlock(), createBlock(unref(_sfc_main$f), {
                        key: 0,
                        as: "span",
                        tone: "subdued"
                      }, {
                        default: withCtx(() => [
                          renderSlot(_ctx.$slots, "details")
                        ]),
                        _: 3
                      })) : createCommentVNode("", true)
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              })
            ]),
            _: 3
          }),
          unref(hasSlot)(unref(slots)["term-of-service"]) ? (openBlock(), createBlock(unref(_sfc_main$2B), {
            key: 0,
            "padding-block-start": unref(breakpoints2).mdUp ? "400" : "500"
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "term-of-service")
            ]),
            _: 3
          }, 8, ["padding-block-start"])) : createCommentVNode("", true)
        ]),
        _: 3
      });
    };
  }
});
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function");
}
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}
function variationName(name, value) {
  return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
}
function sanitizeCustomProperties(styles2) {
  const nonNullValues = Object.entries(styles2).filter(
    ([_, value]) => value != null
  );
  return nonNullValues.length ? Object.fromEntries(nonNullValues) : void 0;
}
function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp) {
  if (!responsiveProp)
    return {};
  let result;
  if (!isObject(responsiveProp)) {
    result = {
      [breakpointsAliases[0]]: `var(--p-${tokenSubgroup}-${responsiveProp})`
    };
  } else {
    result = Object.fromEntries(
      Object.entries(responsiveProp).map(([breakpointAlias, aliasOrScale]) => [
        breakpointAlias,
        `var(--p-${tokenSubgroup}-${aliasOrScale})`
      ])
    );
  }
  return Object.fromEntries(
    Object.entries(result).map(([breakpointAlias, value]) => [
      `--pc-${componentName}-${componentProp}-${breakpointAlias}`,
      value
    ])
  );
}
function getResponsiveValue(componentName, componentProp, responsiveProp) {
  if (!responsiveProp)
    return {};
  if (!isObject(responsiveProp)) {
    return {
      [`--pc-${componentName}-${componentProp}-${breakpointsAliases[0]}`]: responsiveProp
    };
  }
  return Object.fromEntries(
    Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [
      `--pc-${componentName}-${componentProp}-${breakpointAlias}`,
      responsiveValue
    ])
  );
}
function isElementInViewport(element) {
  const { top, left, bottom, right } = element.getBoundingClientRect();
  return top >= 0 && right <= window.innerWidth && bottom <= window.innerHeight && left >= 0;
}
const FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]';
const KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])';
const MENUITEM_FOCUSABLE_SELECTORS = 'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])';
const handleMouseUpByBlurring = (event) => {
  const target = event.target;
  target.blur();
};
function nextFocusableNode(node, filter) {
  const allFocusableElements = [
    ...document.querySelectorAll(FOCUSABLE_SELECTOR)
  ];
  const sliceLocation = allFocusableElements.indexOf(node) + 1;
  const focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);
  for (const focusableElement of focusableElementsAfterNode) {
    if (isElementInViewport(focusableElement) && // (!filter || (filter && filter(focusableElement)))
    (!filter || filter && Boolean(filter(focusableElement)))) {
      return focusableElement;
    }
  }
  return null;
}
function findFirstFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, FOCUSABLE_SELECTOR)) {
    return element;
  }
  return element.querySelector(FOCUSABLE_SELECTOR);
}
function findFirstFocusableNodeIncludingDisabled(element) {
  const focusableSelector = `a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]`;
  if (matches(element, focusableSelector)) {
    return element;
  }
  return element.querySelector(focusableSelector);
}
function focusFirstFocusableNode(element, onlyDescendants = true) {
  var _a;
  (_a = findFirstFocusableNode(element, onlyDescendants)) == null ? void 0 : _a.focus();
}
function focusNextFocusableNode(node, filter) {
  const nextFocusable = nextFocusableNode(node, filter);
  if (nextFocusable && nextFocusable instanceof HTMLElement) {
    nextFocusable.focus();
    return true;
  }
  return false;
}
function findFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
    return element;
  }
  return element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
}
function focusFirstKeyboardFocusableNode(element, onlyDescendants = true) {
  const firstFocusable = findFirstKeyboardFocusableNode(
    element,
    onlyDescendants
  );
  if (firstFocusable) {
    firstFocusable.focus();
    return true;
  }
  return false;
}
function findLastKeyboardFocusableNode(element, onlyDescendants = true) {
  if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
    return element;
  }
  const allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
  return allFocusable[allFocusable.length - 1];
}
function focusLastKeyboardFocusableNode(element, onlyDescendants = true) {
  const lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);
  if (lastFocusable) {
    lastFocusable.focus();
    return true;
  }
  return false;
}
function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
  const allFocusableChildren = getMenuFocusableDescendants(parentElement);
  const currentItemIdx = getCurrentFocusedElementIndex(
    allFocusableChildren,
    currentFocusedElement
  );
  if (currentItemIdx === -1) {
    allFocusableChildren[0].focus();
  } else {
    allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
  }
}
function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
  const allFocusableChildren = getMenuFocusableDescendants(parentElement);
  const currentItemIdx = getCurrentFocusedElementIndex(
    allFocusableChildren,
    currentFocusedElement
  );
  if (currentItemIdx === -1) {
    allFocusableChildren[0].focus();
  } else {
    allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
  }
}
function getMenuFocusableDescendants(element) {
  return element.querySelectorAll(
    MENUITEM_FOCUSABLE_SELECTORS
  );
}
function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
  let currentItemIdx = 0;
  for (const focusableChild of allFocusableChildren) {
    if (focusableChild === currentFocusedElement) {
      break;
    }
    currentItemIdx++;
  }
  return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
}
function matches(node, selector) {
  if (node.matches) {
    return node.matches(selector);
  }
  const matches2 = (node.ownerDocument || document).querySelectorAll(selector);
  let i = matches2.length;
  while (--i >= 0 && matches2.item(i) !== node)
    return i > -1;
}
function useTheme() {
  const theme = inject("theme");
  if (!theme) {
    throw new Error(
      "No theme was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/AppProvider for implementation instructions."
    );
  }
  return theme;
}
const _sfc_main$31 = /* @__PURE__ */ defineComponent({
  __name: "TruncateText",
  setup(__props) {
    const theme = useTheme();
    const textRef = ref(null);
    const isOverflowing = ref(false);
    onMounted(
      () => {
        if (textRef.value) {
          isOverflowing.value = textRef.value.scrollWidth > textRef.value.offsetWidth;
        }
      }
    );
    return (_ctx, _cache) => {
      return isOverflowing.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
        key: 0,
        preferredPosition: "above",
        dismissOnMouseOut: "",
        "z-index-override": Number(unref(theme).zIndex["z-index-11"]),
        "hover-delay": 1e3
      }, {
        content: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$f), {
            as: "span",
            truncate: ""
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })
        ]),
        _: 3
      }, 8, ["z-index-override"])) : (openBlock(), createBlock(unref(_sfc_main$f), {
        key: 1,
        as: "span",
        truncate: ""
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2B), {
            width: "100%",
            ref_key: "textRef",
            ref: textRef
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 512)
        ]),
        _: 3
      }));
    };
  }
});
const Item$7 = "Polaris-ActionList__Item";
const active$1 = "Polaris-ActionList--active";
const destructive$1 = "Polaris-ActionList--destructive";
const disabled$e = "Polaris-ActionList--disabled";
const Prefix$5 = "Polaris-ActionList__Prefix";
const Suffix$4 = "Polaris-ActionList__Suffix";
const indented = "Polaris-ActionList--indented";
const menu = "Polaris-ActionList--menu";
const Text$4 = "Polaris-ActionList__Text";
const styles$1F = {
  Item: Item$7,
  "default": "Polaris-ActionList--default",
  active: active$1,
  destructive: destructive$1,
  disabled: disabled$e,
  Prefix: Prefix$5,
  Suffix: Suffix$4,
  indented,
  menu,
  Text: Text$4
};
const _hoisted_1$1y = ["className"];
const _hoisted_2$Z = ["className"];
const _hoisted_3$O = { key: 0 };
const _hoisted_4$m = { key: 1 };
const _hoisted_5$4 = ["className"];
const _hoisted_6$3 = ["id", "disabled", "role", "aria-label"];
const _hoisted_7$1 = ["className"];
const _hoisted_8$1 = ["className"];
const _hoisted_9$1 = { key: 0 };
const _hoisted_10 = { key: 1 };
const _hoisted_11 = ["className"];
const _sfc_main$30 = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    accessibilityLabel: {},
    badge: {},
    prefix: { type: [String, Number, Boolean, null] },
    suffix: { type: [String, Number, Boolean, null] },
    helpText: {},
    icon: {},
    image: {},
    ellipsis: { type: Boolean },
    truncate: { type: Boolean },
    active: { type: Boolean },
    variant: { default: "default" },
    role: {},
    disabled: { type: Boolean },
    id: {},
    content: {},
    url: {},
    external: { type: Boolean },
    target: {},
    onAction: {},
    onMouseEnter: {},
    onTouchStart: {},
    destructive: { type: Boolean }
  },
  emits: ["action"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const className = computed(() => classNames(
      styles$1F.Item,
      props.disabled && styles$1F.disabled,
      props.destructive && styles$1F.destructive,
      props.active && styles$1F.active,
      props.variant === "default" && styles$1F.default,
      props.variant === "indented" && styles$1F.indented,
      props.variant === "menu" && styles$1F.menu
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        _ctx.active ? (openBlock(), createBlock(unref(_sfc_main$C), { key: 0 })) : createCommentVNode("", true),
        _ctx.url ? (openBlock(), createBlock(unref(_sfc_main$2v), {
          key: 1,
          id: _ctx.id,
          url: _ctx.disabled ? null : _ctx.url,
          class: normalizeClass(className.value),
          external: _ctx.external,
          role: _ctx.role,
          "aria-label": _ctx.accessibilityLabel,
          onClick: _cache[0] || (_cache[0] = ($event) => _ctx.disabled ? null : emits("action"))
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$2B), { width: "100%" }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$1r), {
                  "block-align": "center",
                  gap: "150",
                  wrap: false
                }, {
                  default: withCtx(() => [
                    _ctx.prefix ? (openBlock(), createElementBlock("span", {
                      key: 0,
                      className: unref(styles$1F).Prefix
                    }, [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefix)))
                    ], 8, _hoisted_1$1y)) : createCommentVNode("", true),
                    _ctx.icon ? (openBlock(), createElementBlock("span", {
                      key: 1,
                      class: normalizeClass(unref(styles$1F).Prefix)
                    }, [
                      createVNode(unref(_sfc_main$1K), { source: _ctx.icon }, null, 8, ["source"])
                    ], 2)) : createCommentVNode("", true),
                    _ctx.image ? (openBlock(), createElementBlock("span", {
                      key: 2,
                      role: "presentation",
                      class: normalizeClass(unref(styles$1F).Prefix),
                      style: normalizeStyle({ backgroundImage: `url(${_ctx.image})` })
                    }, null, 6)) : createCommentVNode("", true),
                    createBaseVNode("span", {
                      className: unref(styles$1F).Text
                    }, [
                      _ctx.helpText ? (openBlock(), createElementBlock("div", _hoisted_3$O, [
                        createVNode(unref(_sfc_main$2B), null, {
                          default: withCtx(() => [
                            _ctx.truncate && _ctx.content ? (openBlock(), createBlock(_sfc_main$31, { key: 0 }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(_ctx.content), 1)
                              ]),
                              _: 1
                            })) : _ctx.ellipsis ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                              createTextVNode(toDisplayString(`${_ctx.content}...`), 1)
                            ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                              createTextVNode(toDisplayString(_ctx.content), 1)
                            ], 64))
                          ]),
                          _: 1
                        }),
                        createVNode(unref(_sfc_main$f), {
                          as: "span",
                          variant: "bodySm",
                          tone: _ctx.active || _ctx.disabled ? void 0 : "subdued"
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(_ctx.helpText), 1)
                          ]),
                          _: 1
                        }, 8, ["tone"])
                      ])) : (openBlock(), createElementBlock("div", _hoisted_4$m, [
                        _ctx.truncate && _ctx.content ? (openBlock(), createBlock(_sfc_main$31, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(_ctx.content), 1)
                          ]),
                          _: 1
                        })) : _ctx.ellipsis ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                          createTextVNode(toDisplayString(`${_ctx.content}...`), 1)
                        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                          createTextVNode(toDisplayString(_ctx.content), 1)
                        ], 64))
                      ]))
                    ], 8, _hoisted_2$Z),
                    _ctx.badge ? (openBlock(), createElementBlock("span", {
                      key: 3,
                      class: normalizeClass(unref(styles$1F).Suffix)
                    }, [
                      createVNode(unref(_sfc_main$2J), {
                        tone: _ctx.badge.tone
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(_ctx.badge.content), 1)
                        ]),
                        _: 1
                      }, 8, ["tone"])
                    ], 2)) : createCommentVNode("", true),
                    _ctx.suffix ? (openBlock(), createBlock(unref(_sfc_main$2B), { key: 4 }, {
                      default: withCtx(() => [
                        createBaseVNode("span", {
                          className: unref(styles$1F).Suffix
                        }, [
                          (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffix)))
                        ], 8, _hoisted_5$4)
                      ]),
                      _: 1
                    })) : createCommentVNode("", true)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["id", "url", "class", "external", "role", "aria-label"])) : (openBlock(), createElementBlock("button", {
          key: 2,
          id: _ctx.id,
          type: "button",
          class: normalizeClass(className.value),
          disabled: _ctx.disabled,
          role: _ctx.role,
          "aria-label": _ctx.accessibilityLabel,
          onClick: _cache[1] || (_cache[1] = ($event) => emits("action")),
          onMouseup: _cache[2] || (_cache[2] = //@ts-ignore
          (...args) => unref(handleMouseUpByBlurring) && unref(handleMouseUpByBlurring)(...args)),
          onMouseenter: _cache[3] || (_cache[3] = //@ts-ignore
          (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args))
        }, [
          createVNode(unref(_sfc_main$2B), { width: "100%" }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1r), {
                "block-align": "center",
                gap: "150",
                wrap: !_ctx.truncate
              }, {
                default: withCtx(() => [
                  _ctx.prefix ? (openBlock(), createElementBlock("span", {
                    key: 0,
                    className: unref(styles$1F).Prefix
                  }, [
                    (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefix)))
                  ], 8, _hoisted_7$1)) : createCommentVNode("", true),
                  _ctx.icon ? (openBlock(), createElementBlock("span", {
                    key: 1,
                    class: normalizeClass(unref(styles$1F).Prefix)
                  }, [
                    createVNode(unref(_sfc_main$1K), { source: _ctx.icon }, null, 8, ["source"])
                  ], 2)) : createCommentVNode("", true),
                  _ctx.image ? (openBlock(), createElementBlock("span", {
                    key: 2,
                    role: "presentation",
                    class: normalizeClass(unref(styles$1F).Prefix),
                    style: normalizeStyle({ backgroundImage: `url(${_ctx.image})` })
                  }, null, 6)) : createCommentVNode("", true),
                  createBaseVNode("span", {
                    className: unref(styles$1F).Text
                  }, [
                    _ctx.helpText ? (openBlock(), createElementBlock("div", _hoisted_9$1, [
                      createVNode(unref(_sfc_main$2B), null, {
                        default: withCtx(() => [
                          _ctx.truncate && _ctx.content ? (openBlock(), createBlock(_sfc_main$31, { key: 0 }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(_ctx.content), 1)
                            ]),
                            _: 1
                          })) : _ctx.ellipsis ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createTextVNode(toDisplayString(`${_ctx.content}...`), 1)
                          ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                            createTextVNode(toDisplayString(_ctx.content), 1)
                          ], 64))
                        ]),
                        _: 1
                      }),
                      createVNode(unref(_sfc_main$f), {
                        as: "span",
                        variant: "bodySm",
                        tone: _ctx.active || _ctx.disabled ? void 0 : "subdued"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(_ctx.helpText), 1)
                        ]),
                        _: 1
                      }, 8, ["tone"])
                    ])) : (openBlock(), createElementBlock("div", _hoisted_10, [
                      _ctx.truncate && _ctx.content ? (openBlock(), createBlock(_sfc_main$31, { key: 0 }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(_ctx.content), 1)
                        ]),
                        _: 1
                      })) : _ctx.ellipsis ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        createTextVNode(toDisplayString(`${_ctx.content}...`), 1)
                      ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                        createTextVNode(toDisplayString(_ctx.content), 1)
                      ], 64))
                    ]))
                  ], 8, _hoisted_8$1),
                  _ctx.badge ? (openBlock(), createElementBlock("span", {
                    key: 3,
                    class: normalizeClass(unref(styles$1F).Suffix)
                  }, [
                    createVNode(unref(_sfc_main$2J), {
                      tone: _ctx.badge.tone
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(_ctx.badge.content), 1)
                      ]),
                      _: 1
                    }, 8, ["tone"])
                  ], 2)) : createCommentVNode("", true),
                  _ctx.suffix ? (openBlock(), createBlock(unref(_sfc_main$2B), { key: 4 }, {
                    default: withCtx(() => [
                      createBaseVNode("span", {
                        className: unref(styles$1F).Suffix
                      }, [
                        (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffix)))
                      ], 8, _hoisted_11)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ]),
                _: 1
              }, 8, ["wrap"])
            ]),
            _: 1
          })
        ], 42, _hoisted_6$3))
      ], 64);
    };
  }
});
const _sfc_main$2$ = /* @__PURE__ */ defineComponent({
  __name: "SectionMarkUp",
  props: {
    section: {},
    hasMultipleSections: { type: Boolean },
    actionRole: {},
    onActionAnyItem: {},
    isFirst: { type: Boolean }
  },
  emits: ["action-any-item"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const handleAction = (itemOnAction) => {
      if (itemOnAction) {
        itemOnAction();
      }
      emits("action-any-item");
    };
    const sectionRole = computed(() => {
      if (props.actionRole) {
        if (props.actionRole === "option") {
          return "presentation";
        }
        if (props.actionRole === "menuitem") {
          return !props.hasMultipleSections ? "menu" : "presentation";
        }
        return void 0;
      }
      return void 0;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        _ctx.section.title ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          _ctx.section.title ? (openBlock(), createBlock(unref(_sfc_main$2B), {
            key: 0,
            paddingBlockStart: "300",
            paddingBlockEnd: "100",
            paddingInlineStart: "300",
            paddingInlineEnd: "300"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$f), {
                as: "p",
                variant: "headingSm"
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(_ctx.section.title), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], 64)) : createCommentVNode("", true),
        createVNode(unref(_sfc_main$2B), {
          as: "div",
          padding: "150",
          "padding-block-stack": _ctx.hasMultipleSections ? "0" : void 0,
          tabIndex: !_ctx.hasMultipleSections ? -1 : void 0
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$2C), {
              gap: "050",
              as: "ul",
              role: sectionRole.value || void 0
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.section.items, ({ content, helpText, onAction, ...item }, index) => {
                  return openBlock(), createBlock(unref(_sfc_main$2B), {
                    as: "li",
                    key: `${content}-${index}`,
                    role: _ctx.actionRole === "menuitem" ? "presentation" : void 0
                  }, {
                    default: withCtx(() => [
                      createVNode(unref(_sfc_main$1r), { wrap: false }, {
                        default: withCtx(() => [
                          createVNode(_sfc_main$30, mergeProps(item, {
                            content,
                            "help-text": helpText,
                            role: _ctx.actionRole,
                            onAction: ($event) => handleAction(onAction)
                          }), null, 16, ["content", "help-text", "role", "onAction"])
                        ]),
                        _: 2
                      }, 1024)
                    ]),
                    _: 2
                  }, 1032, ["role"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["role"])
          ]),
          _: 1
        }, 8, ["padding-block-stack", "tabIndex"])
      ], 64);
    };
  }
});
const _sfc_main$2_ = /* @__PURE__ */ defineComponent({
  __name: "Section",
  props: {
    section: {},
    hasMultipleSections: { type: Boolean },
    actionRole: {},
    isFirst: { type: Boolean }
  },
  emits: ["action-any-item"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const SectionMarkUpProps = computed(() => {
      return {
        section: props.section,
        hasMultipleSections: props.hasMultipleSections,
        actionRole: props.actionRole,
        isFirst: props.isFirst
      };
    });
    return (_ctx, _cache) => {
      return _ctx.hasMultipleSections ? (openBlock(), createBlock(unref(_sfc_main$2B), {
        key: 0,
        as: "li",
        role: "presentation",
        borderColor: "border-secondary",
        "border-block-start-width": !_ctx.isFirst ? "025" : void 0,
        "padding-block-stack": !_ctx.section.title ? "150" : void 0
      }, {
        default: withCtx(() => [
          createVNode(_sfc_main$2$, mergeProps(SectionMarkUpProps.value, {
            onActionAnyItem: _cache[0] || (_cache[0] = ($event) => emits("action-any-item"))
          }), null, 16)
        ]),
        _: 1
      }, 8, ["border-block-start-width", "padding-block-stack"])) : (openBlock(), createBlock(_sfc_main$2$, mergeProps({ key: 1 }, SectionMarkUpProps.value, {
        onActionAnyItem: _cache[1] || (_cache[1] = ($event) => emits("action-any-item"))
      }), null, 16));
    };
  }
});
const _hoisted_1$1x = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$Y = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M12.323 13.383a5.5 5.5 0 1 1 1.06-1.06l2.897 2.897a.75.75 0 1 1-1.06 1.06zM13 9a4 4 0 1 1-8 0 4 4 0 0 1 8 0"
}, null, -1);
const _hoisted_3$N = [
  _hoisted_2$Y
];
function render$B(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1x, [..._hoisted_3$N]);
}
const SearchIcon = { render: render$B };
function useFilterActions() {
  const context = inject("filter-actions", { filterActions: false });
  return context;
}
function useI18n() {
  const context = inject("i18n");
  return context;
}
var Key = /* @__PURE__ */ ((Key10) => {
  Key10[Key10["Backspace"] = 8] = "Backspace";
  Key10[Key10["Tab"] = 9] = "Tab";
  Key10[Key10["Enter"] = 13] = "Enter";
  Key10[Key10["Shift"] = 16] = "Shift";
  Key10[Key10["Ctrl"] = 17] = "Ctrl";
  Key10[Key10["Alt"] = 18] = "Alt";
  Key10[Key10["Pause"] = 19] = "Pause";
  Key10[Key10["CapsLock"] = 20] = "CapsLock";
  Key10[Key10["Escape"] = 27] = "Escape";
  Key10[Key10["Space"] = 32] = "Space";
  Key10[Key10["PageUp"] = 33] = "PageUp";
  Key10[Key10["PageDown"] = 34] = "PageDown";
  Key10[Key10["End"] = 35] = "End";
  Key10[Key10["Home"] = 36] = "Home";
  Key10[Key10["LeftArrow"] = 37] = "LeftArrow";
  Key10[Key10["UpArrow"] = 38] = "UpArrow";
  Key10[Key10["RightArrow"] = 39] = "RightArrow";
  Key10[Key10["DownArrow"] = 40] = "DownArrow";
  Key10[Key10["Insert"] = 45] = "Insert";
  Key10[Key10["Delete"] = 46] = "Delete";
  Key10[Key10["Key0"] = 48] = "Key0";
  Key10[Key10["Key1"] = 49] = "Key1";
  Key10[Key10["Key2"] = 50] = "Key2";
  Key10[Key10["Key3"] = 51] = "Key3";
  Key10[Key10["Key4"] = 52] = "Key4";
  Key10[Key10["Key5"] = 53] = "Key5";
  Key10[Key10["Key6"] = 54] = "Key6";
  Key10[Key10["Key7"] = 55] = "Key7";
  Key10[Key10["Key8"] = 56] = "Key8";
  Key10[Key10["Key9"] = 57] = "Key9";
  Key10[Key10["KeyA"] = 65] = "KeyA";
  Key10[Key10["KeyB"] = 66] = "KeyB";
  Key10[Key10["KeyC"] = 67] = "KeyC";
  Key10[Key10["KeyD"] = 68] = "KeyD";
  Key10[Key10["KeyE"] = 69] = "KeyE";
  Key10[Key10["KeyF"] = 70] = "KeyF";
  Key10[Key10["KeyG"] = 71] = "KeyG";
  Key10[Key10["KeyH"] = 72] = "KeyH";
  Key10[Key10["KeyI"] = 73] = "KeyI";
  Key10[Key10["KeyJ"] = 74] = "KeyJ";
  Key10[Key10["KeyK"] = 75] = "KeyK";
  Key10[Key10["KeyL"] = 76] = "KeyL";
  Key10[Key10["KeyM"] = 77] = "KeyM";
  Key10[Key10["KeyN"] = 78] = "KeyN";
  Key10[Key10["KeyO"] = 79] = "KeyO";
  Key10[Key10["KeyP"] = 80] = "KeyP";
  Key10[Key10["KeyQ"] = 81] = "KeyQ";
  Key10[Key10["KeyR"] = 82] = "KeyR";
  Key10[Key10["KeyS"] = 83] = "KeyS";
  Key10[Key10["KeyT"] = 84] = "KeyT";
  Key10[Key10["KeyU"] = 85] = "KeyU";
  Key10[Key10["KeyV"] = 86] = "KeyV";
  Key10[Key10["KeyW"] = 87] = "KeyW";
  Key10[Key10["KeyX"] = 88] = "KeyX";
  Key10[Key10["KeyY"] = 89] = "KeyY";
  Key10[Key10["KeyZ"] = 90] = "KeyZ";
  Key10[Key10["LeftMeta"] = 91] = "LeftMeta";
  Key10[Key10["RightMeta"] = 92] = "RightMeta";
  Key10[Key10["Select"] = 93] = "Select";
  Key10[Key10["Numpad0"] = 96] = "Numpad0";
  Key10[Key10["Numpad1"] = 97] = "Numpad1";
  Key10[Key10["Numpad2"] = 98] = "Numpad2";
  Key10[Key10["Numpad3"] = 99] = "Numpad3";
  Key10[Key10["Numpad4"] = 100] = "Numpad4";
  Key10[Key10["Numpad5"] = 101] = "Numpad5";
  Key10[Key10["Numpad6"] = 102] = "Numpad6";
  Key10[Key10["Numpad7"] = 103] = "Numpad7";
  Key10[Key10["Numpad8"] = 104] = "Numpad8";
  Key10[Key10["Numpad9"] = 105] = "Numpad9";
  Key10[Key10["Multiply"] = 106] = "Multiply";
  Key10[Key10["Add"] = 107] = "Add";
  Key10[Key10["Subtract"] = 109] = "Subtract";
  Key10[Key10["Decimal"] = 110] = "Decimal";
  Key10[Key10["Divide"] = 111] = "Divide";
  Key10[Key10["F1"] = 112] = "F1";
  Key10[Key10["F2"] = 113] = "F2";
  Key10[Key10["F3"] = 114] = "F3";
  Key10[Key10["F4"] = 115] = "F4";
  Key10[Key10["F5"] = 116] = "F5";
  Key10[Key10["F6"] = 117] = "F6";
  Key10[Key10["F7"] = 118] = "F7";
  Key10[Key10["F8"] = 119] = "F8";
  Key10[Key10["F9"] = 120] = "F9";
  Key10[Key10["F10"] = 121] = "F10";
  Key10[Key10["F11"] = 122] = "F11";
  Key10[Key10["F12"] = 123] = "F12";
  Key10[Key10["NumLock"] = 144] = "NumLock";
  Key10[Key10["ScrollLock"] = 145] = "ScrollLock";
  Key10[Key10["Semicolon"] = 186] = "Semicolon";
  Key10[Key10["Equals"] = 187] = "Equals";
  Key10[Key10["Comma"] = 188] = "Comma";
  Key10[Key10["Dash"] = 189] = "Dash";
  Key10[Key10["Period"] = 190] = "Period";
  Key10[Key10["ForwardSlash"] = 191] = "ForwardSlash";
  Key10[Key10["GraveAccent"] = 192] = "GraveAccent";
  Key10[Key10["OpenBracket"] = 219] = "OpenBracket";
  Key10[Key10["BackSlash"] = 220] = "BackSlash";
  Key10[Key10["CloseBracket"] = 221] = "CloseBracket";
  Key10[Key10["SingleQuote"] = 222] = "SingleQuote";
  return Key10;
})(Key || {});
const FILTER_ACTIONS_THRESHOLD = 8;
const _sfc_main$2Z = /* @__PURE__ */ defineComponent({
  __name: "ActionList",
  props: {
    items: {},
    sections: {},
    actionRole: {},
    allowFiltering: { type: Boolean }
  },
  emits: ["action-any-item"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const filterActions = useFilterActions();
    const i18n = useI18n();
    const searchText = ref("");
    const actionListRef = ref(null);
    const finalSections = computed(() => {
      if (props.items) {
        return [{ items: props.items }, ...props.sections || []];
      }
      if (props.sections) {
        return props.sections;
      }
      return [];
    });
    const isFilterable = computed(() => {
      var _a;
      return (_a = finalSections.value) == null ? void 0 : _a.some((section) => section.items.some((item) => typeof item.content === "string"));
    });
    const HasMultipleSections = computed(() => {
      var _a;
      return ((_a = finalSections.value) == null ? void 0 : _a.length) > 1 || false;
    });
    const elementRole = computed(() => HasMultipleSections.value && props.actionRole === "menuitem" ? "menu" : void 0);
    const elementTabIndex = computed(() => HasMultipleSections.value && props.actionRole === "menuitem" ? -1 : void 0);
    const filteredSections = computed(() => {
      var _a;
      return (_a = finalSections.value) == null ? void 0 : _a.map((section) => ({
        ...section,
        items: section.items.filter(
          ({ content }) => typeof content === "string" ? content == null ? void 0 : content.toLowerCase().includes(searchText.value.toLowerCase()) : content
        )
      }));
    });
    const totalActions = computed(
      () => {
        var _a;
        return ((_a = finalSections.value) == null ? void 0 : _a.reduce(
          (acc, section) => acc + section.items.length,
          0
        )) || 0;
      }
    );
    const totalFilteredActions = computed(() => {
      var _a;
      const totalSectionItems = ((_a = filteredSections.value) == null ? void 0 : _a.reduce(
        (acc, section) => acc + section.items.length,
        0
      )) || 0;
      return totalSectionItems;
    });
    const hasManyActions = computed(() => totalActions.value >= FILTER_ACTIONS_THRESHOLD);
    const setSearchText = (value) => {
      searchText.value = value;
    };
    const handleFocusPreviousItem = (evt) => {
      evt.preventDefault();
      if (actionListRef.value && evt.target) {
        if (actionListRef.value.contains(evt.target)) {
          wrapFocusPreviousFocusableMenuItem(
            actionListRef.value,
            evt.target
          );
        }
      }
    };
    const handleFocusNextItem = (evt) => {
      evt.preventDefault();
      if (actionListRef.value && evt.target) {
        if (actionListRef.value.contains(evt.target)) {
          wrapFocusNextFocusableMenuItem(
            actionListRef.value,
            evt.target
          );
        }
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        (_ctx.allowFiltering || unref(filterActions)) && hasManyActions.value && isFilterable.value ? (openBlock(), createBlock(unref(_sfc_main$2B), {
          key: 0,
          padding: "200",
          "padding-block-end": totalFilteredActions.value > 0 ? "0" : "200"
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$9), {
              "clear-button": "",
              "label-hidden": "",
              label: unref(i18n).translate("Polaris.ActionList.SearchField.placeholder"),
              placeholder: unref(i18n).translate("Polaris.ActionList.SearchField.placeholder"),
              autoComplete: "off",
              value: searchText.value,
              onChange: _cache[0] || (_cache[0] = (value) => setSearchText(value)),
              onClearButtonClick: _cache[1] || (_cache[1] = () => setSearchText(""))
            }, {
              prefix: withCtx(() => [
                createVNode(unref(_sfc_main$1K), { source: unref(SearchIcon) }, null, 8, ["source"])
              ]),
              _: 1
            }, 8, ["label", "placeholder", "value"])
          ]),
          _: 1
        }, 8, ["padding-block-end"])) : createCommentVNode("", true),
        createVNode(unref(_sfc_main$2B), {
          as: HasMultipleSections.value ? "ul" : "div",
          ref_key: "actionListRef",
          ref: actionListRef,
          role: elementRole.value,
          tabindex: elementTabIndex.value
        }, {
          default: withCtx(() => [
            _ctx.actionRole === "menuitem" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createVNode(unref(_sfc_main$1p), {
                keyEvent: "keydown",
                keyCode: unref(Key).DownArrow,
                handler: handleFocusNextItem
              }, null, 8, ["keyCode"]),
              createVNode(unref(_sfc_main$1p), {
                keyEvent: "keydown",
                keyCode: unref(Key).UpArrow,
                handler: handleFocusPreviousItem
              }, null, 8, ["keyCode"])
            ], 64)) : createCommentVNode("", true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(finalSections.value, (section, index) => {
              return openBlock(), createElementBlock(Fragment, null, [
                section.items && section.items.length > 0 ? (openBlock(), createBlock(unref(_sfc_main$2_), {
                  key: section.title || index,
                  section,
                  hasMultipleSections: HasMultipleSections.value,
                  actionRole: _ctx.actionRole,
                  onActionAnyItem: _cache[2] || (_cache[2] = ($event) => emits("action-any-item"))
                }, null, 8, ["section", "hasMultipleSections", "actionRole"])) : createCommentVNode("", true)
              ], 64);
            }), 256))
          ]),
          _: 1
        }, 8, ["as", "role", "tabindex"])
      ], 64);
    };
  }
});
const OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
function get(obj, keypath, defaultValue) {
  if (obj == null)
    return void 0;
  const keys = Array.isArray(keypath) ? keypath : getKeypath(keypath);
  let acc = obj;
  for (let i = 0; i < keys.length; i++) {
    const val = acc[keys[i]];
    if (val === void 0)
      return defaultValue;
    acc = val;
  }
  return acc;
}
function getKeypath(str) {
  const path = [];
  let result;
  while (result = OBJECT_NOTATION_MATCHER.exec(str)) {
    const [, first, second] = result;
    path.push(first || second);
  }
  return path;
}
function merge(...objs) {
  let final = {};
  for (const obj of objs) {
    final = mergeRecursively(final, obj);
  }
  return final;
}
function mergeRecursively(inputObjA, objB) {
  const objA = Array.isArray(inputObjA) ? [...inputObjA] : { ...inputObjA };
  for (const key in objB) {
    if (!Object.prototype.hasOwnProperty.call(objB, key)) {
      continue;
    } else if (isMergeableValue(objB[key]) && isMergeableValue(objA[key])) {
      objA[key] = mergeRecursively(objA[key], objB[key]);
    } else {
      objA[key] = objB[key];
    }
  }
  return objA;
}
function isMergeableValue(value) {
  return value !== null && typeof value === "object";
}
const REPLACE_REGEX = /{([^}]*)}/g;
class I18n {
  /**
   * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
   */
  constructor(translation) {
    this.translation = {};
    this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;
  }
  translate(id, replacements) {
    const text2 = get(this.translation, id, "");
    if (!text2) {
      return "";
    }
    if (replacements) {
      return text2.replace(REPLACE_REGEX, (match) => {
        const replacement = match.substring(1, match.length - 1);
        if (replacements[replacement] === void 0) {
          const replacementData = JSON.stringify(replacements);
          throw new Error(
            `Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`
          );
        }
        return replacements[replacement];
      });
    }
    return text2;
  }
  translationKeyExists(path) {
    return Boolean(get(this.translation, path));
  }
}
const SCROLL_LOCKING_ATTRIBUTE = "data-lock-scrolling";
const SCROLL_LOCKING_HIDDEN_ATTRIBUTE = "data-lock-scrolling-hidden";
const SCROLL_LOCKING_WRAPPER_ATTRIBUTE = "data-lock-scrolling-wrapper";
let scrollPosition = 0;
function isScrollBarVisible() {
  const { body } = document;
  return body.scrollHeight > body.clientHeight;
}
class ScrollLockManager {
  constructor() {
    this.scrollLocks = 0;
    this.locked = false;
  }
  registerScrollLock() {
    this.scrollLocks += 1;
    this.handleScrollLocking();
  }
  unregisterScrollLock() {
    this.scrollLocks -= 1;
    this.handleScrollLocking();
  }
  handleScrollLocking() {
    if (isServer)
      return;
    const { scrollLocks } = this;
    const { body } = document;
    const wrapper = body.firstElementChild;
    if (scrollLocks === 0) {
      body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE);
      body.removeAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE);
      if (wrapper) {
        wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE);
      }
      window.scroll(0, scrollPosition);
      this.locked = false;
    } else if (scrollLocks > 0 && !this.locked) {
      scrollPosition = window.pageYOffset;
      body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, "");
      if (!isScrollBarVisible()) {
        body.setAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE, "");
      }
      if (wrapper) {
        wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, "");
        wrapper.scrollTop = scrollPosition;
      }
      this.locked = true;
    }
  }
  resetScrollPosition() {
    scrollPosition = 0;
  }
}
function debounce(func, waitArg, options) {
  let lastArgs;
  let lastThis;
  let maxWait;
  let result;
  let timerId;
  let lastCallTime;
  let lastInvokeTime = 0;
  let leading = false;
  let maxing = false;
  let trailing = true;
  const useRAF = !waitArg && waitArg !== 0;
  if (typeof func !== "function") {
    throw new TypeError("Expected a function");
  }
  const wait = waitArg || 0;
  if (typeof options === "object") {
    leading = Boolean(options.leading);
    maxing = "maxWait" in options;
    maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : void 0;
    trailing = "trailing" in options ? Boolean(options.trailing) : trailing;
  }
  function invokeFunc(time) {
    const args = lastArgs;
    const thisArg = lastThis;
    lastArgs = void 0;
    lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function startTimer(pendingFunc, wait2) {
    if (useRAF) {
      cancelAnimationFrame(timerId);
      return requestAnimationFrame(pendingFunc);
    }
    return setTimeout(pendingFunc, wait2);
  }
  function cancelTimer(id) {
    if (useRAF) {
      return cancelAnimationFrame(id);
    }
    clearTimeout(id);
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = startTimer(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    const timeWaiting = wait - timeSinceLastCall;
    return maxing && maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    const timeSinceLastCall = time - lastCallTime;
    const timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && maxWait && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    const time = Date.now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = startTimer(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      cancelTimer(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(Date.now());
  }
  function pending() {
    return timerId !== void 0;
  }
  function debounced(...args) {
    const time = Date.now();
    const isInvoking = shouldInvoke(time);
    lastArgs = args;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        timerId = startTimer(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = startTimer(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  debounced.pending = pending;
  return debounced;
}
const scrollable = {
  props: { "data-polaris-scrollable": true },
  selector: "[data-polaris-scrollable]"
};
const overlay$1 = {
  props: { "data-polaris-overlay": true },
  selector: "[data-polaris-overlay]"
};
const layer = {
  props: { "data-polaris-layer": true },
  selector: "[data-polaris-layer]"
};
const unstyled = {
  props: { "data-polaris-unstyled": true },
  selector: "[data-polaris-unstyled]"
};
const dataPolarisTopBar = {
  props: { "data-polaris-top-bar": true },
  selector: "[data-polaris-top-bar]"
};
const headerCell = {
  props: { "data-polaris-header-cell": true },
  selector: "[data-polaris-header-cell]"
};
const portal = {
  props: ["data-portal-id"],
  selector: "[data-portal-id]"
};
class Rect {
  constructor({ top = 0, left = 0, width: width2 = 0, height: height2 = 0 } = {}) {
    __publicField(this, "top");
    __publicField(this, "left");
    __publicField(this, "width");
    __publicField(this, "height");
    this.top = top;
    this.left = left;
    this.width = width2;
    this.height = height2;
  }
  static get zero() {
    return new Rect();
  }
  get center() {
    return {
      x: this.left + this.width / 2,
      y: this.top + this.height / 2
    };
  }
}
function getRectForNode(node) {
  if (!(node instanceof Element)) {
    return new Rect({
      width: window.innerWidth,
      height: window.innerHeight
    });
  }
  const rect = node.getBoundingClientRect();
  return new Rect({
    top: rect.top,
    left: rect.left,
    width: rect.width,
    height: rect.height
  });
}
const SIXTY_FPS = 1e3 / 60;
class StickyManager {
  constructor(container) {
    __publicField(this, "stickyItems", []);
    __publicField(this, "stuckItems", []);
    __publicField(this, "container", null);
    __publicField(this, "topBarOffset", 0);
    __publicField(this, "handleResize", debounce(
      () => {
        this.manageStickyItems();
      },
      SIXTY_FPS,
      { leading: true, trailing: true, maxWait: SIXTY_FPS }
    ));
    __publicField(this, "handleScroll", debounce(
      () => {
        this.manageStickyItems();
      },
      SIXTY_FPS,
      { leading: true, trailing: true, maxWait: SIXTY_FPS }
    ));
    if (container) {
      this.setContainer(container);
    }
  }
  registerStickyItem(stickyItem) {
    this.stickyItems.push(stickyItem);
  }
  unregisterStickyItem(nodeToRemove) {
    const nodeIndex = this.stickyItems.findIndex(
      ({ stickyNode }) => nodeToRemove === stickyNode
    );
    this.stickyItems.splice(nodeIndex, 1);
  }
  setContainer(el) {
    this.container = el;
    if (isDocument$1(el)) {
      this.setTopBarOffset(el);
    }
    this.container.addEventListener("scroll", this.handleScroll);
    window.addEventListener("resize", this.handleResize);
    this.manageStickyItems();
  }
  removeScrollListener() {
    if (this.container) {
      this.container.removeEventListener("scroll", this.handleScroll);
      window.removeEventListener("resize", this.handleResize);
    }
  }
  manageStickyItems() {
    if (this.stickyItems.length <= 0) {
      return;
    }
    const scrollTop = this.container ? scrollTopFor(this.container) : 0;
    const containerTop = this.container ? getRectForNode(this.container).top + this.topBarOffset : 0;
    this.stickyItems.forEach((stickyItem) => {
      const { handlePositioning } = stickyItem;
      const { sticky, top, left, width: width2 } = this.evaluateStickyItem(
        stickyItem,
        scrollTop,
        containerTop
      );
      this.updateStuckItems(stickyItem, sticky);
      handlePositioning(sticky, top, left, width2);
    });
  }
  evaluateStickyItem(stickyItem, scrollTop, containerTop) {
    var _a;
    const {
      stickyNode,
      placeHolderNode,
      boundingElement,
      offset,
      disableWhenStacked
    } = stickyItem;
    if (disableWhenStacked && stackedContent().matches) {
      return {
        sticky: false,
        top: 0,
        left: 0,
        width: "auto"
      };
    }
    const stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(
      // Important: This will not update when the active theme changes.
      // Update this to `useTheme` once converted to a function component.
      themeDefault.space["space-500"],
      10
    ) : this.getOffset(stickyNode);
    const scrollPosition2 = scrollTop + stickyOffset;
    const placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop;
    const top = containerTop + stickyOffset;
    const width2 = placeHolderNode.getBoundingClientRect().width;
    const left = placeHolderNode.getBoundingClientRect().left;
    let sticky;
    if (boundingElement == null) {
      sticky = scrollPosition2 >= placeHolderNodeCurrentTop;
    } else {
      const stickyItemHeight = stickyNode.getBoundingClientRect().height || ((_a = stickyNode.firstElementChild) == null ? void 0 : _a.getBoundingClientRect().height) || 0;
      const stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
      sticky = scrollPosition2 >= placeHolderNodeCurrentTop && scrollPosition2 < stickyItemBottomPosition;
    }
    return {
      sticky,
      top,
      left,
      width: width2
    };
  }
  updateStuckItems(item, sticky) {
    const { stickyNode } = item;
    if (sticky && !this.isNodeStuck(stickyNode)) {
      this.addStuckItem(item);
    } else if (!sticky && this.isNodeStuck(stickyNode)) {
      this.removeStuckItem(item);
    }
  }
  addStuckItem(stickyItem) {
    this.stuckItems.push(stickyItem);
  }
  removeStuckItem(stickyItem) {
    const { stickyNode: nodeToRemove } = stickyItem;
    const nodeIndex = this.stuckItems.findIndex(
      ({ stickyNode }) => nodeToRemove === stickyNode
    );
    this.stuckItems.splice(nodeIndex, 1);
  }
  getOffset(node) {
    if (this.stuckItems.length === 0) {
      return 0;
    }
    let offset = 0;
    let count = 0;
    const stuckNodesLength = this.stuckItems.length;
    const nodeRect = getRectForNode(node);
    while (count < stuckNodesLength) {
      const stuckNode = this.stuckItems[count].stickyNode;
      if (stuckNode !== node) {
        const stuckNodeRect = getRectForNode(stuckNode);
        if (!horizontallyOverlaps(nodeRect, stuckNodeRect)) {
          offset += getRectForNode(stuckNode).height;
        }
      } else {
        break;
      }
      count++;
    }
    return offset;
  }
  isNodeStuck(node) {
    const nodeFound = this.stuckItems.findIndex(
      ({ stickyNode }) => node === stickyNode
    );
    return nodeFound >= 0;
  }
  setTopBarOffset(container) {
    const topbarElement = container.querySelector(
      `:not(${scrollable.selector}) ${dataPolarisTopBar.selector}`
    );
    this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
  }
}
function isDocument$1(node) {
  return node === document;
}
function scrollTopFor(container) {
  return isDocument$1(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
}
function horizontallyOverlaps(rect1, rect2) {
  const rect1Left = rect1.left;
  const rect1Right = rect1.left + rect1.width;
  const rect2Left = rect2.left;
  const rect2Right = rect2.left + rect2.width;
  return rect2Right < rect1Left || rect1Right < rect2Left;
}
function getTheme(themeName) {
  return themes[themeName];
}
function useEventListener(eventName, handler, target, options) {
  if (!(typeof eventName === "string" && target !== null))
    return;
  let targetElement;
  if (typeof target === "undefined") {
    targetElement = window;
  } else {
    targetElement = target;
  }
  const eventListener = (event) => handler(event);
  onMounted(() => {
    targetElement.addEventListener(eventName, eventListener, options);
  });
  onBeforeUnmount(() => {
    targetElement.removeEventListener(eventName, eventListener, options);
  });
}
function useMediaQueryContext() {
  const isNavigationCollapsed = ref(navigationBarCollapsed().matches);
  const handleResize = debounce(
    () => {
      if (isNavigationCollapsed.value !== navigationBarCollapsed().matches) {
        isNavigationCollapsed.value = !isNavigationCollapsed.value;
      }
    },
    40,
    { trailing: true, leading: true, maxWait: 40 }
  );
  useEventListener("resize", handleResize);
  return {
    isNavigationCollapsed
  };
}
function useId() {
  const currentInstance = getCurrentInstance();
  if (!currentInstance) {
    throw new Error("useId must be called within a component.");
  }
  return currentInstance.uid;
}
function useFocusManager({ trapping }) {
  const context = inject("focus-manager");
  const id = useId();
  if (!context) {
    throw new Error("No FocusManager was provided.");
  }
  const {
    trapFocusList,
    add: addFocusItem,
    remove: removeFocusItem
  } = context;
  const canSafelyFocus = computed(() => trapFocusList.value[0] === String(id));
  watchEffect(() => {
    if (!trapping) {
      return;
    }
    addFocusItem(String(id));
  });
  onUnmounted(() => {
    removeFocusItem(String(id));
  });
  return { canSafelyFocus };
}
function useFocusManagerContext() {
  const trapFocusList = ref([]);
  const add = (id) => {
    trapFocusList.value = [...trapFocusList.value, id];
  };
  const remove = (id) => {
    let removed = true;
    const clone = [...trapFocusList.value];
    const index = clone.indexOf(id);
    if (index === -1) {
      removed = false;
    } else {
      clone.splice(index, 1);
    }
    trapFocusList.value = clone;
    return removed;
  };
  return {
    add,
    remove,
    trapFocusList
  };
}
function useEphemeralPresenceManagerContext() {
  const presenceCounter = ref({ tooltip: 0 });
  const addPresence = (key) => {
    presenceCounter.value[key] += 1;
  };
  const removePresence = (key) => {
    presenceCounter.value[key] -= 1;
  };
  const presenceList = computed(() => {
    return Object.entries(presenceCounter.value).reduce((prevValue, currentValue) => {
      const [key, value] = currentValue;
      return {
        ...prevValue,
        [key]: value > 0
      };
    }, {});
  });
  return {
    presenceList,
    presenceCounter,
    addPresence,
    removePresence
  };
}
const _hoisted_1$1w = { class: "polaris-app-provider" };
const MAX_SCROLLBAR_WIDTH = 20;
const SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30;
const _sfc_main$2Y = /* @__PURE__ */ defineComponent({
  __name: "AppProvider",
  props: {
    theme: {},
    i18n: {},
    linkComponent: {},
    features: {}
  },
  setup(__props) {
    const SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
    const props = __props;
    const stickyManager = new StickyManager();
    const scrollLockManager = new ScrollLockManager();
    const { isNavigationCollapsed } = useMediaQueryContext();
    const focusManager = useFocusManagerContext();
    const ephemeralPresenceManager = useEphemeralPresenceManagerContext();
    const portalsContainerRef = ref(null);
    const themeName = computed(() => props.theme ?? themeNameDefault);
    onMounted(() => {
      if (document != null) {
        stickyManager.setContainer(document);
        setBodyStyles();
        setRootAttributes();
        const isSafari16 = navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") && (navigator.userAgent.includes("Version/16.1") || navigator.userAgent.includes("Version/16.2") || navigator.userAgent.includes("Version/16.3"));
        if (isSafari16) {
          document.documentElement.classList.add(
            "Polaris-Safari-16-Font-Optical-Sizing-Patch"
          );
        }
      }
      measureScrollbars();
    });
    const setBodyStyles = () => {
      document.body.style.backgroundColor = "var(--p-color-bg)";
      document.body.style.color = "var(--p-color-text)";
    };
    const setRootAttributes = () => {
      const activeThemeName = themeName.value;
      themeNames.forEach((themeName2) => {
        document.documentElement.classList.toggle(
          createThemeClassName(themeName2),
          themeName2 === activeThemeName
        );
      });
    };
    function measureScrollbars() {
      var _a;
      const parentEl = document.createElement("div");
      parentEl.setAttribute(
        "style",
        `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`
      );
      const child = document.createElement("div");
      child.setAttribute(
        "style",
        `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll; ; scrollbar-width: thin;`
      );
      parentEl.appendChild(child);
      document.body.appendChild(parentEl);
      const scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (((_a = parentEl.firstElementChild) == null ? void 0 : _a.clientWidth) ?? 0);
      const scrollbarWidthWithSafetyHatch = Math.min(
        scrollbarWidth,
        MAX_SCROLLBAR_WIDTH
      );
      document.documentElement.style.setProperty(
        "--pc-app-provider-scrollbar-width",
        `${scrollbarWidthWithSafetyHatch}px`
      );
      document.body.removeChild(parentEl);
    }
    provide("theme", getTheme(themeName.value));
    provide("features", props.features ?? {});
    provide("i18n", new I18n(props.i18n));
    provide("scroll-lock-manager", scrollLockManager);
    provide("sticky-manager", stickyManager);
    provide("link", props.linkComponent);
    provide("media-query", { isNavigationCollapsed });
    provide("portals-manager", portalsContainerRef);
    provide("focus-manager", focusManager);
    provide("ephemeral-presence-manager", ephemeralPresenceManager);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$1w, [
        renderSlot(_ctx.$slots, "default"),
        createBaseVNode("div", {
          id: "PolarisPortalsContainer",
          ref_key: "portalsContainerRef",
          ref: portalsContainerRef
        }, null, 512)
      ]);
    };
  }
});
function isSection(arr) {
  return typeof arr[0] === "object" && Object.prototype.hasOwnProperty.call(arr[0], "options");
}
var AutoSelection = /* @__PURE__ */ ((AutoSelection2) => {
  AutoSelection2["FirstSelected"] = "FIRST_SELECTED";
  AutoSelection2["First"] = "FIRST";
  AutoSelection2["None"] = "NONE";
  return AutoSelection2;
})(AutoSelection || {});
const ActionContainer$1 = "Polaris-Autocomplete-MappedAction__ActionContainer";
const Action$4 = "Polaris-Autocomplete-MappedAction__Action";
const destructive = "Polaris-Autocomplete-MappedAction--destructive";
const selected$2 = "Polaris-Autocomplete-MappedAction--selected";
const disabled$d = "Polaris-Autocomplete-MappedAction--disabled";
const Prefix$4 = "Polaris-Autocomplete-MappedAction__Prefix";
const Suffix$3 = "Polaris-Autocomplete-MappedAction__Suffix";
const Content$7 = "Polaris-Autocomplete-MappedAction__Content";
const Text$3 = "Polaris-Autocomplete-MappedAction__Text";
const ContentWrap = "Polaris-Autocomplete-MappedAction__ContentWrap";
const styles$1E = {
  ActionContainer: ActionContainer$1,
  Action: Action$4,
  destructive,
  selected: selected$2,
  disabled: disabled$d,
  Prefix: Prefix$4,
  Suffix: Suffix$3,
  Content: Content$7,
  Text: Text$3,
  ContentWrap
};
const _sfc_main$2X = /* @__PURE__ */ defineComponent({
  __name: "MappedAction",
  props: {
    wrapOverflow: { type: Boolean, default: false },
    accessibilityLabel: {},
    badge: {},
    prefix: { type: [String, Number, Boolean, null] },
    suffix: { type: [String, Number, Boolean, null] },
    helpText: {},
    icon: {},
    image: {},
    ellipsis: { type: Boolean },
    truncate: { type: Boolean },
    active: { type: Boolean },
    variant: {},
    role: {},
    disabled: { type: Boolean },
    id: {},
    content: {},
    url: {},
    external: { type: Boolean },
    target: {},
    onAction: {},
    onMouseEnter: {},
    onTouchStart: {},
    destructive: { type: Boolean }
  },
  emits: ["action"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const context = computed(() => ({
      role: props.role,
      url: props.url,
      external: props.external,
      destructive: props.destructive,
      onAction
    }));
    const actionClassNames = computed(() => classNames(
      styles$1E.Action,
      props.disabled && styles$1E.disabled,
      props.destructive && styles$1E.destructive,
      props.active && styles$1E.selected
    ));
    const contentOverflowStyle = computed(() => props.wrapOverflow ? styles$1E.ContentWrap : void 0);
    const contentText = computed(() => {
      return props.ellipsis && props.content ? i18n.translate("Polaris.Autocomplete.ellipsis", { content: props.content }) : props.content;
    });
    const onAction = () => {
      emits("action");
    };
    provide("mapped-action", context);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$1E).ActionContainer)
      }, [
        createVNode(unref(_sfc_main$2S), {
          selected: _ctx.active,
          disabled: _ctx.disabled,
          value: _ctx.content || ""
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(actionClassNames.value)
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(styles$1E).Content)
              }, [
                _ctx.prefix ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(styles$1E).Prefix)
                }, [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefix)))
                ], 2)) : _ctx.icon ? (openBlock(), createElementBlock("div", {
                  key: 1,
                  class: normalizeClass(unref(styles$1E).Prefix)
                }, [
                  createVNode(unref(_sfc_main$1K), { source: _ctx.icon }, null, 8, ["source"])
                ], 2)) : _ctx.image ? (openBlock(), createElementBlock("div", {
                  key: 2,
                  role: "presentation",
                  class: normalizeClass(unref(styles$1E).Prefix),
                  style: normalizeStyle({ backgroundImage: `url(${_ctx.image})` })
                }, null, 6)) : createCommentVNode("", true),
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$1E).Text)
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(contentOverflowStyle.value)
                  }, toDisplayString(contentText.value), 3),
                  _ctx.helpText ? (openBlock(), createBlock(unref(_sfc_main$f), {
                    key: 0,
                    tone: "subdued",
                    as: "span"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.helpText), 1)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ], 2),
                _ctx.badge ? (openBlock(), createElementBlock("span", {
                  key: 3,
                  class: normalizeClass(unref(styles$1E).Suffix)
                }, [
                  createVNode(unref(_sfc_main$2J), {
                    tone: _ctx.badge.tone
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.badge.content), 1)
                    ]),
                    _: 1
                  }, 8, ["tone"])
                ], 2)) : createCommentVNode("", true),
                _ctx.suffix ? (openBlock(), createElementBlock("span", {
                  key: 4,
                  class: normalizeClass(unref(styles$1E).Suffix)
                }, [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffix)))
                ], 2)) : createCommentVNode("", true)
              ], 2)
            ], 2)
          ]),
          _: 1
        }, 8, ["selected", "disabled", "value"])
      ], 2);
    };
  }
});
const Content$6 = "Polaris-Autocomplete-MappedOption__Content";
const Media$1 = "Polaris-Autocomplete-MappedOption__Media";
const singleSelectionMedia = "Polaris-Autocomplete-MappedOption--singleSelectionMedia";
const disabledMedia = "Polaris-Autocomplete-MappedOption--disabledMedia";
const styles$1D = {
  Content: Content$6,
  Media: Media$1,
  singleSelectionMedia,
  disabledMedia
};
const _sfc_main$2W = /* @__PURE__ */ defineComponent({
  __name: "MappedOption",
  props: {
    value: {},
    disabled: { type: Boolean },
    active: { type: Boolean },
    id: {},
    label: {},
    media: { type: [String, Number, Boolean, null] },
    selected: { type: Boolean },
    singleSelection: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const mediaClassNames = computed(() => classNames(
      styles$1D.Media,
      props.disabled && styles$1D.disabledMedia,
      props.singleSelection && styles$1D.singleSelectionMedia
    ));
    const accessibilityLabel = computed(() => typeof props.label === "string" ? props.label : void 0);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2T), {
        "accessibility-label": accessibilityLabel.value,
        key: _ctx.value,
        value: _ctx.value,
        selected: _ctx.selected,
        disabled: _ctx.disabled
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2U), {
            selected: _ctx.selected,
            disabled: _ctx.disabled
          }, {
            default: withCtx(() => [
              createBaseVNode("div", {
                class: normalizeClass(unref(styles$1D).Content)
              }, [
                _ctx.media ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(mediaClassNames.value)
                }, [
                  (openBlock(), createBlock(resolveDynamicComponent(_ctx.media)))
                ], 2)) : createCommentVNode("", true),
                createTextVNode(toDisplayString(_ctx.label), 1)
              ], 2)
            ]),
            _: 1
          }, 8, ["selected", "disabled"])
        ]),
        _: 1
      }, 8, ["accessibility-label", "value", "selected", "disabled"]);
    };
  }
});
function useListbox() {
  const context = inject("listbox");
  return context;
}
function useWithinListbox() {
  const context = inject("within-listbox", ref(false));
  return context;
}
function useAction() {
  const context = inject("action", false);
  return context;
}
function useComboboxListbox() {
  const context = inject("combobox-listbox", {});
  return context;
}
function useComboboxListboxOption() {
  const context = inject("combobox-listbox-option", { allowMultiple: false });
  return context;
}
function useSection() {
  const context = inject("section-context", "");
  return context;
}
function scrollOptionIntoView(option, scrollable2) {
  const listTop = scrollable2.scrollTop;
  const listBottom = listTop + scrollable2.clientHeight;
  const { offsetHeight: optionHeight } = option;
  const { offsetTop: optionTop } = option;
  const optionBottom = optionTop + optionHeight;
  const isVisible = optionTop > listTop && optionBottom < listBottom;
  if (!isVisible) {
    let top = 0;
    if (optionBottom > listBottom) {
      top = optionBottom + optionHeight * 0.85 - listBottom;
    } else if (optionTop < listTop) {
      top = optionTop - optionHeight * 0.15 - listTop;
    }
    requestAnimationFrame(() => {
      scrollable2.scrollBy({ top, behavior: "auto" });
    });
  }
}
const Listbox$1 = "Polaris-Listbox";
const styles$1C = {
  Listbox: Listbox$1
};
const _hoisted_1$1v = { "aria-live": "polite" };
const _hoisted_2$X = ["aria-label", "aria-labelledby", "aria-busy", "aria-activedescendant", "id"];
const OPTION_SELECTOR = "[data-listbox-option]";
const OPTION_VALUE_ATTRIBUTE = "data-listbox-option-value";
const OPTION_ACTION_ATTRIBUTE = "data-listbox-option-action";
const OPTION_FOCUS_ATTRIBUTE = "data-focused";
const _sfc_main$2V = /* @__PURE__ */ defineComponent({
  __name: "ListBox",
  props: {
    autoSelection: { default: AutoSelection.FirstSelected },
    enableKeyboardControl: { type: Boolean },
    accessibilityLabel: {},
    customListId: {}
  },
  emits: ["select", "active-option-change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const comboboxListboxContext = useComboboxListbox();
    const {
      listboxId,
      textFieldLabelId,
      textFieldFocused,
      willLoadMoreOptions,
      setActiveOptionId,
      setListboxId,
      onOptionSelected,
      onKeyToBottom
    } = comboboxListboxContext;
    const listboxRef = ref(null);
    const scrollableRef = ref(null);
    const loading2 = ref("");
    const lazyLoading = ref(false);
    const currentOptions = ref([]);
    const keyboardEventsEnabled = ref(Boolean(props.enableKeyboardControl));
    const activeOption = ref();
    const uniqueId = String(useId());
    const listId = computed(() => props.customListId || uniqueId);
    const inCombobox = computed(() => Boolean(setActiveOptionId));
    const activeDescendant = computed(() => {
      var _a;
      return (_a = activeOption.value) == null ? void 0 : _a.domId;
    });
    const getNavigableOptions = () => {
      if (!listboxRef.value) {
        return [];
      }
      return [
        ...new Set(
          listboxRef.value.querySelectorAll(OPTION_SELECTOR)
        )
      ];
    };
    const getFirstNavigableOption = (currentOpts) => {
      const hasSelectedOptions = currentOpts.some(
        (option) => option.getAttribute("aria-selected") === "true"
      );
      let elementIndex = 0;
      const element = currentOpts.find((option, index) => {
        const isInteractable = option.getAttribute("aria-disabled") !== "true";
        let isFirstNavigableOption;
        if (hasSelectedOptions && props.autoSelection === AutoSelection.FirstSelected) {
          const isSelected = option.getAttribute("aria-selected") === "true";
          isFirstNavigableOption = isSelected && isInteractable;
        } else {
          isFirstNavigableOption = isInteractable;
        }
        if (isFirstNavigableOption) {
          elementIndex = index;
        }
        return isFirstNavigableOption;
      });
      if (!element) {
        return;
      }
      return { element, index: elementIndex };
    };
    const handleScrollIntoView = (option) => {
      if (scrollableRef.value) {
        scrollOptionIntoView(option.element, scrollableRef.value);
      }
    };
    const handleScrollIntoViewDebounced = debounce(handleScrollIntoView, 50);
    const handleKeyToBottom = () => {
      if (onKeyToBottom) {
        lazyLoading.value = true;
        return Promise.resolve(onKeyToBottom());
      }
    };
    const handleChangeActiveOption = (nextOption) => {
      var _a;
      if (!nextOption) {
        activeOption.value = void 0;
        return;
      }
      (_a = activeOption.value) == null ? void 0 : _a.element.removeAttribute(OPTION_FOCUS_ATTRIBUTE);
      nextOption == null ? void 0 : nextOption.element.setAttribute(OPTION_FOCUS_ATTRIBUTE, "true");
      handleScrollIntoViewDebounced(nextOption);
      activeOption.value = nextOption;
      setActiveOptionId == null ? void 0 : setActiveOptionId(nextOption.domId);
      emits("active-option-change", nextOption.value);
    };
    const getFormattedOption = (element, index) => {
      return {
        element,
        index,
        domId: element.id,
        value: element.getAttribute(OPTION_VALUE_ATTRIBUTE) || "",
        disabled: element.getAttribute("aria-disabled") === "true",
        isAction: element.getAttribute(OPTION_ACTION_ATTRIBUTE) === "true"
      };
    };
    const resetActiveOption = () => {
      var _a, _b;
      let nextOption;
      const nextOptions = getNavigableOptions();
      const nextActiveOption = getFirstNavigableOption(nextOptions);
      if (nextOptions.length === 0 && currentOptions.value.length > 0) {
        currentOptions.value = nextOptions;
        handleChangeActiveOption();
        return;
      }
      if (nextActiveOption) {
        const { element, index } = nextActiveOption;
        nextOption = getFormattedOption(element, index);
      }
      const optionIsAlreadyActive = activeOption.value !== void 0 && (nextOption == null ? void 0 : nextOption.domId) === ((_a = activeOption.value) == null ? void 0 : _a.domId);
      const actionContentHasUpdated = ((_b = activeOption.value) == null ? void 0 : _b.isAction) && (nextOption == null ? void 0 : nextOption.isAction) && (nextOption == null ? void 0 : nextOption.value) !== (activeOption == null ? void 0 : activeOption.value);
      const currentValues = currentOptions.value.map(
        (option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)
      );
      const nextValues = nextOptions.map(
        (option) => option.getAttribute(OPTION_VALUE_ATTRIBUTE)
      );
      const listIsUnchanged = nextValues.length === currentValues.length && nextValues.every((value, index) => {
        return currentValues[index] === value;
      });
      if (listIsUnchanged) {
        if (optionIsAlreadyActive && actionContentHasUpdated) {
          currentOptions.value = nextOptions;
          handleChangeActiveOption(nextOption);
        }
        return;
      }
      const listIsAppended = currentValues.length !== 0 && nextValues.length > currentValues.length && currentValues.every((value, index) => {
        return nextValues[index] === value;
      });
      if (listIsAppended) {
        currentOptions.value = nextOptions;
        return;
      }
      currentOptions.value = nextOptions;
      if (lazyLoading.value) {
        lazyLoading.value = false;
        return;
      }
      handleChangeActiveOption(nextOption);
    };
    const getNextValidOption = async (key) => {
      var _a, _b;
      const lastIndex = currentOptions.value.length - 1;
      let currentIndex = ((_a = activeOption.value) == null ? void 0 : _a.index) || 0;
      let nextIndex = 0;
      let element = (_b = activeOption.value) == null ? void 0 : _b.element;
      let totalOptions = -1;
      if (!activeOption.value && props.autoSelection === AutoSelection.None) {
        const nextOptions = getNavigableOptions();
        const nextActiveOption = getFirstNavigableOption(nextOptions);
        currentOptions.value = nextOptions;
        const {
          element: tmpElement,
          index
        } = nextActiveOption;
        return {
          element: tmpElement,
          nextIndex: index || 0
        };
      }
      while (totalOptions++ < lastIndex) {
        nextIndex = getNextIndex(currentIndex, lastIndex, key);
        element = currentOptions.value[nextIndex];
        const triggerLazyLoad = nextIndex >= lastIndex;
        const isDisabled2 = (element == null ? void 0 : element.getAttribute("aria-disabled")) === "true";
        if (triggerLazyLoad && (willLoadMoreOptions == null ? void 0 : willLoadMoreOptions.value)) {
          await handleKeyToBottom();
        }
        if (isDisabled2) {
          currentIndex = nextIndex;
          element = void 0;
          continue;
        }
        break;
      }
      return { element, nextIndex };
    };
    const handleArrow = async (type, event) => {
      event.preventDefault();
      const { element, nextIndex } = await getNextValidOption(type);
      if (!element) {
        return;
      }
      const nextOption = getFormattedOption(element, nextIndex);
      handleChangeActiveOption(nextOption);
    };
    const handleDownArrow = (event) => {
      handleArrow("down", event);
    };
    const handleUpArrow = (event) => {
      handleArrow("up", event);
    };
    const handleEnter = (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (activeOption.value) {
        onOptionSelect(activeOption.value);
      }
    };
    const handleFocus = () => {
      if (props.enableKeyboardControl) {
        return;
      }
      keyboardEventsEnabled.value = true;
    };
    const handleBlur = (event) => {
      event.stopPropagation();
      if (keyboardEventsEnabled.value) {
        const nextActiveOption = getFirstNavigableOption(currentOptions.value);
        if (nextActiveOption) {
          const { element, index } = nextActiveOption;
          const nextOption = getFormattedOption(element, index);
          handleChangeActiveOption(nextOption);
        }
      }
      if (props.enableKeyboardControl) {
        return;
      }
      keyboardEventsEnabled.value = false;
    };
    const setLoading = (value) => {
      loading2.value = value;
    };
    const getNextIndex = (currentIndex, lastIndex, direction) => {
      let nextIndex;
      if (direction === "down") {
        if (currentIndex === lastIndex) {
          nextIndex = (willLoadMoreOptions == null ? void 0 : willLoadMoreOptions.value) ? currentIndex + 1 : 0;
        } else {
          nextIndex = currentIndex + 1;
        }
      } else {
        nextIndex = currentIndex === 0 ? lastIndex : currentIndex - 1;
      }
      return nextIndex;
    };
    const onOptionSelect = (option) => {
      handleChangeActiveOption(option);
      if (onOptionSelected) {
        onOptionSelected();
      }
      emits("select", option.value);
    };
    onUpdated(() => {
      if (props.autoSelection !== AutoSelection.None && !loading2.value && slots.default && slots.default().length > 0) {
        resetActiveOption();
      }
    });
    onMounted(() => {
      if (props.autoSelection !== AutoSelection.None && !loading2.value && slots.default && slots.default().length > 0) {
        resetActiveOption();
      }
      if (props.enableKeyboardControl && !keyboardEventsEnabled.value) {
        keyboardEventsEnabled.value = true;
      }
      if (setListboxId && !(listboxId == null ? void 0 : listboxId.value)) {
        setListboxId(listId.value);
      }
    });
    watch(
      () => listboxRef.value,
      () => {
        if (listboxRef.value) {
          scrollableRef.value = listboxRef.value.closest(scrollable.selector);
        }
      }
    );
    provide("listbox", { onOptionSelect, setLoading });
    provide("within-listbox", true);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        keyboardEventsEnabled.value || unref(textFieldFocused) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createVNode(unref(_sfc_main$1p), {
            keyEvent: "keydown",
            keyCode: unref(Key).DownArrow,
            handler: handleDownArrow
          }, null, 8, ["keyCode"]),
          createVNode(unref(_sfc_main$1p), {
            keyEvent: "keydown",
            keyCode: unref(Key).UpArrow,
            handler: handleUpArrow
          }, null, 8, ["keyCode"]),
          createVNode(unref(_sfc_main$1p), {
            keyEvent: "keydown",
            keyCode: unref(Key).Enter,
            handler: handleEnter
          }, null, 8, ["keyCode"])
        ], 64)) : createCommentVNode("", true),
        createVNode(unref(_sfc_main$f), {
          as: "span",
          "visually-hidden": ""
        }, {
          default: withCtx(() => [
            createBaseVNode("div", _hoisted_1$1v, toDisplayString(loading2.value ? loading2.value : null), 1)
          ]),
          _: 1
        }),
        unref(slots).default ? (openBlock(), createElementBlock("ul", {
          key: 1,
          tabindex: "0",
          role: "listbox",
          class: normalizeClass(unref(classNames)(unref(styles$1C).Listbox)),
          "aria-label": inCombobox.value ? void 0 : _ctx.accessibilityLabel,
          "aria-labelledby": unref(textFieldLabelId) || void 0,
          "aria-busy": Boolean(loading2.value),
          "aria-activedescendant": activeDescendant.value,
          id: listId.value,
          onFocus: handleFocus,
          onBlur: handleBlur,
          ref_key: "listboxRef",
          ref: listboxRef
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 42, _hoisted_2$X)) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const listboxSectionDataSelector = {
  props: { "data-polaris-listbox-section-item": true },
  selector: "[data-polaris-listbox-section-item]"
};
const listboxWithinSectionDataSelector = {
  attribute: "data-polaris-listbox-within-section-item"
};
const _hoisted_1$1u = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$W = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M15.78 5.97a.75.75 0 0 1 0 1.06l-6.5 6.5a.75.75 0 0 1-1.06 0l-3.25-3.25a.75.75 0 1 1 1.06-1.06l2.72 2.72 5.97-5.97a.75.75 0 0 1 1.06 0"
}, null, -1);
const _hoisted_3$M = [
  _hoisted_2$W
];
function render$A(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1u, [..._hoisted_3$M]);
}
const CheckIcon = { render: render$A };
const TextOption = "Polaris-Listbox-TextOption";
const allowMultiple = "Polaris-Listbox-TextOption--allowMultiple";
const isAction = "Polaris-Listbox-TextOption--isAction";
const disabled$c = "Polaris-Listbox-TextOption--disabled";
const selected$1 = "Polaris-Listbox-TextOption--selected";
const Content$5 = "Polaris-Listbox-TextOption__Content";
const Checkbox$3 = "Polaris-Listbox-TextOption__Checkbox";
const styles$1B = {
  TextOption,
  allowMultiple,
  isAction,
  disabled: disabled$c,
  selected: selected$1,
  Content: Content$5,
  Checkbox: Checkbox$3
};
const _sfc_main$2U = /* @__PURE__ */ defineComponent({
  __name: "TextOption",
  props: /* @__PURE__ */ mergeModels({
    selected: { type: Boolean },
    disabled: { type: Boolean }
  }, {
    "modelValue": { type: Boolean },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const props = __props;
    const model = useModel(__props, "modelValue");
    onMounted(() => {
      model.value = props.selected;
    });
    watch(
      () => props.selected,
      (newVal) => {
        model.value = newVal;
      },
      { immediate: true }
    );
    const { allowMultiple: allowMultiple2 } = useComboboxListboxOption();
    const isAction2 = useAction();
    const className = computed(() => classNames(
      styles$1B.TextOption,
      props.selected && !allowMultiple2 && styles$1B.selected,
      props.disabled && styles$1B.disabled,
      allowMultiple2 && styles$1B.allowMultiple,
      isAction2 && styles$1B.isAction
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$1B).Content)
        }, [
          unref(allowMultiple2) && !unref(isAction2) ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles$1B).Checkbox)
          }, [
            createVNode(unref(_sfc_main$2l), {
              modelValue: model.value,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
              disabled: _ctx.disabled
            }, {
              label: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["modelValue", "disabled"])
          ], 2)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            _ctx.selected ? (openBlock(), createBlock(unref(_sfc_main$2B), {
              key: 0,
              width: "100%"
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$1r), {
                  wrap: false,
                  align: "space-between",
                  gap: "200"
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "default"),
                    createVNode(unref(_sfc_main$1r), { align: "end" }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$1K), { source: unref(CheckIcon) }, null, 8, ["source"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 3
                })
              ]),
              _: 3
            })) : renderSlot(_ctx.$slots, "default", { key: 1 })
          ], 64))
        ], 2)
      ], 2);
    };
  }
});
const Option$1 = "Polaris-Listbox-Option";
const divider = "Polaris-Listbox-Option--divider";
const styles$1A = {
  Option: Option$1,
  divider
};
const _hoisted_1$1t = ["id", "role", "data-within-section", "data-listbox-option-value", "data-listbox-option-action", "data-listbox-option-destructive", "aria-disabled", "aria-label", "aria-selected"];
const _sfc_main$2T = /* @__PURE__ */ defineComponent({
  __name: "Option",
  props: /* @__PURE__ */ mergeModels({
    value: {},
    accessibilityLabel: {},
    selected: { type: Boolean },
    disabled: { type: Boolean },
    divider: { type: Boolean }
  }, {
    "modelValue": { type: Boolean },
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const model = useModel(__props, "modelValue");
    onMounted(() => {
      model.value = props.selected;
    });
    watch(
      () => props.selected,
      (newVal) => {
        model.value = newVal;
      },
      { immediate: true }
    );
    const mappedActionContext = inject("mapped-action", computed(() => ({})));
    const sectionId = useSection();
    const listboxContext = useListbox();
    const { isSlotContainHtml } = useHasSlot();
    const isAction2 = useAction();
    const { role, url, external, onAction, destructive: destructive2 } = mappedActionContext.value;
    const { onOptionSelect } = listboxContext;
    const listItemRef = ref(null);
    const domId = String(useId());
    const isWithinSection = computed(() => Boolean(sectionId));
    const legacyRoleSupport = computed(() => role || "option");
    const className = computed(() => classNames(
      styles$1A.Option,
      props.divider && styles$1A.divider
    ));
    const sectionAttributes = computed(() => ({
      [listboxWithinSectionDataSelector.attribute]: isWithinSection.value
    }));
    const isSlotContainHtmlTags = computed(() => {
      return isSlotContainHtml(slots.default);
    });
    const handleOptionSelect = (event) => {
      if (props.disabled)
        return;
      event.preventDefault();
      event.stopPropagation();
      model.value = !model.value;
      onAction && onAction();
      if (listItemRef.value && !onAction) {
        onOptionSelect({
          domId,
          value: props.value,
          element: listItemRef.value,
          disabled: props.disabled
        });
      }
    };
    const handleMouseDown = (event) => {
      event.preventDefault();
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", mergeProps(sectionAttributes.value, {
        tabindex: "-1",
        "data-listbox-option": "",
        ref_key: "listItemRef",
        ref: listItemRef,
        id: unref(domId),
        class: className.value,
        role: legacyRoleSupport.value,
        "data-within-section": isWithinSection.value,
        "data-listbox-option-value": _ctx.value,
        "data-listbox-option-action": unref(isAction2),
        "data-listbox-option-destructive": unref(destructive2),
        "aria-disabled": _ctx.disabled,
        "aria-label": _ctx.accessibilityLabel,
        "aria-selected": _ctx.selected,
        onClick: handleOptionSelect,
        onKeydown: handleOptionSelect,
        onMousedown: handleMouseDown
      }), [
        unref(url) ? (openBlock(), createBlock(unref(_sfc_main$2v), {
          key: 0,
          url: unref(url),
          external: unref(external)
        }, {
          default: withCtx(() => [
            isSlotContainHtmlTags.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(_sfc_main$2U, {
              key: 1,
              modelValue: model.value,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
              disabled: _ctx.disabled
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["modelValue", "disabled"]))
          ]),
          _: 3
        }, 8, ["url", "external"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          isSlotContainHtmlTags.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(_sfc_main$2U, {
            key: 1,
            modelValue: model.value,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => model.value = $event),
            disabled: _ctx.disabled
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["modelValue", "disabled"]))
        ], 64))
      ], 16, _hoisted_1$1t);
    };
  }
});
const Action$3 = "Polaris-Listbox-Action";
const ActionDivider = "Polaris-Listbox-Action__ActionDivider";
const Icon$9 = "Polaris-Listbox-Action__Icon";
const styles$1z = {
  Action: Action$3,
  ActionDivider,
  Icon: Icon$9
};
const _sfc_main$2S = /* @__PURE__ */ defineComponent({
  __name: "Action",
  props: {
    value: {},
    accessibilityLabel: {},
    selected: { type: Boolean },
    disabled: { type: Boolean },
    divider: { type: Boolean },
    icon: {}
  },
  setup(__props) {
    provide("action", true);
    const props = __props;
    const className = computed(() => classNames(
      styles$1z.Action,
      props.divider && styles$1z.ActionDivider
    ));
    return (_ctx, _cache) => {
      const _component_Icon = resolveComponent("Icon");
      return openBlock(), createBlock(_sfc_main$2T, normalizeProps(guardReactiveProps(props)), {
        default: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(className.value)
          }, [
            createVNode(_sfc_main$2U, {
              selected: _ctx.selected,
              disabled: _ctx.disabled
            }, {
              default: withCtx(() => [
                _ctx.icon ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(styles$1z).Icon)
                }, [
                  createVNode(_component_Icon, {
                    tone: "subdued",
                    source: _ctx.icon
                  }, null, 8, ["source"])
                ], 2)) : createCommentVNode("", true),
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["selected", "disabled"])
          ], 2)
        ]),
        _: 3
      }, 16);
    };
  }
});
const _hoisted_1$1s = ["id"];
const _sfc_main$2R = /* @__PURE__ */ defineComponent({
  __name: "Header",
  setup(__props) {
    const sectionId = useSection();
    const slots = useSlots();
    const { isSlotContainHtml } = useHasSlot();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        id: unref(sectionId),
        "aria-hidden": ""
      }, [
        unref(isSlotContainHtml)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(unref(_sfc_main$2B), {
          key: 1,
          "padding-block-start": "200",
          "padding-inline-start": "400",
          "padding-block-end": "200",
          "padding-inline-end": "400"
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$f), {
              as: "span",
              variant: "headingSm",
              tone: "subdued"
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })
          ]),
          _: 3
        }))
      ], 8, _hoisted_1$1s);
    };
  }
});
const ListItem$1 = "Polaris-Listbox-Loading__ListItem";
const Loading$1 = "Polaris-Listbox-Loading";
const styles$1y = {
  ListItem: ListItem$1,
  Loading: Loading$1
};
const _sfc_main$2Q = /* @__PURE__ */ defineComponent({
  __name: "Loading",
  props: {
    accessibilityLabel: {}
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const listboxContext = useListbox();
    const { setLoading } = listboxContext;
    watch(
      () => props.accessibilityLabel,
      () => {
        setLoading(props.accessibilityLabel);
        return () => setLoading(void 0);
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        class: normalizeClass(unref(styles$1y).ListItem),
        role: "presentation"
      }, [
        unref(slots).default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(styles$1y).Loading)
        }, [
          createVNode(unref(_sfc_main$r), {
            size: "small",
            accessibilityLabel: _ctx.accessibilityLabel
          }, null, 8, ["accessibilityLabel"])
        ], 2))
      ], 2);
    };
  }
});
const SectionGroup = "Polaris-Listbox-Section__SectionGroup";
const noDivider = "Polaris-Listbox-Section--noDivider";
const styles$1x = {
  SectionGroup,
  noDivider
};
const _hoisted_1$1r = ["aria-labelledby"];
const _sfc_main$2P = /* @__PURE__ */ defineComponent({
  __name: "Section",
  props: {
    divider: { type: Boolean, default: true }
  },
  setup(__props) {
    const props = __props;
    useSlots();
    const sectionId = String(useId());
    const className = computed(() => classNames(
      styles$1x.Section,
      !props.divider && styles$1x.noDivider
    ));
    provide("section-context", sectionId);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", mergeProps({ role: "presentation" }, unref(listboxSectionDataSelector)), [
        renderSlot(_ctx.$slots, "title"),
        createBaseVNode("ul", {
          role: "group",
          "aria-labelledby": unref(sectionId),
          class: normalizeClass(className.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 10, _hoisted_1$1r)
      ], 16);
    };
  }
});
const _hoisted_1$1q = {
  key: 4,
  role: "status"
};
const _sfc_main$2O = /* @__PURE__ */ defineComponent({
  __name: "Autocomplete",
  props: {
    id: {},
    options: {},
    selected: {},
    preferredPosition: {},
    listTitle: {},
    allowMultiple: { type: Boolean },
    actionBefore: {},
    loading: { type: Boolean },
    willLoadMoreResults: { type: Boolean }
  },
  emits: ["select", "load-more-results"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const autoSelection = computed(() => props.actionBefore ? AutoSelection.First : void 0);
    const conditionalOptions = computed(() => props.loading && !props.willLoadMoreResults ? [] : props.options);
    const noOptions = computed(() => {
      if (isSection(conditionalOptions.value)) {
        return conditionalOptions.value.every((section) => section.options.length === 0);
      }
      return conditionalOptions.value.length === 0;
    });
    const updateSelection = (newSelection) => {
      if (props.actionBefore && newSelection === props.actionBefore.content) {
        props.actionBefore.onAction && props.actionBefore.onAction();
        return;
      }
      if (props.allowMultiple) {
        if (props.selected.includes(newSelection)) {
          emits("select", props.selected.filter((option) => option !== newSelection));
        } else {
          emits("select", [...props.selected, newSelection]);
        }
      } else {
        emits("select", [newSelection]);
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2N), {
        "allow-multiple": _ctx.allowMultiple,
        "preferred-position": _ctx.preferredPosition,
        "will-load-more-options": _ctx.willLoadMoreResults,
        onScrolledToBottom: _cache[0] || (_cache[0] = ($event) => emits("load-more-results"))
      }, {
        activator: withCtx(() => [
          renderSlot(_ctx.$slots, "textField")
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2V), {
            "auto-selection": autoSelection.value,
            onSelect: updateSelection
          }, {
            default: withCtx(() => [
              _ctx.actionBefore ? (openBlock(), createBlock(unref(_sfc_main$2X), normalizeProps(mergeProps({ key: 0 }, _ctx.actionBefore)), null, 16)) : createCommentVNode("", true),
              unref(isSection)(conditionalOptions.value) && !noOptions.value ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(unref(styles$1E).SectionWrapper)
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(conditionalOptions.value, ({ options, title }) => {
                  return openBlock(), createElementBlock(Fragment, { key: title }, [
                    options.length > 0 ? (openBlock(), createBlock(unref(_sfc_main$2P), {
                      key: 0,
                      divider: false
                    }, {
                      title: withCtx(() => [
                        createVNode(unref(_sfc_main$2R), null, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(title), 1)
                          ]),
                          _: 2
                        }, 1024)
                      ]),
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(options, (option) => {
                          return openBlock(), createBlock(unref(_sfc_main$2W), mergeProps({
                            key: option.id || option.value
                          }, option, {
                            selected: _ctx.selected.includes(option.value),
                            "single-selection": !_ctx.allowMultiple
                          }), null, 16, ["selected", "single-selection"]);
                        }), 128))
                      ]),
                      _: 2
                    }, 1024)) : createCommentVNode("", true)
                  ], 64);
                }), 128))
              ], 2)) : !unref(isSection)(conditionalOptions.value) && !noOptions.value ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                _ctx.listTitle ? (openBlock(), createBlock(unref(_sfc_main$2P), {
                  key: 0,
                  divider: false
                }, {
                  title: withCtx(() => [
                    createVNode(unref(_sfc_main$2R), null, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(_ctx.listTitle), 1)
                      ]),
                      _: 1
                    })
                  ]),
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(conditionalOptions.value, (option) => {
                      return openBlock(), createBlock(unref(_sfc_main$2W), mergeProps({
                        key: option.id || option.value
                      }, option, {
                        selected: _ctx.selected.includes(option.value),
                        "single-selection": !_ctx.allowMultiple
                      }), null, 16, ["selected", "single-selection"]);
                    }), 128))
                  ]),
                  _: 1
                })) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(conditionalOptions.value, (option) => {
                  return openBlock(), createBlock(unref(_sfc_main$2W), mergeProps({
                    key: option.id || option.value
                  }, option, {
                    selected: _ctx.selected.includes(option.value),
                    "single-selection": !_ctx.allowMultiple
                  }), null, 16, ["selected", "single-selection"]);
                }), 128))
              ], 64)) : createCommentVNode("", true),
              _ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$2Q), {
                key: 3,
                "accessibility-label": unref(i18n).translate("Polaris.Autocomplete.spinnerAccessibilityLabel")
              }, null, 8, ["accessibility-label"])) : createCommentVNode("", true),
              unref(hasSlot)(unref(slots).emptyState) && _ctx.options.length === 0 && !_ctx.loading ? (openBlock(), createElementBlock("div", _hoisted_1$1q, [
                renderSlot(_ctx.$slots, "emptyState")
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          }, 8, ["auto-selection"])
        ]),
        _: 3
      }, 8, ["allow-multiple", "preferred-position", "will-load-more-options"]);
    };
  }
});
const Listbox = "Polaris-Combobox__Listbox";
const styles$1w = {
  Listbox
};
const _sfc_main$2N = /* @__PURE__ */ defineComponent({
  __name: "Combobox",
  props: {
    allowMultiple: { type: Boolean },
    preferredPosition: { default: "below" },
    willLoadMoreOptions: { type: Boolean },
    height: {}
  },
  emits: ["scrolled-to-bottom", "close"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const popoverRef = ref();
    const popoverActive = ref(false);
    const activeOptionId = ref();
    const textFieldLabelId = ref();
    const listboxId = ref();
    const textFieldFocused = ref(false);
    const shouldOpen = computed(() => !popoverActive.value);
    const popoverActiveWithChildren = computed(() => popoverActive.value && hasSlot(slots.default));
    const isWillLoadMoreOptions = computed(() => Boolean(props.willLoadMoreOptions));
    const setTextFieldFocused = (focused2) => {
      textFieldFocused.value = focused2;
    };
    const setTextFieldLabelId = (id) => {
      textFieldLabelId.value = id;
    };
    const setActiveOptionId = (id) => {
      activeOptionId.value = id;
    };
    const setListboxId = (id) => {
      listboxId.value = id;
    };
    const handleClose = () => {
      popoverActive.value = false;
      emits("close");
      activeOptionId.value = void 0;
    };
    const handleOpen = () => {
      popoverActive.value = true;
      activeOptionId.value = void 0;
    };
    const onOptionSelected = () => {
      var _a;
      if (!props.allowMultiple) {
        handleClose();
        return;
      }
      (_a = popoverRef.value) == null ? void 0 : _a.forceUpdatePosition();
    };
    const handleFocus = () => {
      if (shouldOpen.value) {
        handleOpen();
      }
    };
    const handleChange = () => {
      if (shouldOpen.value) {
        handleOpen();
      }
    };
    const handleBlur = () => {
      if (popoverActive.value) {
        handleClose();
      }
    };
    const onScrolledToBottom = () => {
      emits("scrolled-to-bottom");
    };
    provide("combobox-textfield", {
      activeOptionId,
      listboxId,
      expanded: popoverActive,
      setTextFieldFocused,
      setTextFieldLabelId,
      onTextFieldFocus: handleFocus,
      onTextFieldChange: handleChange,
      onTextFieldBlur: handleBlur
    });
    provide("combobox-listbox", {
      listboxId,
      textFieldLabelId,
      textFieldFocused,
      willLoadMoreOptions: isWillLoadMoreOptions,
      onOptionSelected,
      setActiveOptionId,
      setListboxId,
      onKeyToBottom: onScrolledToBottom
    });
    provide("combobox-listbox-option", {
      allowMultiple: props.allowMultiple
    });
    return (_ctx, _cache) => {
      const _component_Pane = resolveComponent("Pane");
      return openBlock(), createBlock(unref(_sfc_main$P), {
        ref_key: "popoverRef",
        ref: popoverRef,
        active: popoverActiveWithChildren.value,
        "autofocus-target": "none",
        "prevent-focus-on-close": "",
        "full-width": "",
        "prefer-input-activator": false,
        "preferred-position": _ctx.preferredPosition,
        onClose: handleClose
      }, {
        activator: withCtx(() => [
          renderSlot(_ctx.$slots, "activator")
        ]),
        default: withCtx(() => [
          unref(hasSlot)(unref(slots).default) ? (openBlock(), createBlock(_component_Pane, {
            key: 0,
            height: _ctx.height,
            onScrolledToBottom
          }, {
            default: withCtx(() => [
              createBaseVNode("div", {
                class: normalizeClass(unref(styles$1w).Listbox)
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 2)
            ]),
            _: 3
          }, 8, ["height"])) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["active", "preferred-position"]);
    };
  }
});
function labelId(id) {
  return `${id}Label`;
}
function useComboboxTextField() {
  const context = inject("combobox-textfield", void 0);
  if (!context) {
    throw new Error(
      "No Combobox was provided. Your component must be wrapped in a <Combobox> component."
    );
  }
  return context;
}
const _sfc_main$2M = /* @__PURE__ */ defineComponent({
  __name: "TextField",
  props: /* @__PURE__ */ mergeModels({
    prefix: {},
    suffix: {},
    verticalContent: {},
    placeholder: {},
    value: {},
    helpText: {},
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    disabled: { type: Boolean },
    clearButton: { type: Boolean },
    selectTextOnFocus: { type: Boolean },
    suggestion: {},
    readOnly: { type: Boolean },
    autoFocus: { type: Boolean },
    focused: { type: Boolean },
    multiline: { type: [Boolean, Number] },
    error: { type: [String, Array, Boolean] },
    type: { default: "text" },
    name: {},
    id: {},
    role: {},
    step: {},
    largeStep: {},
    autoComplete: {},
    max: {},
    maxLength: {},
    maxHeight: {},
    min: {},
    minLength: {},
    pattern: {},
    inputMode: {},
    spellCheck: { type: Boolean },
    ariaOwns: {},
    ariaExpanded: { type: Boolean },
    ariaControls: {},
    ariaActiveDescendant: {},
    ariaAutocomplete: { default: "list" },
    showCharacterCount: { type: Boolean },
    align: {},
    requiredIndicator: { type: Boolean },
    monospaced: { type: Boolean },
    variant: {},
    size: {},
    tone: {},
    autoSize: { type: Boolean },
    loading: { type: Boolean },
    readonly: { type: Boolean }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["clear-button-click", "input", "change", "spinner-change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const {
      activeOptionId,
      listboxId,
      expanded,
      setTextFieldFocused,
      setTextFieldLabelId,
      onTextFieldFocus,
      onTextFieldChange,
      onTextFieldBlur
    } = useComboboxTextField();
    const uniqueId = useId();
    const { hasSlot } = useHasSlot();
    const textFieldId = computed(() => props.id ?? uniqueId);
    const fieldLabelId = computed(() => labelId(String(props.id || uniqueId)));
    watch(
      () => fieldLabelId.value,
      (newVal) => {
        if (setTextFieldLabelId)
          setTextFieldLabelId(newVal);
      }
    );
    const handleFocus = (event) => {
      emits("focus", event);
      if (onTextFieldFocus)
        onTextFieldFocus();
      if (setTextFieldFocused)
        setTextFieldFocused(true);
    };
    const handleBlur = (event) => {
      emits("blur", event);
      if (onTextFieldBlur)
        onTextFieldBlur();
      if (setTextFieldFocused)
        setTextFieldFocused(false);
    };
    const handleChange = (value, id) => {
      emits("change", value, id);
      if (onTextFieldChange)
        onTextFieldChange(value);
    };
    const handleInput = (e, value) => {
      model.value = value;
      emits("input", e, value);
      if (onTextFieldChange)
        onTextFieldChange(value);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$9), mergeProps(props, {
        id: `${textFieldId.value}`,
        modelValue: model.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
        "aria-haspopup": "listbox",
        "aria-autocomplete": _ctx.ariaAutocomplete,
        "aria-active-descendant": unref(activeOptionId),
        "aria-controls": unref(listboxId),
        role: "combobox",
        "aria-expanded": unref(expanded),
        onFocus: handleFocus,
        onBlur: handleBlur,
        onChange: handleChange,
        onInput: handleInput
      }), createSlots({ _: 2 }, [
        unref(hasSlot)(unref(slots).label) || _ctx.label ? {
          name: "label",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        unref(hasSlot)(unref(slots).helpText) || _ctx.helpText ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).helpText) ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0,
        Boolean(unref(slots).connectedLeft) ? {
          name: "connectedLeft",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "connectedLeft")
          ]),
          key: "2"
        } : void 0,
        Boolean(unref(slots).connectedRight) ? {
          name: "connectedRight",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "connectedRight")
          ]),
          key: "3"
        } : void 0,
        unref(hasSlot)(unref(slots).prefix) || _ctx.prefix ? {
          name: "prefix",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).prefix) ? renderSlot(_ctx.$slots, "prefix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.prefix), 1)
            ], 64))
          ]),
          key: "4"
        } : void 0,
        unref(hasSlot)(unref(slots).suffix) || _ctx.suffix ? {
          name: "suffix",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).suffix) ? renderSlot(_ctx.$slots, "suffix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.suffix), 1)
            ], 64))
          ]),
          key: "5"
        } : void 0,
        unref(hasSlot)(unref(slots).verticalContent) || _ctx.verticalContent ? {
          name: "verticalContent",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).verticalContent) ? renderSlot(_ctx.$slots, "verticalContent", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.verticalContent), 1)
            ], 64))
          ]),
          key: "6"
        } : void 0
      ]), 1040, ["id", "modelValue", "aria-autocomplete", "aria-active-descendant", "aria-controls", "aria-expanded"]);
    };
  }
});
const Avatar = "Polaris-Avatar";
const imageHasLoaded = "Polaris-Avatar--imageHasLoaded";
const Text$2 = "Polaris-Avatar__Text";
const long = "Polaris-Avatar--long";
const hidden$3 = "Polaris-Avatar--hidden";
const sizeXs = "Polaris-Avatar--sizeXs";
const sizeSm = "Polaris-Avatar--sizeSm";
const sizeMd = "Polaris-Avatar--sizeMd";
const sizeLg = "Polaris-Avatar--sizeLg";
const sizeXl = "Polaris-Avatar--sizeXl";
const styleOne = "Polaris-Avatar--styleOne";
const styleTwo = "Polaris-Avatar--styleTwo";
const styleThree = "Polaris-Avatar--styleThree";
const styleFour = "Polaris-Avatar--styleFour";
const styleFive = "Polaris-Avatar--styleFive";
const styleSix = "Polaris-Avatar--styleSix";
const styleSeven = "Polaris-Avatar--styleSeven";
const Image$1 = "Polaris-Avatar__Image";
const Initials = "Polaris-Avatar__Initials";
const Svg$1 = "Polaris-Avatar__Svg";
const styles$1v = {
  Avatar,
  imageHasLoaded,
  Text: Text$2,
  long,
  hidden: hidden$3,
  sizeXs,
  sizeSm,
  sizeMd,
  sizeLg,
  sizeXl,
  styleOne,
  styleTwo,
  styleThree,
  styleFour,
  styleFive,
  styleSix,
  styleSeven,
  Image: Image$1,
  Initials,
  Svg: Svg$1
};
const STYLE_CLASSES = [
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven"
];
function xorHash(str) {
  let hash = 0;
  for (const char of str) {
    hash ^= char.charCodeAt(0);
  }
  return hash;
}
function styleClass(name) {
  return name ? STYLE_CLASSES[xorHash(name) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
}
const _hoisted_1$1p = ["aria-label", "role"];
const _hoisted_2$V = ["stroke-width"];
const _hoisted_3$L = ["stroke-width"];
const verticalOffset = "0.35em";
const _sfc_main$2L = /* @__PURE__ */ defineComponent({
  __name: "Avatar",
  props: {
    size: { default: "md" },
    name: {},
    initials: {},
    customer: { type: Boolean },
    source: {},
    accessibilityLabel: {}
  },
  emits: ["error"],
  setup(__props, { emit: __emit }) {
    const avatarStrokeWidth = {
      xs: "3",
      sm: "2.5",
      md: "2.5",
      lg: "2.5",
      xl: "2"
    };
    const props = __props;
    const emit = __emit;
    const i18n = useI18n();
    const status = ref(
      "PENDING"
      /* Pending */
    );
    const hasImage = computed(
      () => props.source && status.value !== "ERRORED"
      /* Errored */
    );
    const nameString = computed(() => props.name || props.initials);
    const className = computed(() => classNames(
      styles$1v.Avatar,
      props.size && styles$1v[variationName("size", props.size)],
      hasImage.value && status.value === "LOADED" && styles$1v.imageHasLoaded,
      !props.customer && !hasImage.value && styles$1v[variationName("style", styleClass(nameString.value))]
    ));
    const textClassName = computed(() => {
      var _a;
      return classNames(
        styles$1v.Text,
        (((_a = props.initials) == null ? void 0 : _a.length) || 0) > 2 && styles$1v.long
      );
    });
    const label = computed(() => {
      if (props.accessibilityLabel) {
        return props.accessibilityLabel;
      }
      if (props.name) {
        return props.name;
      }
      if (props.initials) {
        const splitInitials = props.initials.split("").join(" ");
        return i18n.translate("Polaris.Avatar.labelWithInitials", {
          initials: splitInitials
        });
      }
      return "Avatar";
    });
    const imageClassName = computed(() => classNames(
      styles$1v.Image,
      status.value !== "LOADED" && styles$1v.hidden
    ));
    const pathSize = computed(() => avatarStrokeWidth[props.size]);
    const handleLoad = () => {
      status.value = "LOADED";
    };
    const handleError = () => {
      status.value = "ERRORED";
      emit("error");
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        "aria-label": label.value,
        class: normalizeClass(className.value),
        role: label.value ? "img" : "presentation"
      }, [
        !hasImage.value ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(unref(styles$1v).Initials)
        }, [
          (openBlock(), createElementBlock("svg", {
            class: normalizeClass(unref(styles$1v).Svg),
            viewBox: "0 0 40 40"
          }, [
            _ctx.customer || !_ctx.initials ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createBaseVNode("path", {
                fill: "none",
                d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
                stroke: "currentColor",
                "stroke-width": pathSize.value
              }, null, 8, _hoisted_2$V),
              createBaseVNode("path", {
                fill: "none",
                d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": pathSize.value
              }, null, 8, _hoisted_3$L)
            ], 64)) : (openBlock(), createElementBlock("text", {
              key: 1,
              class: normalizeClass(textClassName.value),
              x: "50%",
              y: "50%",
              dy: verticalOffset,
              fill: "currentColor",
              "text-anchor": "middle"
            }, toDisplayString(_ctx.initials), 3))
          ], 2))
        ], 2)) : createCommentVNode("", true),
        _ctx.source && status.value !== "ERRORED" ? (openBlock(), createBlock(unref(_sfc_main$1J), {
          key: 1,
          class: normalizeClass(imageClassName.value),
          source: _ctx.source,
          alt: "",
          role: "presentation",
          onLoad: handleLoad,
          onError: handleError
        }, null, 8, ["class", "source"])) : createCommentVNode("", true)
      ], 10, _hoisted_1$1p);
    };
  }
});
const Backdrop$4 = "Polaris-Backdrop";
const transparent$1 = "Polaris-Backdrop--transparent";
const belowNavigation = "Polaris-Backdrop--belowNavigation";
const styles$1u = {
  Backdrop: Backdrop$4,
  transparent: transparent$1,
  belowNavigation
};
const _sfc_main$2K = /* @__PURE__ */ defineComponent({
  __name: "Backdrop",
  props: {
    belowNavigation: { type: Boolean },
    transparent: { type: Boolean }
  },
  emits: ["click", "touch-start", "closing"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const className = computed(() => {
      return classNames(
        styles$1u.Backdrop,
        props.belowNavigation && styles$1u.belowNavigation,
        props.transparent && styles$1u.transparent
      );
    });
    const handleMouseDown = () => {
      emits("closing", true);
    };
    const handleMouseUp = () => {
      emits("closing", false);
      emits("click");
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(unref(_sfc_main$A)),
        createBaseVNode("div", {
          class: normalizeClass(className.value),
          onClick: _cache[0] || (_cache[0] = ($event) => emits("click")),
          onTouchstart: _cache[1] || (_cache[1] = ($event) => emits("touch-start")),
          onMousedown: handleMouseDown,
          onMouseup: handleMouseUp
        }, null, 34)
      ], 64);
    };
  }
});
var ToneValue = /* @__PURE__ */ ((ToneValue2) => {
  ToneValue2["Info"] = "info";
  ToneValue2["Success"] = "success";
  ToneValue2["Warning"] = "warning";
  ToneValue2["Critical"] = "critical";
  ToneValue2["Attention"] = "attention";
  ToneValue2["New"] = "new";
  ToneValue2["InfoStrong"] = "info-strong";
  ToneValue2["SuccessStrong"] = "success-strong";
  ToneValue2["WarningStrong"] = "warning-strong";
  ToneValue2["CriticalStrong"] = "critical-strong";
  ToneValue2["AttentionStrong"] = "attention-strong";
  ToneValue2["ReadOnly"] = "read-only";
  ToneValue2["Enabled"] = "enabled";
  return ToneValue2;
})(ToneValue || {});
var ProgressValue = /* @__PURE__ */ ((ProgressValue2) => {
  ProgressValue2["Incomplete"] = "incomplete";
  ProgressValue2["PartiallyComplete"] = "partiallyComplete";
  ProgressValue2["Complete"] = "complete";
  return ProgressValue2;
})(ProgressValue || {});
function getDefaultAccessibilityLabel(progress, tone) {
  const i18n = useI18n();
  let progressLabel = "";
  let toneLabel = "";
  if (!progress && !tone) {
    return "";
  }
  switch (progress) {
    case ProgressValue.Incomplete:
      progressLabel = i18n.translate(
        "Polaris.Badge.PROGRESS_LABELS.incomplete"
      );
      break;
    case ProgressValue.PartiallyComplete:
      progressLabel = i18n.translate(
        "Polaris.Badge.PROGRESS_LABELS.partiallyComplete"
      );
      break;
    case ProgressValue.Complete:
      progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.complete");
      break;
  }
  switch (tone) {
    case ToneValue.Info:
    case ToneValue.InfoStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.info");
      break;
    case ToneValue.Success:
    case ToneValue.SuccessStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.success");
      break;
    case ToneValue.Warning:
    case ToneValue.WarningStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.warning");
      break;
    case ToneValue.Critical:
    case ToneValue.CriticalStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.critical");
      break;
    case ToneValue.Attention:
    case ToneValue.AttentionStrong:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.attention");
      break;
    case ToneValue.New:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.new");
      break;
    case ToneValue.ReadOnly:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.readOnly");
      break;
    case ToneValue.Enabled:
      toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.enabled");
      break;
  }
  if (!tone && progress) {
    return progressLabel;
  } else if (tone && !progress) {
    return toneLabel;
  } else {
    return i18n.translate("Polaris.Badge.progressAndTone", {
      progressLabel,
      toneLabel
    });
  }
}
const _hoisted_1$1o = { viewBox: "0 0 20 20" };
const _hoisted_2$U = /* @__PURE__ */ createBaseVNode("path", { d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10" }, null, -1);
const _hoisted_3$K = [
  _hoisted_2$U
];
function render$z(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1o, [..._hoisted_3$K]);
}
const CompleteSvg = { render: render$z };
const _hoisted_1$1n = { viewBox: "0 0 20 20" };
const _hoisted_2$T = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014M8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329M8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237"
}, null, -1);
const _hoisted_3$J = [
  _hoisted_2$T
];
function render$y(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1n, [..._hoisted_3$J]);
}
const PartiallySvg = { render: render$y };
const _hoisted_1$1m = { viewBox: "0 0 20 20" };
const _hoisted_2$S = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237M6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122"
}, null, -1);
const _hoisted_3$I = [
  _hoisted_2$S
];
function render$x(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1m, [..._hoisted_3$I]);
}
const IncompleteSvg = { render: render$x };
const Badge = "Polaris-Badge";
const toneSuccess$4 = "Polaris-Badge--toneSuccess";
const toneInfo$1 = "Polaris-Badge--toneInfo";
const toneAttention = "Polaris-Badge--toneAttention";
const toneWarning$2 = "Polaris-Badge--toneWarning";
const toneCritical$4 = "Polaris-Badge--toneCritical";
const toneNew = "Polaris-Badge--toneNew";
const toneMagic$6 = "Polaris-Badge--toneMagic";
const toneEnabled = "Polaris-Badge--toneEnabled";
const sizeLarge$9 = "Polaris-Badge--sizeLarge";
const withinFilter = "Polaris-Badge--withinFilter";
const Icon$8 = "Polaris-Badge__Icon";
const PipContainer = "Polaris-Badge__PipContainer";
const styles$1t = {
  Badge,
  toneSuccess: toneSuccess$4,
  "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
  toneInfo: toneInfo$1,
  "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
  toneAttention,
  "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
  toneWarning: toneWarning$2,
  "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
  toneCritical: toneCritical$4,
  "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
  toneNew,
  toneMagic: toneMagic$6,
  "toneRead-only": "Polaris-Badge__toneRead--only",
  toneEnabled,
  sizeLarge: sizeLarge$9,
  withinFilter,
  Icon: Icon$8,
  PipContainer
};
const DEFAULT_SIZE = "medium";
const _sfc_main$2J = /* @__PURE__ */ defineComponent({
  __name: "Badge",
  props: {
    tone: {},
    progress: {},
    icon: {},
    size: { default: DEFAULT_SIZE },
    toneAndProgressLabelOverride: {}
  },
  setup(__props) {
    const { hasSlot } = useHasSlot();
    const props = __props;
    const slots = useSlots();
    const withinFilter2 = inject("within-filter", false);
    const className = computed(() => {
      return classNames(
        styles$1t.Badge,
        props.tone && styles$1t[variationName("tone", props.tone)],
        props.size && props.size !== DEFAULT_SIZE && styles$1t[variationName("size", props.size)],
        withinFilter2 && styles$1t.withinFilter
      );
    });
    const accessibilityLabel = computed(() => {
      return props.toneAndProgressLabelOverride ? props.toneAndProgressLabelOverride : getDefaultAccessibilityLabel(props.progress, props.tone);
    });
    const progressIconMap = computed(() => {
      return {
        complete: CompleteSvg,
        partiallyComplete: PartiallySvg,
        incomplete: IncompleteSvg
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(className.value)
      }, [
        _ctx.progress && !_ctx.icon ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(unref(styles$1t).Icon)
        }, [
          createVNode(unref(_sfc_main$1K), {
            source: progressIconMap.value[_ctx.progress],
            "accessibility-label": accessibilityLabel.value
          }, null, 8, ["source", "accessibility-label"])
        ], 2)) : createCommentVNode("", true),
        Boolean(accessibilityLabel.value) ? (openBlock(), createBlock(unref(_sfc_main$f), {
          key: 1,
          as: "span",
          "visually-hidden": ""
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(accessibilityLabel.value), 1)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        _ctx.icon ? (openBlock(), createElementBlock("span", {
          key: 2,
          class: normalizeClass(unref(styles$1t).Icon)
        }, [
          createVNode(unref(_sfc_main$1K), { source: _ctx.icon }, null, 8, ["source"])
        ], 2)) : createCommentVNode("", true),
        unref(hasSlot)(unref(slots).default) ? (openBlock(), createBlock(unref(_sfc_main$f), {
          key: 3,
          as: "span",
          variant: "bodySm",
          "font-weight": _ctx.tone === "new" ? "medium" : void 0
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["font-weight"])) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const Banner = "Polaris-Banner";
const keyFocused = "Polaris-Banner--keyFocused";
const withinContentContainer = "Polaris-Banner--withinContentContainer";
const withinPage = "Polaris-Banner--withinPage";
const DismissIcon = "Polaris-Banner__DismissIcon";
const styles$1s = {
  Banner,
  keyFocused,
  withinContentContainer,
  withinPage,
  DismissIcon,
  "text-success-on-bg-fill": "Polaris-Banner--textSuccessOnBgFill",
  "text-success": "Polaris-Banner__text--success",
  "text-warning-on-bg-fill": "Polaris-Banner--textWarningOnBgFill",
  "text-warning": "Polaris-Banner__text--warning",
  "text-critical-on-bg-fill": "Polaris-Banner--textCriticalOnBgFill",
  "text-critical": "Polaris-Banner__text--critical",
  "text-info-on-bg-fill": "Polaris-Banner--textInfoOnBgFill",
  "text-info": "Polaris-Banner__text--info",
  "icon-secondary": "Polaris-Banner__icon--secondary"
};
function useWithinContentContext() {
  const context = inject("within-content-context", false);
  return context;
}
const _hoisted_1$1l = ["role", "aria-live"];
const _sfc_main$2I = /* @__PURE__ */ defineComponent({
  __name: "Banner",
  props: {
    title: {},
    icon: {},
    hideIcon: { type: Boolean },
    tone: { default: "info" },
    action: {},
    secondaryAction: {},
    stopAnnouncements: { type: Boolean }
  },
  setup(__props, { expose: __expose }) {
    const props = __props;
    const currentInstance = getCurrentInstance();
    __expose({
      focus: () => {
        if (wrapperRef.value) {
          wrapperRef.value.focus();
          shouldShowFocus.value = true;
        }
      }
    });
    const withinContentContainer2 = useWithinContentContext();
    const wrapperRef = ref(null);
    const shouldShowFocus = ref(false);
    const listeners = computed(() => {
      var _a;
      const eventBindings = {};
      if ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onDismiss) {
        eventBindings["dismiss"] = currentInstance.vnode.props.onDismiss;
      }
      return eventBindings;
    });
    const handleKeyUp = (event) => {
      if (event.target === wrapperRef.value) {
        shouldShowFocus.value = true;
      }
    };
    const handleBlur = () => shouldShowFocus.value = false;
    const handleMouseUp = (event) => {
      const target = event.currentTarget;
      target.blur();
      shouldShowFocus.value = false;
    };
    const className = computed(() => classNames(
      styles$1s.Banner,
      shouldShowFocus.value && styles$1s.keyFocused,
      withinContentContainer2 ? styles$1s.withinContentContainer : styles$1s.withinPage
    ));
    provide("banner-context", false);
    return (_ctx, _cache) => {
      const _component_BannerLayout = resolveComponent("BannerLayout");
      return openBlock(), createElementBlock("div", {
        ref_key: "wrapperRef",
        ref: wrapperRef,
        class: normalizeClass(className.value),
        tabIndex: 0,
        role: _ctx.tone === "warning" || _ctx.tone === "critical" ? "alert" : "status",
        "aria-live": _ctx.stopAnnouncements ? "off" : "polite",
        onMouseup: handleMouseUp,
        onKeyup: handleKeyUp,
        onBlur: handleBlur
      }, [
        createVNode(_component_BannerLayout, mergeProps({ ...props }, toHandlers(listeners.value)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16)
      ], 42, _hoisted_1$1l);
    };
  }
});
const _hoisted_1$1k = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$R = /* @__PURE__ */ createBaseVNode("path", { d: "M12.72 13.78a.75.75 0 1 0 1.06-1.06L11.06 10l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 8.94 7.28 6.22a.75.75 0 0 0-1.06 1.06L8.94 10l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 11.06z" }, null, -1);
const _hoisted_3$H = [
  _hoisted_2$R
];
function render$w(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1k, [..._hoisted_3$H]);
}
const XIcon = { render: render$w };
const _hoisted_1$1j = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$Q = /* @__PURE__ */ createBaseVNode("path", { d: "M10 6a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 10 6M11 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0" }, null, -1);
const _hoisted_3$G = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M11.237 3.177a1.75 1.75 0 0 0-2.474 0L3.177 8.762a1.75 1.75 0 0 0 0 2.475l5.586 5.586a1.75 1.75 0 0 0 2.474 0l5.586-5.586a1.75 1.75 0 0 0 0-2.475zm-1.414 1.06a.25.25 0 0 1 .354 0l5.586 5.586a.25.25 0 0 1 0 .354l-5.586 5.585a.25.25 0 0 1-.354 0l-5.586-5.585a.25.25 0 0 1 0-.354z"
}, null, -1);
const _hoisted_4$l = [
  _hoisted_2$Q,
  _hoisted_3$G
];
function render$v(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1j, [..._hoisted_4$l]);
}
const AlertDiamondIcon = { render: render$v };
const _hoisted_1$1i = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$P = /* @__PURE__ */ createBaseVNode("path", { d: "M10 14a.75.75 0 0 1-.75-.75v-3.5a.75.75 0 0 1 1.5 0v3.5A.75.75 0 0 1 10 14M9 7a1 1 0 1 1 2 0 1 1 0 0 1-2 0" }, null, -1);
const _hoisted_3$F = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0m-1.5 0a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"
}, null, -1);
const _hoisted_4$k = [
  _hoisted_2$P,
  _hoisted_3$F
];
function render$u(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1i, [..._hoisted_4$k]);
}
const InfoIcon = { render: render$u };
const _hoisted_1$1h = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$O = /* @__PURE__ */ createBaseVNode("path", { d: "M10 6.75a.75.75 0 0 1 .75.75V11a.75.75 0 1 1-1.5 0V7.5a.75.75 0 0 1 .75-.75M11 13.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" }, null, -1);
const _hoisted_3$E = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M10 3.5c-1.045 0-1.784.702-2.152 1.447a449.26 449.26 0 0 1-2.005 3.847l-.028.052a403.426 403.426 0 0 0-2.008 3.856c-.372.752-.478 1.75.093 2.614.57.863 1.542 1.184 2.464 1.184h7.272c.922 0 1.895-.32 2.464-1.184.57-.864.465-1.862.093-2.614-.21-.424-1.113-2.147-2.004-3.847l-.032-.061a429.497 429.497 0 0 1-2.005-3.847C11.784 4.202 11.045 3.5 10 3.5m-.808 2.112c.404-.816 1.212-.816 1.616 0 .202.409 1.112 2.145 2.022 3.88a418.904 418.904 0 0 1 2.018 3.875c.404.817 0 1.633-1.212 1.633H6.364c-1.212 0-1.617-.816-1.212-1.633.202-.408 1.113-2.147 2.023-3.883a421.932 421.932 0 0 0 2.017-3.872"
}, null, -1);
const _hoisted_4$j = [
  _hoisted_2$O,
  _hoisted_3$E
];
function render$t(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1h, [..._hoisted_4$j]);
}
const AlertTriangleIcon = { render: render$t };
const bannerAttributes = {
  success: {
    withinPage: {
      background: "bg-fill-success",
      text: "text-success-on-bg-fill",
      icon: "text-success-on-bg-fill"
    },
    withinContentContainer: {
      background: "bg-surface-success",
      text: "text-success",
      icon: "text-success"
    },
    icon: CheckIcon
  },
  warning: {
    withinPage: {
      background: "bg-fill-warning",
      text: "text-warning-on-bg-fill",
      icon: "text-warning-on-bg-fill"
    },
    withinContentContainer: {
      background: "bg-surface-warning",
      text: "text-warning",
      icon: "text-warning"
    },
    icon: AlertTriangleIcon
  },
  critical: {
    withinPage: {
      background: "bg-fill-critical",
      text: "text-critical-on-bg-fill",
      icon: "text-critical-on-bg-fill"
    },
    withinContentContainer: {
      background: "bg-surface-critical",
      text: "text-critical",
      icon: "text-critical"
    },
    icon: AlertDiamondIcon
  },
  info: {
    withinPage: {
      background: "bg-fill-info",
      text: "text-info-on-bg-fill",
      icon: "text-info-on-bg-fill"
    },
    withinContentContainer: {
      background: "bg-surface-info",
      text: "text-info",
      icon: "text-info"
    },
    icon: InfoIcon
  }
};
const _sfc_main$2H = /* @__PURE__ */ defineComponent({
  __name: "BannerLayout",
  props: {
    title: {},
    icon: {},
    hideIcon: { type: Boolean },
    tone: { default: "info" },
    action: {},
    secondaryAction: {},
    stopAnnouncements: { type: Boolean }
  },
  emits: ["dismiss"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const currentInstance = getCurrentInstance();
    const withinContentContainer2 = useWithinContentContext();
    const isInlineIconBanner = computed(() => !props.title && !withinContentContainer2);
    const bannerTone = computed(
      () => Object.keys(bannerAttributes).includes(props.tone) ? props.tone : "info"
    );
    const bannerColors = computed(
      () => bannerAttributes[bannerTone.value][withinContentContainer2 ? "withinContentContainer" : "withinPage"]
    );
    const sharedBannerProps = computed(() => {
      return {
        backgroundColor: bannerColors.value.background,
        textColor: bannerColors.value.text
      };
    });
    const bannerTitle = computed(
      () => props.title ? () => h(
        resolveComponent("Text"),
        { variant: "headingSm", as: "h2", breakWord: true },
        () => props.title
      ) : null
    );
    const bannerIcon = computed(
      () => !props.hideIcon ? () => h(
        "span",
        { class: styles$1s[bannerColors.value.icon] },
        h(resolveComponent("Icon"), { source: props.icon || bannerAttributes[bannerTone.value].icon })
      ) : null
    );
    const actionButtons = computed(
      () => props.action || props.secondaryAction ? () => h(
        resolveComponent("ButtonGroup"),
        () => [
          props.action && h(
            resolveComponent("Button"),
            { onClick: props.action.onAction, props: { ...props.action } },
            () => {
              var _a;
              return (_a = props.action) == null ? void 0 : _a.content;
            }
          ),
          props.secondaryAction && h(
            resolveComponent("Button"),
            { onClick: props.secondaryAction.onAction, props: { ...props.secondaryAction } },
            () => {
              var _a;
              return (_a = props.secondaryAction) == null ? void 0 : _a.content;
            }
          )
        ]
      ) : null
    );
    const hasDismiss2 = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onDismiss);
    });
    const dismissButton = computed(
      () => hasDismiss2.value ? () => h(
        resolveComponent("Button"),
        {
          variant: "tertiary",
          icon: h(
            "span",
            { class: styles$1s[isInlineIconBanner.value ? "icon-secondary" : bannerColors.value.icon] },
            h(resolveComponent("Icon"), { source: XIcon })
          ),
          onClick: () => emits("dismiss"),
          accessibilityLabel: i18n.translate("Polaris.Banner.dismissButton")
        }
      ) : null
    );
    return (_ctx, _cache) => {
      const _component_WithinContentContainerBanner = resolveComponent("WithinContentContainerBanner");
      const _component_InlineIconBanner = resolveComponent("InlineIconBanner");
      const _component_DefaultBanner = resolveComponent("DefaultBanner");
      return unref(withinContentContainer2) ? (openBlock(), createBlock(_component_WithinContentContainerBanner, mergeProps({ key: 0 }, { ...sharedBannerProps.value }, {
        bannerTitle: bannerTitle.value,
        bannerIcon: bannerIcon.value,
        actionButtons: actionButtons.value,
        dismissButton: dismissButton.value
      }), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["bannerTitle", "bannerIcon", "actionButtons", "dismissButton"])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        isInlineIconBanner.value ? (openBlock(), createBlock(_component_InlineIconBanner, mergeProps({ key: 0 }, { ...sharedBannerProps.value }, {
          bannerIcon: bannerIcon.value,
          actionButtons: actionButtons.value,
          dismissButton: dismissButton.value
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["bannerIcon", "actionButtons", "dismissButton"])) : (openBlock(), createBlock(_component_DefaultBanner, mergeProps({ key: 1 }, { ...sharedBannerProps.value }, {
          bannerTitle: bannerTitle.value,
          bannerIcon: bannerIcon.value,
          actionButtons: actionButtons.value,
          dismissButton: dismissButton.value
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["bannerTitle", "bannerIcon", "actionButtons", "dismissButton"]))
      ], 64));
    };
  }
});
const _sfc_main$2G = /* @__PURE__ */ defineComponent({
  __name: "DefaultBanner",
  props: {
    backgroundColor: {},
    textColor: {},
    bannerIcon: { type: Function },
    bannerTitle: { type: Function },
    actionButtons: { type: Function },
    dismissButton: { type: Function }
  },
  setup(__props) {
    const slots = useSlots();
    const props = __props;
    const breakpoints2 = useBreakpoints();
    const hasContent = computed(() => slots.default || props.actionButtons);
    return (_ctx, _cache) => {
      const _component_InlineStack = resolveComponent("InlineStack");
      const _component_Box = resolveComponent("Box");
      const _component_BlockStack = resolveComponent("BlockStack");
      return openBlock(), createBlock(_component_Box, { width: "100%" }, {
        default: withCtx(() => [
          createVNode(_component_BlockStack, { align: "space-between" }, {
            default: withCtx(() => [
              createVNode(_component_Box, {
                background: _ctx.backgroundColor,
                color: _ctx.textColor,
                borderStartStartRadius: unref(breakpoints2).smUp ? "300" : void 0,
                borderStartEndRadius: unref(breakpoints2).smUp ? "300" : void 0,
                borderEndStartRadius: !hasContent.value && unref(breakpoints2).smUp ? "300" : void 0,
                borderEndEndRadius: !hasContent.value && unref(breakpoints2).smUp ? "300" : void 0,
                padding: 300
              }, {
                default: withCtx(() => [
                  createVNode(_component_InlineStack, {
                    align: "space-between",
                    blockAlign: "center",
                    gap: 200,
                    wrap: false
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_InlineStack, {
                        gap: 100,
                        wrap: false
                      }, {
                        default: withCtx(() => [
                          _ctx.bannerIcon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.bannerIcon), { key: 0 })) : createCommentVNode("", true),
                          _ctx.bannerTitle ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.bannerTitle), { key: 1 })) : createCommentVNode("", true)
                        ]),
                        _: 1
                      }),
                      _ctx.dismissButton ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.dismissButton), { key: 0 })) : createCommentVNode("", true)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["background", "color", "borderStartStartRadius", "borderStartEndRadius", "borderEndStartRadius", "borderEndEndRadius"]),
              Boolean(hasContent.value) ? (openBlock(), createBlock(_component_Box, {
                key: 0,
                padding: { xs: "300", md: "400" },
                paddingBlockStart: 300
              }, {
                default: withCtx(() => [
                  createVNode(_component_BlockStack, { gap: 200 }, {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "default"),
                      _ctx.actionButtons ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.actionButtons), { key: 0 })) : createCommentVNode("", true)
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              })) : createCommentVNode("", true)
            ]),
            _: 3
          })
        ]),
        _: 3
      });
    };
  }
});
const _sfc_main$2F = /* @__PURE__ */ defineComponent({
  __name: "InlineIconBanner",
  props: {
    backgroundColor: {},
    textColor: {},
    bannerIcon: { type: Function },
    actionButtons: { type: Function },
    dismissButton: { type: Function }
  },
  setup(__props) {
    const blockAlign = ref("center");
    const contentNode = ref(null);
    const iconNode = ref(null);
    const dismissIconNode = ref(null);
    const handleResize = () => {
      var _a, _b, _c;
      const contentHeight = (_a = contentNode.value) == null ? void 0 : _a.offsetHeight;
      const iconBoxHeight = ((_b = iconNode.value) == null ? void 0 : _b.offsetHeight) || ((_c = dismissIconNode.value) == null ? void 0 : _c.offsetHeight);
      if (!contentHeight || !iconBoxHeight)
        return;
      contentHeight > iconBoxHeight ? blockAlign.value = "start" : blockAlign.value = "center";
    };
    onMounted(() => {
      handleResize();
      watch(handleResize, () => handleResize());
      window.addEventListener("resize", handleResize);
    });
    onBeforeUnmount(() => {
      window.removeEventListener("resize", handleResize);
    });
    return (_ctx, _cache) => {
      const _component_Box = resolveComponent("Box");
      const _component_BlockStack = resolveComponent("BlockStack");
      const _component_InlineStack = resolveComponent("InlineStack");
      return openBlock(), createBlock(_component_Box, {
        width: "100%",
        borderRadius: "300",
        padding: 300
      }, {
        default: withCtx(() => [
          createVNode(_component_InlineStack, {
            align: "space-between",
            blockAlign: blockAlign.value,
            wrap: false
          }, {
            default: withCtx(() => [
              createVNode(_component_Box, { width: "100%" }, {
                default: withCtx(() => [
                  createVNode(_component_InlineStack, {
                    gap: 200,
                    wrap: false,
                    blockAlign: blockAlign.value
                  }, {
                    default: withCtx(() => [
                      _ctx.bannerIcon ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        ref_key: "iconNode",
                        ref: iconNode
                      }, [
                        createVNode(_component_Box, {
                          borderRadius: "200",
                          background: _ctx.backgroundColor,
                          padding: 100
                        }, {
                          default: withCtx(() => [
                            (openBlock(), createBlock(resolveDynamicComponent(_ctx.bannerIcon)))
                          ]),
                          _: 1
                        }, 8, ["background"])
                      ], 512)) : createCommentVNode("", true),
                      createVNode(_component_Box, {
                        ref_key: "contentNode",
                        ref: contentNode,
                        width: "100%"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_BlockStack, { gap: 200 }, {
                            default: withCtx(() => [
                              renderSlot(_ctx.$slots, "default"),
                              _ctx.actionButtons ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.actionButtons), { key: 0 })) : createCommentVNode("", true)
                            ]),
                            _: 3
                          })
                        ]),
                        _: 3
                      }, 512)
                    ]),
                    _: 3
                  }, 8, ["blockAlign"])
                ]),
                _: 3
              }),
              createBaseVNode("div", {
                ref_key: "dismissIconNode",
                ref: dismissIconNode,
                class: normalizeClass(unref(styles$1s).DismissIcon)
              }, [
                _ctx.dismissButton ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.dismissButton), { key: 0 })) : createCommentVNode("", true)
              ], 2)
            ]),
            _: 3
          }, 8, ["blockAlign"])
        ]),
        _: 3
      });
    };
  }
});
const _sfc_main$2E = /* @__PURE__ */ defineComponent({
  __name: "WithinContentContainerBanner",
  props: {
    backgroundColor: {},
    textColor: {},
    bannerTitle: { type: Function },
    bannerIcon: { type: Function },
    actionButtons: { type: Function },
    dismissButton: { type: Function }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_BlockStack = resolveComponent("BlockStack");
      const _component_Box = resolveComponent("Box");
      const _component_InlineStack = resolveComponent("InlineStack");
      return openBlock(), createBlock(_component_Box, {
        width: "100%",
        borderRadius: "200",
        background: _ctx.backgroundColor,
        padding: 200,
        color: _ctx.textColor
      }, {
        default: withCtx(() => [
          createVNode(_component_InlineStack, {
            align: "space-between",
            blockAlign: "start",
            wrap: false,
            gap: 200
          }, {
            default: withCtx(() => [
              createVNode(_component_InlineStack, {
                gap: 150,
                wrap: false
              }, {
                default: withCtx(() => [
                  _ctx.bannerIcon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.bannerIcon), { key: 0 })) : createCommentVNode("", true),
                  createVNode(_component_Box, { width: "100%" }, {
                    default: withCtx(() => [
                      createVNode(_component_BlockStack, { gap: 200 }, {
                        default: withCtx(() => [
                          createVNode(_component_BlockStack, { gap: 50 }, {
                            default: withCtx(() => [
                              _ctx.bannerTitle ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.bannerTitle), { key: 0 })) : createCommentVNode("", true),
                              renderSlot(_ctx.$slots, "default")
                            ]),
                            _: 3
                          }),
                          _ctx.actionButtons ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.actionButtons), { key: 0 })) : createCommentVNode("", true)
                        ]),
                        _: 3
                      })
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              }),
              _ctx.dismissButton ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.dismissButton), { key: 0 })) : createCommentVNode("", true)
            ]),
            _: 3
          })
        ]),
        _: 3
      }, 8, ["background", "color"]);
    };
  }
});
const Bleed = "Polaris-Bleed";
const styles$1r = {
  Bleed
};
const _hoisted_1$1g = ["className"];
const _sfc_main$2D = /* @__PURE__ */ defineComponent({
  __name: "Bleed",
  props: {
    marginInline: {},
    marginBlock: {},
    marginBlockStart: {},
    marginBlockEnd: {},
    marginInlineStart: {},
    marginInlineEnd: {}
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => {
      return classNames(
        styles$1r.Bleed
      );
    });
    const style = computed(() => {
      return {
        ...getResponsiveProps(
          "bleed",
          "margin-block-start",
          "space",
          negativeMarginBlockStart
        ),
        ...getResponsiveProps(
          "bleed",
          "margin-block-end",
          "space",
          negativeMarginBlockEnd
        ),
        ...getResponsiveProps(
          "bleed",
          "margin-inline-start",
          "space",
          negativeMarginInlineStart
        ),
        ...getResponsiveProps(
          "bleed",
          "margin-inline-end",
          "space",
          negativeMarginInlineEnd
        )
      };
    });
    const getNegativeMargins = (direction) => {
      const xAxis = ["marginInlineStart", "marginInlineEnd"];
      const yAxis = ["marginBlockStart", "marginBlockEnd"];
      const directionValues = {
        marginBlockStart: props.marginBlockStart,
        marginBlockEnd: props.marginBlockEnd,
        marginInlineStart: props.marginInlineStart,
        marginInlineEnd: props.marginInlineEnd,
        marginInline: props.marginInline,
        marginBlock: props.marginBlock
      };
      if (directionValues[direction]) {
        return directionValues[direction];
      } else if (xAxis.includes(direction) && props.marginInline) {
        return directionValues.marginInline;
      } else if (yAxis.includes(direction) && props.marginBlock) {
        return directionValues.marginBlock;
      }
    };
    const negativeMarginBlockStart = getNegativeMargins("marginBlockStart");
    const negativeMarginBlockEnd = getNegativeMargins("marginBlockEnd");
    const negativeMarginInlineStart = getNegativeMargins("marginInlineStart");
    const negativeMarginInlineEnd = getNegativeMargins("marginInlineEnd");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        className: className.value,
        style: normalizeStyle(unref(sanitizeCustomProperties)(style.value))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 12, _hoisted_1$1g);
    };
  }
});
const BlockStack = "Polaris-BlockStack";
const listReset$1 = "Polaris-BlockStack--listReset";
const fieldsetReset = "Polaris-BlockStack--fieldsetReset";
const styles$1q = {
  BlockStack,
  listReset: listReset$1,
  fieldsetReset
};
const _sfc_main$2C = /* @__PURE__ */ defineComponent({
  __name: "BlockStack",
  props: {
    as: { default: "div" },
    align: {},
    inlineAlign: {},
    gap: {},
    id: {},
    reverseOrder: { type: Boolean, default: false },
    role: {}
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => {
      return {
        "--pc-block-stack-align": props.align ? `${props.align}` : null,
        "--pc-block-stack-inline-align": props.inlineAlign ? `${props.inlineAlign}` : null,
        "--pc-block-stack-order": props.reverseOrder ? "column-reverse" : "column",
        ...getResponsiveProps("block-stack", "gap", "space", props.gap)
      };
    });
    const className = computed(() => {
      return classNames(
        styles$1q.BlockStack,
        (props.as === "ul" || props.as === "ol") && styles$1q.listReset,
        props.as === "fieldset" && styles$1q.fieldsetReset
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        class: normalizeClass(className.value),
        style: normalizeStyle(unref(sanitizeCustomProperties)(style.value))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
const listReset = "Polaris-Box--listReset";
const Box = "Polaris-Box";
const visuallyHidden$1 = "Polaris-Box--visuallyHidden";
const printHidden = "Polaris-Box--printHidden";
const styles$1p = {
  listReset,
  Box,
  visuallyHidden: visuallyHidden$1,
  printHidden
};
const _sfc_main$2B = /* @__PURE__ */ defineComponent({
  __name: "Box",
  props: {
    as: { default: "div" },
    background: {},
    borderColor: {},
    borderStyle: {},
    borderRadius: {},
    borderEndStartRadius: {},
    borderEndEndRadius: {},
    borderStartStartRadius: {},
    borderStartEndRadius: {},
    borderWidth: {},
    borderBlockStartWidth: {},
    borderBlockEndWidth: {},
    borderInlineStartWidth: {},
    borderInlineEndWidth: {},
    color: {},
    minHeight: {},
    minWidth: {},
    maxWidth: {},
    overflowX: {},
    overflowY: {},
    padding: {},
    paddingBlock: {},
    paddingBlockStart: {},
    paddingBlockEnd: {},
    paddingInline: {},
    paddingInlineStart: {},
    paddingInlineEnd: {},
    role: {},
    shadow: {},
    width: {},
    position: {},
    insetBlockStart: {},
    insetBlockEnd: {},
    insetInlineStart: {},
    insetInlineEnd: {},
    opacity: {},
    outlineColor: {},
    outlineStyle: {},
    outlineWidth: {},
    printHidden: { type: Boolean },
    visuallyHidden: { type: Boolean },
    zIndex: {}
  },
  setup(__props) {
    const props = __props;
    const borderStyleValue = computed(() => props.borderStyle ? props.borderStyle : props.borderColor || props.borderWidth || props.borderBlockStartWidth || props.borderBlockEndWidth || props.borderInlineStartWidth || props.borderInlineEndWidth ? "solid" : void 0);
    const outlineStyleValue = computed(() => props.outlineStyle ? props.outlineStyle : props.outlineColor || props.outlineWidth ? "solid" : void 0);
    const style = computed(() => ({
      "--pc-box-color": props.color ? `var(--p-color-${props.color})` : void 0,
      "--pc-box-background": props.background ? `var(--p-color-${props.background})` : void 0,
      // eslint-disable-next-line no-nested-ternary
      "--pc-box-border-color": props.borderColor ? props.borderColor === "transparent" ? "transparent" : `var(--p-color-${props.borderColor})` : void 0,
      "--pc-box-border-style": borderStyleValue.value,
      "--pc-box-border-radius": props.borderRadius ? `var(--p-border-radius-${props.borderRadius})` : void 0,
      "--pc-box-border-end-start-radius": props.borderEndStartRadius ? `var(--p-border-radius-${props.borderEndStartRadius})` : void 0,
      "--pc-box-border-end-end-radius": props.borderEndEndRadius ? `var(--p-border-radius-${props.borderEndEndRadius})` : void 0,
      "--pc-box-border-start-start-radius": props.borderStartStartRadius ? `var(--p-border-radius-${props.borderStartStartRadius})` : void 0,
      "--pc-box-border-start-end-radius": props.borderStartEndRadius ? `var(--p-border-radius-${props.borderStartEndRadius})` : void 0,
      "--pc-box-border-width": props.borderWidth ? `var(--p-border-width-${props.borderWidth})` : void 0,
      "--pc-box-border-block-start-width": props.borderBlockStartWidth ? `var(--p-border-width-${props.borderBlockStartWidth})` : void 0,
      "--pc-box-border-block-end-width": props.borderBlockEndWidth ? `var(--p-border-width-${props.borderBlockEndWidth})` : void 0,
      "--pc-box-border-inline-start-width": props.borderInlineStartWidth ? `var(--p-border-width-${props.borderInlineStartWidth})` : void 0,
      "--pc-box-border-inline-end-width": props.borderInlineEndWidth ? `var(--p-border-width-${props.borderInlineEndWidth})` : void 0,
      "--pc-box-min-height": props.minHeight,
      "--pc-box-min-width": props.minWidth,
      "--pc-box-max-width": props.maxWidth,
      "--pc-box-outline-color": props.outlineColor ? `var(--p-color-${props.outlineColor})` : void 0,
      "--pc-box-outline-style": outlineStyleValue.value,
      "--pc-box-outline-width": props.outlineWidth ? `var(--p-border-width-${props.outlineWidth})` : void 0,
      "--pc-box-overflow-x": props.overflowX,
      "--pc-box-overflow-y": props.overflowY,
      ...getResponsiveProps(
        "box",
        "padding-block-start",
        "space",
        props.paddingBlockStart || props.paddingBlock || props.padding
      ),
      ...getResponsiveProps(
        "box",
        "padding-block-end",
        "space",
        props.paddingBlockEnd || props.paddingBlock || props.padding
      ),
      ...getResponsiveProps(
        "box",
        "padding-inline-start",
        "space",
        props.paddingInlineStart || props.paddingInline || props.padding
      ),
      ...getResponsiveProps(
        "box",
        "padding-inline-end",
        "space",
        props.paddingInlineEnd || props.paddingInline || props.padding
      ),
      "--pc-box-shadow": props.shadow ? `var(--p-shadow-${props.shadow})` : void 0,
      "--pc-box-width": props.width,
      position: props.position,
      "--pc-box-inset-block-start": props.insetBlockStart ? `var(--p-space-${props.insetBlockStart})` : void 0,
      "--pc-box-inset-block-end": props.insetBlockEnd ? `var(--p-space-${props.insetBlockEnd})` : void 0,
      "--pc-box-inset-inline-start": props.insetInlineStart ? `var(--p-space-${props.insetInlineStart})` : void 0,
      "--pc-box-inset-inline-end": props.insetInlineEnd ? `var(--p-space-${props.insetInlineEnd})` : void 0,
      zIndex: props.zIndex,
      opacity: props.opacity
    }));
    const className = computed(() => {
      return classNames(
        styles$1p.Box,
        props.visuallyHidden && styles$1p.visuallyHidden,
        props.printHidden && styles$1p.printHidden,
        props.as === "ul" && styles$1p.listReset
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        class: normalizeClass(className.value),
        style: normalizeStyle(unref(sanitizeCustomProperties)(style.value))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
const _hoisted_1$1f = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$N = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M16.5 10a.75.75 0 0 1-.75.75H6.06l2.72 2.72a.75.75 0 0 1-1.06 1.06l-4-4a.75.75 0 0 1 0-1.06l4-4a.75.75 0 1 1 1.06 1.06L6.06 9.25h9.69a.75.75 0 0 1 .75.75"
}, null, -1);
const _hoisted_3$D = [
  _hoisted_2$N
];
function render$s(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1f, [..._hoisted_3$D]);
}
const ArrowLeftIcon = { render: render$s };
const _sfc_main$2A = /* @__PURE__ */ defineComponent({
  __name: "Breadcrumbs",
  props: {
    backAction: {}
  },
  setup(__props) {
    const props = __props;
    const url = computed(
      () => "url" in props.backAction ? props.backAction.url : void 0
    );
    const callbackOnAction = computed(
      () => "onAction" in props.backAction ? props.backAction.onAction : void 0
    );
    return (_ctx, _cache) => {
      const _component_Button = resolveComponent("Button");
      return openBlock(), createBlock(_component_Button, {
        key: _ctx.backAction.content,
        url: url.value,
        icon: unref(ArrowLeftIcon),
        accessibilityLabel: _ctx.backAction.accessibilityLabel ?? _ctx.backAction.content,
        onClick: callbackOnAction.value,
        onPointerdown: unref(handleMouseUpByBlurring)
      }, null, 8, ["url", "icon", "accessibilityLabel", "onClick", "onPointerdown"]);
    };
  }
});
const _hoisted_1$1e = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$M = /* @__PURE__ */ createBaseVNode("path", { d: "M6 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M11.5 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0M17 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" }, null, -1);
const _hoisted_3$C = [
  _hoisted_2$M
];
function render$r(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1e, [..._hoisted_3$C]);
}
const MenuHorizontalIcon = { render: render$r };
const BulkActionsOuterLayout = "Polaris-BulkActions__BulkActionsOuterLayout";
const BulkActionsSelectAllWrapper = "Polaris-BulkActions__BulkActionsSelectAllWrapper";
const BulkActionsPromotedActionsWrapper = "Polaris-BulkActions__BulkActionsPromotedActionsWrapper";
const BulkActionsLayout = "Polaris-BulkActions__BulkActionsLayout";
const BulkActionsMeasurerLayout = "Polaris-BulkActions__BulkActionsMeasurerLayout";
const ButtonGroupWrapper = "Polaris-BulkActions__ButtonGroupWrapper";
const BulkActionButton = "Polaris-BulkActions__BulkActionButton";
const disabled$b = "Polaris-BulkActions--disabled";
const PaginatedSelectAll$1 = "Polaris-BulkActions__PaginatedSelectAll";
const AllAction$1 = "Polaris-BulkActions__AllAction";
const styles$1o = {
  BulkActionsOuterLayout,
  BulkActionsSelectAllWrapper,
  BulkActionsPromotedActionsWrapper,
  BulkActionsLayout,
  "BulkActionsLayout--measuring": "Polaris-BulkActions--bulkActionsLayoutMeasuring",
  BulkActionsMeasurerLayout,
  ButtonGroupWrapper,
  "Group-measuring": "Polaris-BulkActions__Group--measuring",
  BulkActionButton,
  disabled: disabled$b,
  PaginatedSelectAll: PaginatedSelectAll$1,
  AllAction: AllAction$1
};
const _sfc_main$2z = /* @__PURE__ */ defineComponent({
  __name: "BulkActionButton",
  props: {
    disclosure: { type: Boolean },
    indicator: { type: Boolean },
    handleMeasurement: { type: Function },
    showContentInButton: { type: Boolean },
    size: {},
    disabled: { type: Boolean },
    id: {},
    content: {},
    accessibilityLabel: {},
    url: {},
    external: { type: Boolean },
    target: {},
    onAction: { type: Function },
    onMouseEnter: { type: Function },
    onTouchStart: { type: Function }
  },
  emits: ["handle-measurement", "action"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const bulkActionButton = ref(null);
    const isActivatorForMoreActionsPopover = computed(() => {
      return props.disclosure && !props.showContentInButton;
    });
    const handleButtonClick = () => {
      emits("action");
    };
    onMounted(() => {
      if (bulkActionButton.value) {
        const width2 = bulkActionButton.value.getBoundingClientRect().width;
        emits("handle-measurement", width2);
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$1o).BulkActionButton),
        ref_key: "bulkActionButton",
        ref: bulkActionButton
      }, [
        isActivatorForMoreActionsPopover.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
          key: 0,
          "preferred-position": "above",
          content: _ctx.content
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$2t), {
              size: _ctx.size,
              external: _ctx.external,
              url: _ctx.url,
              disclosure: _ctx.disclosure && _ctx.showContentInButton,
              "accessibility-label": isActivatorForMoreActionsPopover.value ? _ctx.content : _ctx.accessibilityLabel,
              disabled: _ctx.disabled,
              icon: isActivatorForMoreActionsPopover.value ? unref(MenuHorizontalIcon) : void 0,
              onClick: _cache[0] || (_cache[0] = ($event) => emits("action"))
            }, null, 8, ["size", "external", "url", "disclosure", "accessibility-label", "disabled", "icon"])
          ]),
          _: 1
        }, 8, ["content"])) : (openBlock(), createBlock(unref(_sfc_main$2t), {
          key: 1,
          size: _ctx.size,
          external: _ctx.external,
          url: _ctx.url,
          disclosure: _ctx.disclosure && _ctx.showContentInButton,
          "accessibility-label": isActivatorForMoreActionsPopover.value ? _ctx.content : _ctx.accessibilityLabel,
          disabled: _ctx.disabled,
          icon: isActivatorForMoreActionsPopover.value ? unref(MenuHorizontalIcon) : void 0,
          onClick: handleButtonClick
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(isActivatorForMoreActionsPopover.value ? null : _ctx.content), 1)
          ]),
          _: 1
        }, 8, ["size", "external", "url", "disclosure", "accessibility-label", "disabled", "icon"])),
        _ctx.indicator ? (openBlock(), createBlock(unref(_sfc_main$1u), { key: 2 })) : createCommentVNode("", true)
      ], 2);
    };
  }
});
function useToggle(initialState) {
  const value = ref(initialState || false);
  const toggle = () => {
    value.value = !value.value;
  };
  const setTrue = () => {
    value.value = true;
  };
  const setFalse = () => {
    value.value = false;
  };
  return {
    value,
    toggle,
    setTrue,
    setFalse
  };
}
const _sfc_main$2y = /* @__PURE__ */ defineComponent({
  __name: "BulkActionMenu",
  props: {
    actions: {},
    title: {},
    isNewBadgeInBadgeActions: { type: Boolean },
    size: {}
  },
  setup(__props) {
    const {
      value: isVisible,
      toggle: toggleMenuVisibility
    } = useToggle(false);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$P), {
        active: unref(isVisible),
        preferInputActivator: "",
        onClose: unref(toggleMenuVisibility)
      }, {
        activator: withCtx(() => [
          createVNode(unref(_sfc_main$2z), {
            "show-content-in-button": "",
            size: _ctx.size,
            disclosure: true,
            content: _ctx.title,
            indicator: _ctx.isNewBadgeInBadgeActions,
            onAction: unref(toggleMenuVisibility)
          }, null, 8, ["size", "content", "indicator", "onAction"])
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2Z), {
            items: _ctx.actions,
            onActionAnyItem: unref(toggleMenuVisibility)
          }, null, 8, ["items", "onActionAnyItem"])
        ]),
        _: 1
      }, 8, ["active", "onClose"]);
    };
  }
});
function getVisibleAndHiddenActionsIndices(promotedActions = [], disclosureWidth, actionsWidths, containerWidth) {
  const sumTabWidths = actionsWidths.reduce((sum, width2) => sum + width2, 0);
  const arrayOfPromotedActionsIndices = promotedActions.map((_, index) => {
    return index;
  });
  const visiblePromotedActions = [];
  const hiddenPromotedActions = [];
  if (containerWidth > sumTabWidths) {
    visiblePromotedActions.push(...arrayOfPromotedActionsIndices);
  } else {
    let accumulatedWidth = 0;
    let hasReturned = false;
    arrayOfPromotedActionsIndices.forEach((currentPromotedActionsIndex) => {
      const currentActionsWidth = actionsWidths[currentPromotedActionsIndex];
      const notEnoughSpace = accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth;
      if (notEnoughSpace || hasReturned) {
        hiddenPromotedActions.push(currentPromotedActionsIndex);
        hasReturned = true;
        return;
      }
      visiblePromotedActions.push(currentPromotedActionsIndex);
      accumulatedWidth += currentActionsWidth;
    });
  }
  return {
    visiblePromotedActions,
    hiddenPromotedActions
  };
}
function instanceOfBulkActionListSectionArray(actions) {
  const validList = actions.filter((action) => {
    return action.items;
  });
  return actions.length === validList.length;
}
function instanceOfBulkActionArray(actions) {
  const validList = actions.filter((action) => {
    return !action.items;
  });
  return actions.length === validList.length;
}
function instanceOfMenuGroupDescriptor(action) {
  return "title" in action && "actions" in action;
}
function instanceOfBulkActionListSection(action) {
  return "items" in action;
}
function getActionSections(actions) {
  if (!actions || actions.length === 0) {
    return;
  }
  if (instanceOfBulkActionListSectionArray(actions)) {
    return actions;
  }
  if (instanceOfBulkActionArray(actions)) {
    return [
      {
        items: actions
      }
    ];
  }
}
function isNewBadgeInBadgeActions(actionSections) {
  var _a;
  if (!actionSections)
    return false;
  for (const action of actionSections) {
    for (const item of action.items) {
      if (((_a = item.badge) == null ? void 0 : _a.tone) === "new")
        return true;
    }
  }
  return false;
}
const ACTION_SPACING$1 = 4;
const _sfc_main$2x = /* @__PURE__ */ defineComponent({
  __name: "BulkActionMeasurer",
  props: {
    promotedActions: { default: () => [] },
    disabled: { type: Boolean },
    buttonSize: {},
    handleMeasurement: {}
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const containerNode = ref(null);
    const activatorLabel = i18n.translate(
      "Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"
    );
    useEventListener("resize", handleMeasurement);
    onMounted(() => {
      handleMeasurement();
    });
    function handleMeasurement() {
      if (!containerNode.value) {
        return;
      }
      const containerWidth = containerNode.value.offsetWidth;
      const hiddenActionNodes = containerNode.value.children;
      const hiddenActionNodesArray = Array.from(hiddenActionNodes);
      const hiddenActionsWidths = hiddenActionNodesArray.map((node) => {
        const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
        return buttonWidth + ACTION_SPACING$1;
      });
      const disclosureWidth = hiddenActionsWidths.pop() || 0;
      props.handleMeasurement({
        containerWidth,
        disclosureWidth,
        hiddenActionsWidths
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$1o).BulkActionsMeasurerLayout),
        ref_key: "containerNode",
        ref: containerNode
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.promotedActions, (action, _index) => {
          return openBlock(), createElementBlock(Fragment, { key: _index }, [
            unref(instanceOfMenuGroupDescriptor)(action) ? (openBlock(), createBlock(unref(_sfc_main$2z), {
              key: 0,
              disclosure: "",
              "show-content-in-button": "",
              size: _ctx.buttonSize,
              content: action.title
            }, null, 8, ["size", "content"])) : (openBlock(), createBlock(unref(_sfc_main$2z), mergeProps({
              key: 1,
              disabled: _ctx.disabled,
              size: _ctx.buttonSize
            }, action), null, 16, ["disabled", "size"]))
          ], 64);
        }), 128)),
        createVNode(unref(_sfc_main$2z), {
          disclosure: "",
          content: unref(activatorLabel)
        }, null, 8, ["content"])
      ], 2);
    };
  }
});
const _sfc_main$2w = /* @__PURE__ */ defineComponent({
  __name: "BulkActions",
  props: {
    accessibilityLabel: {},
    selected: { type: [Boolean, String] },
    paginatedSelectAllText: {},
    paginatedSelectAllAction: {},
    promotedActions: {},
    actions: {},
    disabled: { type: Boolean },
    buttonSize: {},
    label: {},
    selectMode: { type: Boolean },
    innerRef: {},
    isSticky: { type: Boolean },
    width: {}
  },
  emits: ["toggle-all", "more-action-popover-toggle", "select-mode-toggle"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const i18n = useI18n();
    const props = __props;
    const emits = __emit;
    const popoverActive = ref(false);
    const disclosureWidth = ref(0);
    const containerWidth = ref(Infinity);
    const actionsWidths = ref([]);
    const visiblePromotedActions = ref([]);
    const hiddenPromotedActions = ref([]);
    const hasMeasured = ref(false);
    const checkableButtonRef = ref(null);
    const setPromotedActions = () => {
      if (containerWidth.value === 0 || !props.promotedActions || props.promotedActions.length === 0) {
        return;
      }
      const {
        visiblePromotedActions: tmpVisiblePromotedActions,
        hiddenPromotedActions: tmpHiddenPromotedActions
      } = getVisibleAndHiddenActionsIndices(
        props.promotedActions,
        disclosureWidth.value,
        actionsWidths.value,
        containerWidth.value
      );
      visiblePromotedActions.value = tmpVisiblePromotedActions;
      hiddenPromotedActions.value = tmpHiddenPromotedActions;
      hasMeasured.value = containerWidth.value !== Infinity;
    };
    const activatorLabel = computed(() => !props.promotedActions || props.promotedActions && visiblePromotedActions.value.length === 0 ? i18n.translate("Polaris.ResourceList.BulkActions.actionsActivatorLabel") : i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel"));
    const hasTextAndAction = computed(() => props.paginatedSelectAllText && props.paginatedSelectAllAction);
    const ariaLive = computed(() => hasTextAndAction.value ? "polite" : void 0);
    const checkableButtonProps = computed(() => ({
      accessibilityLabel: props.accessibilityLabel,
      label: hasTextAndAction.value ? props.paginatedSelectAllText : props.label,
      selected: props.selected,
      disabled: props.disabled,
      ariaLive: ariaLive.value
    }));
    const bulkActionLayoutClassName = computed(() => classNames(
      styles$1o.BulkActionsLayout,
      !hasMeasured.value && styles$1o["BulkActionsLayout--measuring"]
    ));
    const actionSections = computed(() => getActionSections(props.actions));
    const promotedActionsFiltered = computed(() => {
      var _a;
      return ((_a = props.promotedActions) == null ? void 0 : _a.filter((_, index) => visiblePromotedActions.value.includes(index))) || [];
    });
    const hiddenPromotedActionObjects = computed(() => hiddenPromotedActions.value.map((index) => {
      var _a;
      return (_a = props.promotedActions) == null ? void 0 : _a[index];
    }));
    const mergedHiddenPromotedActions = computed(() => hiddenPromotedActionObjects.value.reduce(
      (memo, action) => {
        if (!action)
          return memo;
        if (instanceOfMenuGroupDescriptor(action)) {
          return memo.concat(action.actions);
        }
        return memo.concat(action);
      },
      []
    ));
    const hiddenPromotedSection = computed(() => ({
      items: mergedHiddenPromotedActions.value
    }));
    const allHiddenActions = computed(() => props.actions ? props.actions.filter((action) => action).map(
      (action) => {
        if (instanceOfBulkActionListSection(action)) {
          return { items: [...action.items] };
        } else if (instanceOfMenuGroupDescriptor(action)) {
          return { items: [...action.actions] };
        }
        return { items: [action] };
      }
    ) : []);
    watch(
      () => props.promotedActions,
      () => {
        setPromotedActions();
      }
    );
    const togglePopover = () => {
      emits("more-action-popover-toggle", popoverActive.value);
      popoverActive.value = !popoverActive.value;
    };
    const handleMeasurement = (measurements) => {
      if (!props.promotedActions || props.promotedActions.length === 0) {
        return;
      }
      const {
        hiddenActionsWidths: tmpActionsWidths,
        containerWidth: tmpContainerWidth,
        disclosureWidth: tmpDisclosureWidth
      } = measurements;
      const {
        visiblePromotedActions: tmpVisiblePromotedActions,
        hiddenPromotedActions: tmpHiddenPromotedActions
      } = getVisibleAndHiddenActionsIndices(
        props.promotedActions,
        tmpDisclosureWidth,
        tmpActionsWidths,
        tmpContainerWidth
      );
      visiblePromotedActions.value = tmpVisiblePromotedActions;
      hiddenPromotedActions.value = tmpHiddenPromotedActions;
      containerWidth.value = tmpContainerWidth;
      disclosureWidth.value = tmpDisclosureWidth;
      actionsWidths.value = tmpActionsWidths;
      hasMeasured.value = true;
    };
    __expose({
      checkableButtonRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$1o).BulkActions),
        style: normalizeStyle({ width: _ctx.width ? `${_ctx.width}px` : void 0 })
      }, [
        createVNode(unref(_sfc_main$1r), {
          gap: "400",
          blockAlign: "center"
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$1o).BulkActionsSelectAllWrapper)
            }, [
              createVNode(unref(_sfc_main$2m), mergeProps(checkableButtonProps.value, {
                ref_key: "checkableButtonRef",
                ref: checkableButtonRef,
                onToggleAll: _cache[0] || (_cache[0] = ($event) => emits("toggle-all"))
              }), null, 16),
              _ctx.paginatedSelectAllAction ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(styles$1o).PaginatedSelectAll)
              }, [
                createVNode(unref(_sfc_main$2u), {
                  class: normalizeClass(unref(styles$1o).AllAction),
                  size: "slim",
                  disabled: _ctx.disabled,
                  onClick: _ctx.paginatedSelectAllAction.onAction
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(_ctx.paginatedSelectAllAction.content), 1)
                  ]),
                  _: 1
                }, 8, ["class", "disabled", "onClick"])
              ], 2)) : createCommentVNode("", true)
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$1o).BulkActionsPromotedActionsWrapper)
            }, [
              createVNode(unref(_sfc_main$1r), {
                gap: "100",
                blockAlign: "center"
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(styles$1o).BulkActionsOuterLayout)
                  }, [
                    createVNode(unref(_sfc_main$2x), {
                      promotedActions: _ctx.promotedActions,
                      disabled: _ctx.disabled,
                      buttonSize: _ctx.buttonSize,
                      handleMeasurement
                    }, null, 8, ["promotedActions", "disabled", "buttonSize"]),
                    createBaseVNode("div", {
                      class: normalizeClass(bulkActionLayoutClassName.value)
                    }, [
                      _ctx.promotedActions ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(promotedActionsFiltered.value, (action, _index) => {
                        return openBlock(), createElementBlock(Fragment, { key: _index }, [
                          unref(instanceOfMenuGroupDescriptor)(action) ? (openBlock(), createBlock(unref(_sfc_main$2y), mergeProps({ key: 0 }, action, {
                            isNewBadgeInBadgeActions: unref(isNewBadgeInBadgeActions)(actionSections.value),
                            size: _ctx.buttonSize
                          }), null, 16, ["isNewBadgeInBadgeActions", "size"])) : (openBlock(), createBlock(unref(_sfc_main$2z), mergeProps({
                            key: 1,
                            disabled: _ctx.disabled
                          }, action, { size: _ctx.buttonSize }), null, 16, ["disabled", "size"]))
                        ], 64);
                      }), 128)) : createCommentVNode("", true)
                    ], 2)
                  ], 2),
                  allHiddenActions.value.length > 0 ? (openBlock(), createBlock(unref(_sfc_main$P), {
                    key: 0,
                    active: popoverActive.value,
                    preferredAlignment: "right",
                    onClose: togglePopover
                  }, {
                    activator: withCtx(() => [
                      createVNode(unref(_sfc_main$2z), {
                        disclosure: "",
                        showContentInButton: !_ctx.promotedActions,
                        disabled: _ctx.disabled,
                        content: activatorLabel.value,
                        size: _ctx.buttonSize,
                        indicator: unref(isNewBadgeInBadgeActions)(actionSections.value),
                        onAction: togglePopover
                      }, null, 8, ["showContentInButton", "disabled", "content", "size", "indicator"])
                    ]),
                    default: withCtx(() => [
                      createVNode(unref(_sfc_main$2Z), {
                        sections: [hiddenPromotedSection.value, ...allHiddenActions.value],
                        onActionAnyItem: togglePopover
                      }, null, 8, ["sections"])
                    ]),
                    _: 1
                  }, 8, ["active"])) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)
          ]),
          _: 1
        })
      ], 6);
    };
  }
});
function capitalize(word = "") {
  const wordLower = word.toLowerCase();
  return wordLower.charAt(0).toUpperCase() + wordLower.slice(1);
}
function useDisableClick(disabled2, handleClick) {
  const handleClickWrapper = (event) => {
    event.preventDefault();
    event.stopPropagation();
  };
  if (!disabled2) {
    const fallbackEvent = () => {
    };
    return handleClick || fallbackEvent;
  }
  return handleClickWrapper;
}
function useLink() {
  const context = inject("link");
  return context;
}
const _hoisted_1$1d = ["target", "href", "rel"];
const _sfc_main$2v = /* @__PURE__ */ defineComponent({
  __name: "UnstyledLink",
  props: {
    url: {},
    external: { type: Boolean },
    target: {},
    download: { type: [String, Boolean] }
  },
  setup(__props) {
    const attrs = useAttrs();
    const LinkComponent = useLink();
    const props = __props;
    const linkProps = computed(() => {
      const {
        external,
        url,
        target: target2,
        ...rest
      } = props;
      return {
        external,
        url,
        rest
      };
    });
    const target = computed(() => {
      if (props.external) {
        return "_blank";
      }
      return props.target ?? void 0;
    });
    const rel = computed(() => {
      return target.value === "_blank" ? "noopener noreferrer" : void 0;
    });
    return (_ctx, _cache) => {
      return unref(LinkComponent) ? (openBlock(), createBlock(resolveDynamicComponent(unref(LinkComponent)), normalizeProps(mergeProps({ key: 0 }, { ...unref(attrs), ...unref(unstyled).props, ...props })), null, 16)) : (openBlock(), createElementBlock("a", mergeProps({
        key: 1,
        target: target.value,
        href: _ctx.url,
        rel: rel.value
      }, { ...unref(attrs), ...linkProps.value.rest, ...unref(unstyled).props }), [
        renderSlot(_ctx.$slots, "default")
      ], 16, _hoisted_1$1d));
    };
  }
});
const _hoisted_1$1c = ["aria-disabled", "disabled", "type", "aria-busy", "aria-controls", "aria-expanded", "aria-describedby", "aria-checked", "aria-pressed", "tabindex"];
const _sfc_main$2u = /* @__PURE__ */ defineComponent({
  __name: "UnstyledButton",
  props: {
    className: {},
    id: {},
    url: {},
    external: { type: Boolean },
    target: {},
    download: { type: [String, Boolean] },
    submit: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    pressed: { type: Boolean },
    accessibilityLabel: {},
    role: {},
    ariaControls: {},
    ariaExpanded: { type: Boolean },
    ariaDescribedBy: {},
    ariaChecked: {}
  },
  setup(__props) {
    const props = __props;
    const attrs = useAttrs();
    const getEventList = (events) => {
      const eventBindings = { mouseup: handleMouseUpByBlurring };
      for (const event of events) {
        const eventName = `on${capitalize2(event)}`;
        if (attrs[eventName]) {
          eventBindings[event] = attrs[eventName];
        }
      }
      return eventBindings;
    };
    const buttonListeners = getEventList(
      ["blur", "focus", "keydown", "keypress", "keyup", "mouseover", "touchstart"]
    );
    const handleClick = () => useDisableClick(props.disabled, attrs.onClick);
    const commonProps = computed(() => ({
      id: props.id,
      class: props.className,
      "aria-label": props.accessibilityLabel
    }));
    const interactiveProps = computed(() => ({
      ...commonProps.value,
      role: props.role
    }));
    const linkListeners = getEventList(["blur", "focus", "mouseover", "touchstart"]);
    function capitalize2(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    return (_ctx, _cache) => {
      return _ctx.url && _ctx.disabled ? (openBlock(), createElementBlock("a", normalizeProps(mergeProps({ key: 0 }, commonProps.value)), [
        renderSlot(_ctx.$slots, "default")
      ], 16)) : _ctx.url && !_ctx.disabled ? (openBlock(), createBlock(unref(_sfc_main$2v), mergeProps({ key: 1 }, { ...unref(attrs), ...interactiveProps.value }, {
        url: _ctx.url,
        external: _ctx.external,
        download: _ctx.download,
        target: _ctx.target,
        onClick: handleClick
      }, toHandlers(unref(linkListeners))), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["url", "external", "download", "target"])) : (openBlock(), createElementBlock("button", mergeProps({ key: 2 }, { ...unref(attrs), ...interactiveProps.value }, {
        "aria-disabled": _ctx.disabled,
        disabled: _ctx.disabled,
        type: _ctx.submit ? "submit" : "button",
        "aria-busy": _ctx.loading ? true : void 0,
        "aria-controls": _ctx.ariaControls,
        "aria-expanded": _ctx.ariaExpanded,
        "aria-describedby": _ctx.ariaDescribedBy,
        "aria-checked": _ctx.ariaChecked,
        "aria-pressed": _ctx.pressed,
        tabindex: _ctx.disabled ? "-1" : void 0,
        onClick: handleClick
      }, toHandlers(unref(buttonListeners), true)), [
        renderSlot(_ctx.$slots, "default")
      ], 16, _hoisted_1$1c));
    };
  }
});
const _hoisted_1$1b = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$L = /* @__PURE__ */ createBaseVNode("path", { d: "M10.884 4.323a1.25 1.25 0 0 0-1.768 0L6.47 6.97a.75.75 0 0 0 1.06 1.06L10 5.56l2.47 2.47a.75.75 0 1 0 1.06-1.06zM13.53 13.03l-2.646 2.647a1.25 1.25 0 0 1-1.768 0L6.47 13.03a.75.75 0 0 1 1.06-1.06L10 14.44l2.47-2.47a.75.75 0 0 1 1.06 1.06" }, null, -1);
const _hoisted_3$B = [
  _hoisted_2$L
];
function render$q(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1b, [..._hoisted_3$B]);
}
const SelectIcon = { render: render$q };
const _hoisted_1$1a = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$K = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M5.72 8.47a.75.75 0 0 1 1.06 0l3.47 3.47 3.47-3.47a.75.75 0 1 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 0-1.06"
}, null, -1);
const _hoisted_3$A = [
  _hoisted_2$K
];
function render$p(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1a, [..._hoisted_3$A]);
}
const ChevronDownIcon = { render: render$p };
const _hoisted_1$19 = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$J = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M14.53 12.28a.75.75 0 0 1-1.06 0L10 8.81l-3.47 3.47a.75.75 0 0 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 0 1 0 1.06"
}, null, -1);
const _hoisted_3$z = [
  _hoisted_2$J
];
function render$o(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$19, [..._hoisted_3$z]);
}
const ChevronUpIcon = { render: render$o };
const Button$2 = "Polaris-Button";
const disabled$a = "Polaris-Button--disabled";
const pressed = "Polaris-Button--pressed";
const variantPrimary = "Polaris-Button--variantPrimary";
const variantSecondary = "Polaris-Button--variantSecondary";
const variantTertiary = "Polaris-Button--variantTertiary";
const variantPlain = "Polaris-Button--variantPlain";
const variantMonochromePlain = "Polaris-Button--variantMonochromePlain";
const toneSuccess$3 = "Polaris-Button--toneSuccess";
const toneCritical$3 = "Polaris-Button--toneCritical";
const sizeMicro = "Polaris-Button--sizeMicro";
const sizeSlim = "Polaris-Button--sizeSlim";
const sizeMedium$5 = "Polaris-Button--sizeMedium";
const sizeLarge$8 = "Polaris-Button--sizeLarge";
const textAlignCenter = "Polaris-Button--textAlignCenter";
const textAlignStart = "Polaris-Button--textAlignStart";
const textAlignLeft = "Polaris-Button--textAlignLeft";
const textAlignEnd = "Polaris-Button--textAlignEnd";
const textAlignRight = "Polaris-Button--textAlignRight";
const fullWidth$4 = "Polaris-Button--fullWidth";
const iconOnly = "Polaris-Button--iconOnly";
const iconWithText = "Polaris-Button--iconWithText";
const disclosure = "Polaris-Button--disclosure";
const loading = "Polaris-Button--loading";
const pressable = "Polaris-Button--pressable";
const hidden$2 = "Polaris-Button--hidden";
const Icon$7 = "Polaris-Button__Icon";
const Spinner$3 = "Polaris-Button__Spinner";
const styles$1n = {
  Button: Button$2,
  disabled: disabled$a,
  pressed,
  variantPrimary,
  variantSecondary,
  variantTertiary,
  variantPlain,
  variantMonochromePlain,
  toneSuccess: toneSuccess$3,
  toneCritical: toneCritical$3,
  sizeMicro,
  sizeSlim,
  sizeMedium: sizeMedium$5,
  sizeLarge: sizeLarge$8,
  textAlignCenter,
  textAlignStart,
  textAlignLeft,
  textAlignEnd,
  textAlignRight,
  fullWidth: fullWidth$4,
  iconOnly,
  iconWithText,
  disclosure,
  loading,
  pressable,
  hidden: hidden$2,
  Icon: Icon$7,
  Spinner: Spinner$3
};
const _sfc_main$2t = /* @__PURE__ */ defineComponent({
  __name: "Button",
  props: {
    size: { default: "medium" },
    textAlign: { default: "center" },
    fullWidth: { type: Boolean },
    disclosure: { type: [String, Boolean] },
    removeUnderline: { type: Boolean },
    icon: {},
    dataPrimaryLink: { type: Boolean },
    tone: {},
    variant: { default: "secondary" },
    id: {},
    url: {},
    external: { type: Boolean },
    target: {},
    download: { type: [String, Boolean] },
    submit: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    pressed: { type: Boolean },
    accessibilityLabel: {},
    role: {},
    ariaControls: {},
    ariaExpanded: { type: Boolean },
    ariaDescribedBy: {},
    ariaChecked: {}
  },
  setup(__props) {
    const slots = useSlots();
    const attrs = useAttrs();
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const props = __props;
    const listeners = computed(() => {
      const events = ["blur", "click", "focus", "keydown", "keypress", "keyup", "mouseenter", "touchstart", "pointerdown"];
      const eventBindings = {};
      for (const event of events) {
        const eventName = `on${capitalize(event)}`;
        if (attrs[eventName]) {
          eventBindings[event] = attrs[eventName];
        }
      }
      return eventBindings;
    });
    const hasChildren = computed(() => hasSlot(slots.default));
    const isDisabled2 = computed(() => props.disabled || props.loading);
    const className = computed(() => classNames(
      styles$1n.Button,
      styles$1n.pressable,
      styles$1n[variationName("variant", props.variant)],
      styles$1n[variationName("size", props.size)],
      styles$1n[variationName("textAlign", props.textAlign)],
      props.fullWidth && styles$1n.fullWidth,
      props.disclosure && styles$1n.disclosure,
      (props.icon || hasSlot(slots.icon)) && hasSlot(slots.default) && styles$1n.iconWithText,
      (props.icon || hasSlot(slots.icon)) && !hasSlot(slots.default) && styles$1n.iconOnly,
      isDisabled2.value && styles$1n.disabled,
      props.loading && styles$1n.loading,
      props.pressed && !props.disabled && !props.url && styles$1n.pressed,
      props.removeUnderline && styles$1n.removeUnderline,
      props.tone && styles$1n[variationName("tone", props.tone)]
    ));
    const commonProps = computed(() => {
      const { id, accessibilityLabel, ariaDescribedBy, role } = props;
      return {
        id,
        className: className.value,
        role,
        accessibilityLabel,
        ariaDescribedBy,
        "data-primary-link": props.dataPrimaryLink
      };
    });
    const linkProps = computed(() => {
      const { external, url, download } = props;
      return {
        url,
        external,
        download
      };
    });
    const actionProps = computed(() => {
      const { submit, loading: loading2, ariaChecked, ariaControls, ariaExpanded, pressed: pressed2 } = props;
      return {
        submit,
        disabled: isDisabled2.value,
        loading: loading2,
        ariaChecked,
        ariaControls,
        ariaExpanded,
        pressed: pressed2
      };
    });
    const disclosureIconSource = computed(() => {
      if (props.loading) {
        return "placeholder";
      }
      if (props.disclosure === "select") {
        return SelectIcon;
      }
      return props.disclosure === "up" ? ChevronUpIcon : ChevronDownIcon;
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2u), mergeProps({ ...commonProps.value, ...linkProps.value, ...actionProps.value }, toHandlers(listeners.value), { onMouseup: unref(handleMouseUpByBlurring) }), {
        default: withCtx(() => [
          _ctx.loading ? (openBlock(), createElementBlock("span", {
            key: 0,
            class: normalizeClass(unref(styles$1n).Spinner)
          }, [
            createVNode(unref(_sfc_main$r), {
              size: "small",
              "accessibility-label": unref(i18n).translate("Polaris.Button.spinnerAccessibilityLabel")
            }, null, 8, ["accessibility-label"])
          ], 2)) : createCommentVNode("", true),
          _ctx.icon || unref(hasSlot)(unref(slots).icon) ? (openBlock(), createElementBlock("span", {
            key: 1,
            class: normalizeClass(_ctx.loading ? unref(styles$1n).hidden : unref(styles$1n).Icon)
          }, [
            unref(hasSlot)(unref(slots).icon) ? renderSlot(_ctx.$slots, "icon", { key: 0 }) : _ctx.icon ? (openBlock(), createBlock(unref(_sfc_main$1K), {
              key: 1,
              source: _ctx.loading ? "placeholder" : _ctx.icon
            }, null, 8, ["source"])) : createCommentVNode("", true)
          ], 2)) : createCommentVNode("", true),
          hasChildren.value ? (openBlock(), createElementBlock("span", {
            class: normalizeClass(_ctx.removeUnderline ? unref(styles$1n).removeUnderline : ""),
            key: _ctx.disabled ? "text-disabled" : "text"
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)) : createCommentVNode("", true),
          _ctx.disclosure ? (openBlock(), createElementBlock("span", {
            key: 3,
            class: normalizeClass(_ctx.loading ? unref(styles$1n).hidden : unref(styles$1n).Icon)
          }, [
            createVNode(unref(_sfc_main$1K), { source: disclosureIconSource.value }, null, 8, ["source"])
          ], 2)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 16, ["onMouseup"]);
    };
  }
});
const _sfc_main$2s = /* @__PURE__ */ defineComponent({
  __name: "ButtonFrom",
  props: {
    action: {},
    overrides: {}
  },
  setup(__props) {
    const props = __props;
    const plainVariant = computed(() => props.action.plain ? "plain" : void 0);
    const destructiveVariant = computed(() => props.action.destructive ? "primary" : void 0);
    const tone = computed(() => {
      var _a, _b;
      return !((_a = props.overrides) == null ? void 0 : _a.tone) && props.action.destructive ? "critical" : (_b = props.overrides) == null ? void 0 : _b.tone;
    });
    const bindProps = computed(() => {
      if (!props.action) {
        return {};
      }
      const { onAction, content, plain, destructive: destructive2, ...other } = props.action;
      return { ...other, ...props.overrides };
    });
    const handleClick = () => {
      if (props.action && props.action.onAction) {
        props.action.onAction();
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$2t, mergeProps({
        tone: tone.value,
        variant: plainVariant.value || destructiveVariant.value
      }, bindProps.value, { onClick: handleClick }), {
        default: withCtx(() => [
          _ctx.action.content ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createTextVNode(toDisplayString(_ctx.action.content), 1)
          ], 64)) : createCommentVNode("", true)
        ]),
        _: 1
      }, 16, ["tone", "variant"]);
    };
  }
});
function useExtractFragment(slot) {
  const slotsElms = computed(() => {
    let elm = [];
    if (slot) {
      const groups = slot().map((group) => {
        if (group.children && group.children.length) {
          return extractElement(group);
        }
        return group;
      });
      elm = groups.flat();
    }
    return elm;
  });
  const isFragment = (item) => {
    var _a, _b, _c;
    return ((_a = item.type) == null ? void 0 : _a.toString()) === "Symbol(Fragment)" || ((_b = item.type) == null ? void 0 : _b.toString()) === "Symbol()" || ((_c = item.type) == null ? void 0 : _c.toString()) === "Symbol(v-fgt)";
  };
  const extractElement = (elm) => {
    if (!isFragment(elm)) {
      return [elm];
    }
    const children = elm.children;
    const items = [];
    for (const child of children) {
      if (isFragment(child)) {
        items.push(...extractElement(child));
      } else {
        items.push(child);
      }
    }
    return items;
  };
  return {
    slotsElms,
    extractElement
  };
}
const ButtonGroup = "Polaris-ButtonGroup";
const Item$6 = "Polaris-ButtonGroup__Item";
const variantSegmented = "Polaris-ButtonGroup--variantSegmented";
const fullWidth$3 = "Polaris-ButtonGroup--fullWidth";
const extraTight = "Polaris-ButtonGroup--extraTight";
const tight = "Polaris-ButtonGroup--tight";
const loose = "Polaris-ButtonGroup--loose";
const noWrap$1 = "Polaris-ButtonGroup--noWrap";
const styles$1m = {
  ButtonGroup,
  Item: Item$6,
  "Item-plain": "Polaris-ButtonGroup__Item--plain",
  variantSegmented,
  "Item-focused": "Polaris-ButtonGroup__Item--focused",
  fullWidth: fullWidth$3,
  extraTight,
  tight,
  loose,
  noWrap: noWrap$1
};
const _sfc_main$2r = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    buttonElm: {}
  },
  setup(__props) {
    const props = __props;
    const focusValue = ref(false);
    const forceTrueFocused = () => {
      focusValue.value = true;
    };
    const forceFalseFocused = () => {
      focusValue.value = false;
    };
    const className = computed(() => {
      var _a;
      return classNames(
        styles$1m.Item,
        focusValue.value && styles$1m["Item-focused"],
        ((_a = props.buttonElm.props) == null ? void 0 : _a.variant) === "plain" && styles$1m["Item-plain"]
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        onFocus: forceTrueFocused,
        onBlur: forceFalseFocused
      }, [
        (openBlock(), createBlock(resolveDynamicComponent(_ctx.buttonElm)))
      ], 34);
    };
  }
});
const _hoisted_1$18 = ["data-buttongroup-variant", "data-buttongroup-connected-top", "data-buttongroup-full-width", "data-buttongroup-no-wrap"];
const _sfc_main$2q = /* @__PURE__ */ defineComponent({
  __name: "ButtonGroup",
  props: {
    gap: {},
    variant: {},
    fullWidth: { type: Boolean },
    connectedTop: { type: Boolean },
    noWrap: { type: Boolean }
  },
  setup(__props) {
    const slots = useSlots();
    const { slotsElms } = useExtractFragment(slots.default);
    const props = __props;
    const className = computed(() => classNames(
      styles$1m.ButtonGroup,
      props.gap && styles$1m[props.gap],
      props.variant && styles$1m[variationName("variant", props.variant)],
      props.fullWidth && styles$1m.fullWidth,
      props.noWrap && styles$1m.noWrap
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        "data-buttongroup-variant": _ctx.variant,
        "data-buttongroup-connected-top": _ctx.connectedTop,
        "data-buttongroup-full-width": _ctx.fullWidth,
        "data-buttongroup-no-wrap": _ctx.noWrap
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(slotsElms), (item, index) => {
          return openBlock(), createBlock(unref(_sfc_main$2r), {
            key: index,
            "button-elm": item
          }, null, 8, ["button-elm"]);
        }), 128))
      ], 10, _hoisted_1$18);
    };
  }
});
const _hoisted_1$17 = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$I = /* @__PURE__ */ createBaseVNode("path", { d: "M12.72 13.78a.75.75 0 1 0 1.06-1.06L11.06 10l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 8.94 7.28 6.22a.75.75 0 0 0-1.06 1.06L8.94 10l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 11.06z" }, null, -1);
const _hoisted_3$y = [
  _hoisted_2$I
];
function render$n(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$17, [..._hoisted_3$y]);
}
const XSmallIcon = { render: render$n };
const CalloutCard = "Polaris-CalloutCard";
const Image = "Polaris-CalloutCard__Image";
const DismissImage = "Polaris-CalloutCard__DismissImage";
const Content$4 = "Polaris-CalloutCard__Content";
const Title$4 = "Polaris-CalloutCard__Title";
const Buttons = "Polaris-CalloutCard__Buttons";
const Container$4 = "Polaris-CalloutCard__Container";
const Dismiss = "Polaris-CalloutCard__Dismiss";
const hasDismiss = "Polaris-CalloutCard--hasDismiss";
const styles$1l = {
  CalloutCard,
  Image,
  DismissImage,
  Content: Content$4,
  Title: Title$4,
  Buttons,
  Container: Container$4,
  Dismiss,
  hasDismiss
};
const _sfc_main$2p = /* @__PURE__ */ defineComponent({
  __name: "CalloutCard",
  props: {
    title: {},
    illustration: {},
    primaryAction: {},
    secondaryAction: {}
  },
  setup(__props) {
    const attrs = useAttrs();
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const imageClassName = computed(
      () => classNames(
        styles$1l.Image,
        !!attrs["onDismiss"] && styles$1l.DismissImage
      )
    );
    const containerClassName = computed(
      () => classNames(
        styles$1l.Container,
        !!attrs["onDismiss"] && styles$1l.hasDismiss
      )
    );
    return (_ctx, _cache) => {
      const _component_Button = resolveComponent("Button");
      const _component_Text = resolveComponent("Text");
      const _component_BlockStack = resolveComponent("BlockStack");
      const _component_ButtonFrom = resolveComponent("ButtonFrom");
      const _component_ButtonGroup = resolveComponent("ButtonGroup");
      const _component_Image = resolveComponent("Image");
      const _component_LegacyCardSection = resolveComponent("LegacyCardSection");
      const _component_LegacyCard = resolveComponent("LegacyCard");
      return openBlock(), createBlock(_component_LegacyCard, null, {
        default: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(containerClassName.value)
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$1l).Dismiss)
            }, [
              unref(attrs)["onDismiss"] ? (openBlock(), createBlock(_component_Button, {
                key: 0,
                variant: "plain",
                accessibilityLabel: "Dismiss card",
                icon: unref(XSmallIcon),
                onClick: unref(attrs)["onDismiss"]
              }, null, 8, ["icon", "onClick"])) : createCommentVNode("", true)
            ], 2),
            createVNode(_component_LegacyCardSection, null, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$1l).CalloutCard)
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(styles$1l).Content)
                  }, [
                    createBaseVNode("div", {
                      class: normalizeClass(unref(styles$1l).Title)
                    }, [
                      createVNode(_component_Text, {
                        variant: "headingMd",
                        as: "h2"
                      }, {
                        default: withCtx(() => [
                          unref(hasSlot)(unref(slots).title) ? renderSlot(_ctx.$slots, "title", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createTextVNode(toDisplayString(_ctx.title), 1)
                          ], 64))
                        ]),
                        _: 3
                      })
                    ], 2),
                    createVNode(_component_BlockStack, null, {
                      default: withCtx(() => [
                        renderSlot(_ctx.$slots, "default")
                      ]),
                      _: 3
                    }),
                    createBaseVNode("div", {
                      class: normalizeClass(unref(styles$1l).Buttons)
                    }, [
                      _ctx.secondaryAction ? (openBlock(), createBlock(_component_ButtonGroup, { key: 0 }, {
                        default: withCtx(() => [
                          createVNode(_component_ButtonFrom, { action: _ctx.primaryAction }, null, 8, ["action"]),
                          _ctx.secondaryAction ? (openBlock(), createBlock(_component_ButtonFrom, {
                            key: 0,
                            action: _ctx.secondaryAction,
                            overrides: { variant: _ctx.secondaryAction.variant ?? "tertiary" }
                          }, null, 8, ["action", "overrides"])) : createCommentVNode("", true)
                        ]),
                        _: 1
                      })) : (openBlock(), createBlock(_component_ButtonFrom, {
                        key: 1,
                        action: _ctx.primaryAction
                      }, null, 8, ["action"]))
                    ], 2)
                  ], 2),
                  createVNode(_component_Image, {
                    alt: "",
                    className: imageClassName.value,
                    source: _ctx.illustration
                  }, null, 8, ["className", "source"])
                ], 2)
              ]),
              _: 3
            })
          ], 2)
        ]),
        _: 3
      });
    };
  }
});
const ShadowBevel = "Polaris-ShadowBevel";
const styles$1k = {
  ShadowBevel
};
const _sfc_main$2o = /* @__PURE__ */ defineComponent({
  __name: "ShadowBevel",
  props: {
    as: { default: "div" },
    boxShadow: {},
    borderRadius: {},
    zIndex: { default: "0" },
    bevel: { default: true }
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => ({
      "--pc-shadow-bevel-z-index": props.zIndex,
      ...getResponsiveValue(
        "shadow-bevel",
        "content",
        mapResponsiveProp(props.bevel, (bevel) => bevel ? '""' : "none")
      ),
      ...getResponsiveValue(
        "shadow-bevel",
        "box-shadow",
        mapResponsiveProp(
          props.bevel,
          (bevel) => bevel ? `var(--p-shadow-${props.boxShadow})` : "none"
        )
      ),
      ...getResponsiveValue(
        "shadow-bevel",
        "border-radius",
        mapResponsiveProp(
          props.bevel,
          (bevel) => bevel ? `var(--p-border-radius-${props.borderRadius})` : "var(--p-border-radius-0)"
        )
      )
    }));
    function mapResponsiveProp(responsiveProp, callback) {
      if (typeof responsiveProp === "boolean") {
        return callback(responsiveProp);
      }
      return Object.fromEntries(
        Object.entries(responsiveProp).map(([breakpointsAlias, value]) => [
          breakpointsAlias,
          callback(value)
        ])
      );
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        className: unref(styles$1k).ShadowBevel,
        style: normalizeStyle(style.value)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["className", "style"]);
    };
  }
});
const defaultBorderRadius = "300";
const _sfc_main$2n = /* @__PURE__ */ defineComponent({
  __name: "Card",
  props: {
    background: { default: "bg-surface" },
    padding: { default: "400" },
    roundedAbove: { default: "sm" }
  },
  setup(__props) {
    const props = __props;
    const breakpoints2 = useBreakpoints();
    const isSmUp = computed(() => Boolean(breakpoints2.value.smUp));
    const hasBorderRadius = computed(() => !!breakpoints2.value[`${props.roundedAbove}Up`]);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$2o, {
        bevel: isSmUp.value,
        "box-shadow": "100",
        "border-radius": hasBorderRadius.value ? defaultBorderRadius : "0",
        "z-index": "32"
      }, {
        default: withCtx(() => [
          createVNode(_sfc_main$2B, {
            background: _ctx.background,
            padding: _ctx.padding,
            "overflow-x": "clip",
            "overflow-y": "clip",
            "min-height": "100%"
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["background", "padding"])
        ]),
        _: 3
      }, 8, ["bevel", "border-radius"]);
    };
  }
});
const CheckableButton = "Polaris-CheckableButton";
const Checkbox$2 = "Polaris-CheckableButton__Checkbox";
const Label$7 = "Polaris-CheckableButton__Label";
const styles$1j = {
  CheckableButton,
  Checkbox: Checkbox$2,
  Label: Label$7
};
const _hoisted_1$16 = ["aria-live"];
const _sfc_main$2m = /* @__PURE__ */ defineComponent({
  __name: "CheckableButton",
  props: {
    accessibilityLabel: {},
    label: { default: "" },
    selected: { type: [Boolean, String] },
    disabled: { type: Boolean },
    ariaLive: {}
  },
  emits: ["toggle-all", "update:modelValue"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const model = computed({
      get() {
        return props.selected;
      },
      set(value) {
        emits("update:modelValue", value);
      }
    });
    const checkBoxRef = ref(null);
    const className = computed(() => classNames(styles$1j.CheckableButton));
    function focus2() {
      var _a;
      (_a = checkBoxRef.value) == null ? void 0 : _a.focus();
    }
    __expose({ focus: focus2 });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        onClick: _cache[2] || (_cache[2] = ($event) => emits("toggle-all"))
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$1j).Checkbox)
        }, [
          createVNode(unref(_sfc_main$2l), {
            modelValue: model.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
            ref_key: "checkBoxRef",
            ref: checkBoxRef,
            labelHidden: "",
            checked: _ctx.selected,
            label: _ctx.accessibilityLabel,
            disabled: _ctx.disabled,
            onChange: _cache[1] || (_cache[1] = ($event) => emits("toggle-all"))
          }, null, 8, ["modelValue", "checked", "label", "disabled"])
        ], 2),
        _ctx.label ? (openBlock(), createElementBlock("span", {
          key: 0,
          class: normalizeClass(unref(styles$1j).Label),
          "aria-live": _ctx.ariaLive
        }, toDisplayString(_ctx.label), 11, _hoisted_1$16)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
function helpTextID$1(id) {
  return `${id}HelpText`;
}
function errorTextID(id) {
  return `${id}Error`;
}
const _hoisted_1$15 = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$H = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M6 10a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5A.75.75 0 0 1 6 10"
}, null, -1);
const _hoisted_3$x = [
  _hoisted_2$H
];
function render$m(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$15, [..._hoisted_3$x]);
}
const MinusIcon = { render: render$m };
const Checkbox$1 = "Polaris-Checkbox";
const ChoiceLabel$1 = "Polaris-Checkbox__ChoiceLabel";
const Backdrop$3 = "Polaris-Checkbox__Backdrop";
const Input$4 = "Polaris-Checkbox__Input";
const Icon$6 = "Polaris-Checkbox__Icon";
const animated = "Polaris-Checkbox--animated";
const toneMagic$5 = "Polaris-Checkbox--toneMagic";
const hover$1 = "Polaris-Checkbox--hover";
const error$4 = "Polaris-Checkbox--error";
const checked = "Polaris-Checkbox--checked";
const pathAnimation = "Polaris-Checkbox--pathAnimation";
const styles$1i = {
  Checkbox: Checkbox$1,
  ChoiceLabel: ChoiceLabel$1,
  Backdrop: Backdrop$3,
  Input: Input$4,
  "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
  Icon: Icon$6,
  animated,
  toneMagic: toneMagic$5,
  hover: hover$1,
  error: error$4,
  checked,
  pathAnimation
};
const _hoisted_1$14 = ["id", "name", "value", "checked", "disabled", "aria-invalid", "aria-controls", "aria-describedby", "role"];
const _hoisted_2$G = {
  key: 1,
  viewBox: "0 0 16 16",
  "shape-rendering": "geometricPrecision",
  "text-rendering": "geometricPrecision"
};
const _sfc_main$2l = /* @__PURE__ */ defineComponent({
  __name: "Checkbox",
  props: /* @__PURE__ */ mergeModels({
    ariaControls: {},
    ariaDescribedBy: {},
    label: {},
    labelHidden: { type: Boolean },
    checked: { type: [Boolean, String] },
    disabled: { type: Boolean },
    id: {},
    name: {},
    value: {},
    labelClassName: {},
    fill: {},
    helpText: {},
    error: { type: [String, Array, Boolean] },
    tone: {},
    bleed: {},
    bleedBlockStart: {},
    bleedBlockEnd: {},
    bleedInlineStart: {},
    bleedInlineEnd: {}
  }, {
    "modelValue": { type: Boolean },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const isWithinListbox = useWithinListbox();
    const uniqId = useId();
    const { hasSlot } = useHasSlot();
    __expose({
      focus: () => {
        if (inputNode.value) {
          inputNode.value.focus();
        }
      }
    });
    const inputNode = ref(null);
    const id = computed(() => props.id || `${uniqId}`);
    const describedBy = computed(() => {
      const output = [];
      if (props.error && typeof props.error !== "boolean") {
        output.push(errorTextID(id.value));
      }
      if (Boolean(slots.helpText) || props.helpText) {
        output.push(helpTextID$1(id.value));
      }
      if (props.ariaDescribedBy) {
        output.push(props.ariaDescribedBy);
      }
      return output;
    });
    const ariaDescribedBy = computed(
      () => describedBy.value.length ? describedBy.value.join(" ") : void 0
    );
    const wrapperClassName = computed(() => classNames(styles$1i.Checkbox, props.error && styles$1i.error));
    const isIndeterminate = computed(() => props.checked === "indeterminate");
    const isChecked = computed(() => Boolean(!isIndeterminate.value && model.value));
    const indeterminateAttributes = computed(
      () => isIndeterminate.value ? { indeterminate: true, "aria-checked": "mixed" } : { "aria-checked": isChecked.value }
    );
    const inputClassName = computed(() => classNames(
      styles$1i.Input,
      isIndeterminate.value && styles$1i["Input-indeterminate"],
      props.tone && styles$1i[variationName("tone", props.tone)]
    ));
    const extraChoiceProps = computed(() => ({
      error: props.error,
      bleed: props.bleed,
      bleedBlockStart: props.bleedBlockStart,
      bleedBlockEnd: props.bleedBlockEnd,
      bleedInlineStart: props.bleedInlineStart,
      bleedInlineEnd: props.bleedInlineEnd
    }));
    const svgPathClassName = computed(() => classNames(isChecked.value && styles$1i.checked));
    watch(
      () => props.checked,
      (value, oldVal) => {
        if (value === oldVal)
          return;
        model.value = value;
      },
      { flush: "post" }
    );
    onMounted(() => {
      if (props.checked) {
        model.value = props.checked;
      }
    });
    const handleBlur = () => {
      emits("blur");
    };
    const handleFocus = () => {
      emits("focus");
    };
    const handleOnClick = () => {
      if (!inputNode.value || props.disabled) {
        return;
      }
      model.value = inputNode.value.checked;
      inputNode.value.focus();
      emits("change", inputNode.value.checked, props.value || id.value);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2k), mergeProps({
        id: id.value,
        "label-hidden": _ctx.labelHidden,
        disabled: _ctx.disabled,
        "label-class-name": unref(classNames)(unref(styles$1i).ChoiceLabel, _ctx.labelClassName),
        fill: _ctx.fill,
        tone: _ctx.tone
      }, extraChoiceProps.value), createSlots({
        default: withCtx(() => [
          createBaseVNode("span", {
            class: normalizeClass(wrapperClassName.value)
          }, [
            createBaseVNode("input", mergeProps({
              ref_key: "inputNode",
              ref: inputNode,
              type: "checkbox",
              id: id.value,
              name: _ctx.name,
              value: _ctx.value,
              checked: isChecked.value,
              disabled: _ctx.disabled,
              class: inputClassName.value,
              "aria-invalid": Boolean(_ctx.error),
              "aria-controls": _ctx.ariaControls,
              "aria-describedby": ariaDescribedBy.value,
              role: unref(isWithinListbox) ? "presentation" : "checkbox"
            }, indeterminateAttributes.value, {
              onBlur: handleBlur,
              onClick: handleOnClick,
              onFocus: handleFocus
            }), null, 16, _hoisted_1$14),
            createBaseVNode("span", {
              class: normalizeClass(unref(styles$1i).Backdrop),
              onClick: withModifiers(() => {
              }, ["stop"]),
              onKeyup: withModifiers(() => {
              }, ["stop"])
            }, null, 34),
            createBaseVNode("span", {
              class: normalizeClass(unref(classNames)(unref(styles$1i).Icon, !isIndeterminate.value && unref(styles$1i).animated))
            }, [
              isIndeterminate.value ? (openBlock(), createBlock(unref(_sfc_main$1K), {
                key: 0,
                source: unref(MinusIcon)
              }, null, 8, ["source"])) : (openBlock(), createElementBlock("svg", _hoisted_2$G, [
                createBaseVNode("path", {
                  class: normalizeClass(svgPathClassName.value),
                  d: "M1.5,5.5L3.44655,8.22517C3.72862,8.62007,4.30578,8.64717,4.62362,8.28044L10.5,1.5",
                  transform: "translate(2 2.980376)",
                  opacity: "0",
                  fill: "none",
                  stroke: "currentColor",
                  "stroke-width": "2",
                  "stroke-linecap": "round",
                  "stroke-linejoin": "round",
                  pathLength: "1"
                }, null, 2)
              ]))
            ], 2)
          ], 2)
        ]),
        _: 2
      }, [
        unref(hasSlot)(unref(slots).label) || _ctx.label ? {
          name: "label",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        unref(hasSlot)(unref(slots).helpText) || _ctx.helpText ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).helpText) ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0
      ]), 1040, ["id", "label-hidden", "disabled", "label-class-name", "fill", "tone"]);
    };
  }
});
const Choice = "Polaris-Choice";
const labelHidden = "Polaris-Choice--labelHidden";
const Label$6 = "Polaris-Choice__Label";
const Control = "Polaris-Choice__Control";
const disabled$9 = "Polaris-Choice--disabled";
const toneMagic$4 = "Polaris-Choice--toneMagic";
const Descriptions = "Polaris-Choice__Descriptions";
const HelpText$1 = "Polaris-Choice__HelpText";
const styles$1h = {
  Choice,
  labelHidden,
  Label: Label$6,
  Control,
  disabled: disabled$9,
  toneMagic: toneMagic$4,
  Descriptions,
  HelpText: HelpText$1
};
const _hoisted_1$13 = { key: 0 };
const _hoisted_2$F = ["for"];
const _hoisted_3$w = ["id"];
const _hoisted_4$i = ["for"];
const _sfc_main$2k = /* @__PURE__ */ defineComponent({
  __name: "Choice",
  props: {
    id: {},
    label: {},
    disabled: { type: Boolean },
    labelHidden: { type: Boolean },
    labelClassName: {},
    fill: {},
    error: { type: [String, Array, Boolean] },
    helpText: {},
    tone: {},
    bleed: {},
    bleedBlockStart: {},
    bleedBlockEnd: {},
    bleedInlineStart: {},
    bleedInlineEnd: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const hasError2 = computed(() => props.error && typeof props.error !== "boolean");
    const hasDescription = computed(() => hasHelpText.value || hasError2.value);
    const className = computed(() => classNames(
      styles$1h.Choice,
      props.labelHidden && styles$1h.labelHidden,
      props.disabled && styles$1h.disabled,
      props.tone && styles$1h[variationName("tone", props.tone)],
      props.labelClassName
    ));
    const labelStyle = computed(() => ({
      // Pass through overrides for bleed values if they're set by the prop
      ...getResponsiveProps(
        "choice",
        "bleed-block-end",
        "space",
        props.bleedBlockEnd || props.bleed
      ),
      ...getResponsiveProps(
        "choice",
        "bleed-block-start",
        "space",
        props.bleedBlockStart || props.bleed
      ),
      ...getResponsiveProps(
        "choice",
        "bleed-inline-start",
        "space",
        props.bleedInlineStart || props.bleed
      ),
      ...getResponsiveProps(
        "choice",
        "bleed-inline-end",
        "space",
        props.bleedInlineEnd || props.bleed
      ),
      ...Object.fromEntries(
        Object.entries(getResponsiveValue("choice", "fill", props.fill)).map(
          // Map "true" => "100%" and "false" => "auto" for use in
          // inline/block-size calc()
          ([key, value]) => [key, value ? "100%" : "auto"]
        )
      )
    }));
    return (_ctx, _cache) => {
      const _component_Text = resolveComponent("Text");
      return hasDescription.value ? (openBlock(), createElementBlock("div", _hoisted_1$13, [
        createBaseVNode("label", {
          class: normalizeClass(className.value),
          for: _ctx.id,
          style: normalizeStyle(unref(sanitizeCustomProperties)(labelStyle.value)),
          onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
        }, [
          createBaseVNode("span", {
            class: normalizeClass(unref(styles$1h).Control)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2),
          createBaseVNode("span", {
            class: normalizeClass(unref(styles$1h).Label)
          }, [
            createBaseVNode("span", null, [
              unref(hasSlot)(unref(slots).label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.label), 1)
              ], 64))
            ])
          ], 2)
        ], 14, _hoisted_2$F),
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$1h).Descriptions)
        }, [
          _ctx.error && typeof _ctx.error !== "boolean" ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles$1h).Error)
          }, [
            createVNode(unref(_sfc_main$1t), {
              message: _ctx.error,
              "field-id": _ctx.id
            }, null, 8, ["message", "field-id"])
          ], 2)) : createCommentVNode("", true),
          hasHelpText.value ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(styles$1h).HelpText),
            id: unref(helpTextID$1)(_ctx.id)
          }, [
            createVNode(_component_Text, {
              as: "span",
              tone: !_ctx.disabled && "subdued"
            }, {
              default: withCtx(() => [
                unref(hasSlot)(unref(slots).helpText) ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(_ctx.helpText), 1)
                ], 64))
              ]),
              _: 3
            }, 8, ["tone"])
          ], 10, _hoisted_3$w)) : createCommentVNode("", true)
        ], 2)
      ])) : (openBlock(), createElementBlock("label", {
        key: 1,
        class: normalizeClass(className.value),
        for: _ctx.id,
        style: normalizeStyle(unref(sanitizeCustomProperties)(labelStyle.value)),
        onClick: _cache[1] || (_cache[1] = ($event) => emits("click"))
      }, [
        createBaseVNode("span", {
          class: normalizeClass(unref(styles$1h).Control)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2),
        createBaseVNode("span", {
          class: normalizeClass(unref(styles$1h).Label)
        }, [
          createBaseVNode("span", null, [
            unref(hasSlot)(unref(slots).label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ])
        ], 2)
      ], 14, _hoisted_4$i));
    };
  }
});
const ChoiceChildren = "Polaris-ChoiceList__ChoiceChildren";
const styles$1g = {
  ChoiceChildren
};
const _sfc_main$2j = /* @__PURE__ */ defineComponent({
  __name: "ChoiceList",
  props: /* @__PURE__ */ mergeModels({
    title: {},
    choices: {},
    name: {},
    allowMultiple: { type: Boolean },
    titleHidden: { type: Boolean },
    error: {},
    disabled: { type: Boolean, default: false },
    tone: {}
  }, {
    "modelValue": {
      default: []
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    var _a;
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const { hasSlot } = useHasSlot();
    const uniqId = (_a = getCurrentInstance()) == null ? void 0 : _a.uid;
    const name = computed(() => String(props.name ?? uniqId));
    const finalName = computed(() => props.allowMultiple ? `${name.value}[]` : name.value);
    const handleChange = (checked2, value) => {
      const newValue = updateSelectedChoices(value, checked2);
      model.value = newValue;
      emits("change", newValue, finalName.value);
    };
    const choiceIsSelected = ({ value }) => {
      return model.value.includes(value);
    };
    function updateSelectedChoices(value, checked2) {
      if (checked2) {
        return props.allowMultiple ? [...model.value, value] : [value];
      }
      return model.value.filter((selectedChoice) => selectedChoice !== value);
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2C), {
        as: "fieldset",
        gap: { xs: "400", md: "0" },
        "aria-invalid": _ctx.error != null,
        id: finalName.value
      }, {
        default: withCtx(() => [
          unref(hasSlot)(unref(slots).title) || _ctx.title ? (openBlock(), createBlock(unref(_sfc_main$2B), {
            key: 0,
            as: "legend",
            "padding-block-end": { xs: "500", md: "100" },
            "visually-hidden": _ctx.titleHidden
          }, {
            default: withCtx(() => [
              unref(hasSlot)(unref(slots).title) ? renderSlot(_ctx.$slots, "title", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.title), 1)
              ], 64))
            ]),
            _: 3
          }, 8, ["visually-hidden"])) : createCommentVNode("", true),
          createVNode(unref(_sfc_main$2C), {
            as: "ul",
            gap: { xs: "400", md: "0" }
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.choices, (choice) => {
                return openBlock(), createElementBlock("li", {
                  key: choice.value
                }, [
                  createVNode(unref(_sfc_main$2D), {
                    "margin-block-end": choice.helpText ? { xs: "100", md: "0" } : { xs: "0" }
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.allowMultiple ? "Checkbox" : "RadioButton"), {
                        name: finalName.value,
                        value: choice.value,
                        id: choice.id,
                        disabled: choice.disabled || _ctx.disabled,
                        fill: { xs: true, sm: false },
                        checked: choiceIsSelected(choice),
                        "aria-describedby": _ctx.error && choice.describedByError ? unref(errorTextID)(finalName.value) : void 0,
                        tone: _ctx.tone,
                        onChange: handleChange
                      }, createSlots({ _: 2 }, [
                        choice.label ? {
                          name: "label",
                          fn: withCtx(() => [
                            createTextVNode(toDisplayString(choice.label), 1)
                          ]),
                          key: "0"
                        } : void 0,
                        choice.helpText ? {
                          name: "helpText",
                          fn: withCtx(() => [
                            createTextVNode(toDisplayString(choice.helpText), 1)
                          ]),
                          key: "1"
                        } : void 0
                      ]), 1064, ["name", "value", "id", "disabled", "checked", "aria-describedby", "tone"])),
                      choice.renderChildren ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(unref(styles$1g).ChoiceChildren)
                      }, [
                        createVNode(unref(_sfc_main$2B), { "padding-block-start": { xs: "400", md: "0" } }, {
                          default: withCtx(() => [
                            (openBlock(), createBlock(resolveDynamicComponent(choice.renderChildren)))
                          ]),
                          _: 2
                        }, 1024)
                      ], 2)) : createCommentVNode("", true)
                    ]),
                    _: 2
                  }, 1032, ["margin-block-end"])
                ]);
              }), 128))
            ]),
            _: 1
          }),
          _ctx.error ? (openBlock(), createBlock(unref(_sfc_main$2B), {
            key: 1,
            "padding-block-start": { xs: "0", md: "100" },
            "padding-block-end": "200"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1t), {
                message: _ctx.error,
                "field-id": finalName.value
              }, null, 8, ["message", "field-id"])
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["aria-invalid", "id"]);
    };
  }
});
const Collapsible = "Polaris-Collapsible";
const isFullyClosed = "Polaris-Collapsible--isFullyClosed";
const expandOnPrint = "Polaris-Collapsible--expandOnPrint";
const styles$1f = {
  Collapsible,
  isFullyClosed,
  expandOnPrint
};
const _hoisted_1$12 = ["id", "aria-hidden"];
const _sfc_main$2i = /* @__PURE__ */ defineComponent({
  __name: "Collapsible",
  props: {
    id: {},
    expandOnPrint: { type: Boolean },
    open: { type: Boolean },
    transition: { type: [Boolean, Object], default: true }
  },
  emits: ["animation-end"],
  setup(__props, { emit: __emit }) {
    useSlots();
    const props = __props;
    const emits = __emit;
    const height2 = ref(0);
    const isOpen = ref(props.open);
    const animationState = ref("idle");
    const collapsibleContainer = ref(null);
    const isFullyOpen = computed(
      () => animationState.value === "idle" && props.open && isOpen.value
    );
    const isFullyClosed2 = computed(
      () => animationState.value === "idle" && !props.open && !isOpen.value
    );
    const wrapperClassName = computed(() => {
      return classNames(
        styles$1f.Collapsible,
        isFullyClosed2.value && styles$1f.isFullyClosed,
        props.expandOnPrint && styles$1f.expandOnPrint
      );
    });
    const zeroDurationRegex = /^0(ms|s)$/;
    const isTransitionDisabled = (transitionProp) => {
      if (typeof transitionProp === "boolean") {
        return !transitionProp;
      }
      const { duration } = transitionProp;
      if (duration && zeroDurationRegex.test(duration.trim())) {
        return true;
      }
      return false;
    };
    const transitionDisabled = computed(() => isTransitionDisabled(props.transition));
    const transitionStyles = computed(() => typeof props.transition === "object" && {
      transitionDuration: props.transition.duration,
      transitionTimingFunction: props.transition.timingFunction
    });
    const collapsibleStyles = computed(() => {
      return {
        ...transitionStyles.value,
        maxHeight: isFullyOpen.value ? "none" : `${height2.value}px`,
        overflow: isFullyOpen.value ? "visible" : "hidden"
      };
    });
    const handleCompleteAnimation = (event) => {
      const target = event == null ? void 0 : event.target;
      if (target === collapsibleContainer.value) {
        animationState.value = "idle";
        isOpen.value = props.open;
        emits("animation-end");
      }
    };
    const startAnimation = () => {
      if (transitionDisabled.value) {
        isOpen.value = props.open;
        animationState.value = "idle";
        if (props.open && collapsibleContainer.value) {
          height2.value = collapsibleContainer.value.scrollHeight;
        } else {
          height2.value = 0;
        }
      } else {
        animationState.value = "measuring";
      }
    };
    onMounted(() => {
      if (!props.open || !collapsibleContainer.value)
        return;
      height2.value = collapsibleContainer.value.scrollHeight;
    });
    watch(
      () => [props.open, isOpen.value],
      () => {
        if (props.open === isOpen.value) {
          startAnimation();
        }
      },
      { immediate: true }
    );
    watch(
      () => [animationState.value, props.open, isOpen.value],
      () => {
        if (!collapsibleContainer.value)
          return;
        switch (animationState.value) {
          case "idle":
            break;
          case "measuring":
            height2.value = collapsibleContainer.value.scrollHeight;
            animationState.value = "animating";
            break;
          case "animating":
            height2.value = props.open ? collapsibleContainer.value.scrollHeight : 0;
        }
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "collapsibleContainer",
        ref: collapsibleContainer,
        id: _ctx.id,
        style: normalizeStyle(collapsibleStyles.value),
        class: normalizeClass(wrapperClassName.value),
        "aria-hidden": !_ctx.open,
        onTransitionend: handleCompleteAnimation
      }, [
        _ctx.expandOnPrint || !isFullyClosed2.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true)
      ], 46, _hoisted_1$12);
    };
  }
});
function clamp(number, min, max) {
  if (number < min)
    return min;
  if (number > max)
    return max;
  return number;
}
function roundNumberToDecimalPlaces(value, decimals) {
  const exponent = Number(`${value}e${decimals}`);
  const roundedExponent = Math.round(exponent);
  const numberWithDecimalPlaces = Number(`${roundedExponent}e-${decimals}`);
  return numberWithDecimalPlaces;
}
function componentToHex(component) {
  const hex = component.toString(16);
  return hex.length === 1 ? `0${hex}` : hex;
}
function rgbFromHueAndChroma(hue, chroma) {
  const huePrime = hue / 60;
  const hueDelta = 1 - Math.abs(huePrime % 2 - 1);
  const intermediateValue = chroma * hueDelta;
  let red2 = 0;
  let green2 = 0;
  let blue2 = 0;
  if (huePrime >= 0 && huePrime <= 1) {
    red2 = chroma;
    green2 = intermediateValue;
    blue2 = 0;
  }
  if (huePrime >= 1 && huePrime <= 2) {
    red2 = intermediateValue;
    green2 = chroma;
    blue2 = 0;
  }
  if (huePrime >= 2 && huePrime <= 3) {
    red2 = 0;
    green2 = chroma;
    blue2 = intermediateValue;
  }
  if (huePrime >= 3 && huePrime <= 4) {
    red2 = 0;
    green2 = intermediateValue;
    blue2 = chroma;
  }
  if (huePrime >= 4 && huePrime <= 5) {
    red2 = intermediateValue;
    green2 = 0;
    blue2 = chroma;
  }
  if (huePrime >= 5 && huePrime <= 6) {
    red2 = chroma;
    green2 = 0;
    blue2 = intermediateValue;
  }
  return { red: red2, green: green2, blue: blue2 };
}
function rgbToHsbl(color2, type = "b") {
  const { alpha = 1 } = color2;
  const red2 = color2.red / 255;
  const green2 = color2.green / 255;
  const blue2 = color2.blue / 255;
  const largestComponent = Math.max(red2, green2, blue2);
  const smallestComponent = Math.min(red2, green2, blue2);
  const delta = largestComponent - smallestComponent;
  const lightness = (largestComponent + smallestComponent) / 2;
  let saturation = 0;
  if (largestComponent === 0) {
    saturation = 0;
  } else if (type === "b") {
    saturation = delta / largestComponent;
  } else if (type === "l") {
    const baseSaturation = lightness > 0.5 ? delta / (2 - largestComponent - smallestComponent) : delta / (largestComponent + smallestComponent);
    saturation = Number.isNaN(baseSaturation) ? 0 : baseSaturation;
  }
  let huePercentage = 0;
  switch (largestComponent) {
    case red2:
      huePercentage = (green2 - blue2) / delta + (green2 < blue2 ? 6 : 0);
      break;
    case green2:
      huePercentage = (blue2 - red2) / delta + 2;
      break;
    case blue2:
      huePercentage = (red2 - green2) / delta + 4;
      break;
  }
  const hue = huePercentage / 6 * 360;
  const clampedHue = clamp(hue, 0, 360);
  return {
    hue: clampedHue ? roundNumberToDecimalPlaces(clampedHue, 2) : 0,
    saturation: roundNumberToDecimalPlaces(clamp(saturation, 0, 1), 4),
    brightness: roundNumberToDecimalPlaces(clamp(largestComponent, 0, 1), 4),
    lightness: roundNumberToDecimalPlaces(lightness, 4),
    alpha: roundNumberToDecimalPlaces(alpha, 4)
  };
}
function hexToRgb(color2) {
  if (color2.length === 4) {
    const repeatHex = (hex1, hex2) => color2.slice(hex1, hex2).repeat(2);
    const red22 = parseInt(repeatHex(1, 2), 16);
    const green22 = parseInt(repeatHex(2, 3), 16);
    const blue22 = parseInt(repeatHex(3, 4), 16);
    return { red: red22, green: green22, blue: blue22 };
  }
  const red2 = parseInt(color2.slice(1, 3), 16);
  const green2 = parseInt(color2.slice(3, 5), 16);
  const blue2 = parseInt(color2.slice(5, 7), 16);
  return { red: red2, green: green2, blue: blue2 };
}
function rgbToHex({ red: red2, green: green2, blue: blue2 }) {
  return `#${componentToHex(red2)}${componentToHex(green2)}${componentToHex(blue2)}`;
}
function hsbToRgb(color2) {
  const { hue, saturation, brightness } = color2;
  const colorAlpha = color2;
  const alpha = colorAlpha.alpha || 1;
  const chroma = brightness * saturation;
  let { red: red2, green: green2, blue: blue2 } = rgbFromHueAndChroma(hue, chroma);
  const chromaBrightnessDelta = brightness - chroma;
  red2 += chromaBrightnessDelta;
  green2 += chromaBrightnessDelta;
  blue2 += chromaBrightnessDelta;
  return {
    red: Math.round(red2 * 255),
    green: Math.round(green2 * 255),
    blue: Math.round(blue2 * 255),
    alpha
  };
}
function hsbToHex(color2) {
  return rgbToHex(hsbToRgb({ ...color2, alpha: 1 }));
}
function rgbToHsb(color2) {
  const { hue, saturation, brightness, alpha = 1 } = rgbToHsbl(color2, "b");
  return {
    hue,
    saturation,
    brightness,
    alpha
  };
}
const ColorPicker = "Polaris-ColorPicker";
const MainColor = "Polaris-ColorPicker__MainColor";
const fullWidth$2 = "Polaris-ColorPicker--fullWidth";
const Dragger = "Polaris-ColorPicker__Dragger";
const ColorLayer = "Polaris-ColorPicker__ColorLayer";
const HuePicker = "Polaris-ColorPicker__HuePicker";
const AlphaPicker = "Polaris-ColorPicker__AlphaPicker";
const Slidable = "Polaris-ColorPicker__Slidable";
const styles$1e = {
  ColorPicker,
  MainColor,
  fullWidth: fullWidth$2,
  Dragger,
  ColorLayer,
  HuePicker,
  AlphaPicker,
  Slidable
};
const _sfc_main$2h = /* @__PURE__ */ defineComponent({
  __name: "Slidable",
  props: {
    draggerX: {},
    draggerY: {}
  },
  emits: ["change", "dragger-height"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const isDragging2 = ref(false);
    if (!isServer) {
      window.addEventListener("touchmove", (event) => {
        if (isDragging2.value) {
          event.preventDefault();
        }
      }, { passive: false });
    }
    const nodeRef = ref(null);
    const draggerNode = ref(null);
    const draggerPositioning = computed(() => ({
      transform: `translate3d(${props.draggerX}px, ${props.draggerY}px, 0)`
    }));
    onMounted(() => {
      if (!draggerNode.value) {
        return;
      }
      emits("dragger-height", draggerNode.value.clientWidth);
    });
    const startDrag = (event) => {
      if (isMouseDownEvent(event)) {
        handleDraggerMove(event.clientX, event.clientY);
      }
      isDragging2.value = true;
    };
    const handleDragEnd = () => {
      isDragging2.value = false;
    };
    const handleMove = (event) => {
      event.stopImmediatePropagation();
      event.stopPropagation();
      if (event.cancelable) {
        event.preventDefault();
      }
      if (isMouseMoveEvent(event)) {
        handleDraggerMove(event.clientX, event.clientY);
        return;
      }
      handleDraggerMove(event.touches[0].clientX, event.touches[0].clientY);
    };
    const handleDraggerMove = (x, y) => {
      if (!nodeRef.value) {
        return;
      }
      const rect = nodeRef.value.getBoundingClientRect();
      const offsetX = x - rect.left;
      const offsetY = y - rect.top;
      emits("change", { x: offsetX, y: offsetY });
    };
    function isMouseMoveEvent(event) {
      return event.type === "mousemove";
    }
    function isMouseDownEvent(event) {
      return event.type === "mousedown";
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "nodeRef",
        ref: nodeRef,
        class: normalizeClass(unref(styles$1e).Slidable),
        onMousedown: startDrag,
        onTouchstart: startDrag
      }, [
        isDragging2.value ? (openBlock(), createBlock(unref(_sfc_main$1Z), {
          key: 0,
          event: "mouseup",
          handler: handleDragEnd
        })) : createCommentVNode("", true),
        isDragging2.value ? (openBlock(), createBlock(unref(_sfc_main$1Z), {
          key: 1,
          event: "mousemove",
          handler: handleMove,
          passive: false
        })) : createCommentVNode("", true),
        isDragging2.value ? (openBlock(), createBlock(unref(_sfc_main$1Z), {
          key: 2,
          event: "touchmove",
          handler: handleMove,
          passive: false
        })) : createCommentVNode("", true),
        isDragging2.value ? (openBlock(), createBlock(unref(_sfc_main$1Z), {
          key: 3,
          event: "touchend",
          handler: handleDragEnd
        })) : createCommentVNode("", true),
        isDragging2.value ? (openBlock(), createBlock(unref(_sfc_main$1Z), {
          key: 4,
          event: "touchcancel",
          handler: handleDragEnd
        })) : createCommentVNode("", true),
        createBaseVNode("div", {
          ref_key: "draggerNode",
          ref: draggerNode,
          style: normalizeStyle(draggerPositioning.value),
          class: normalizeClass(unref(styles$1e).Dragger)
        }, null, 6)
      ], 34);
    };
  }
});
const VERTICAL_PADDING$1 = 13;
function calculateDraggerY$1(alpha, sliderHeight, draggerHeight) {
  const offset = offsetForAlpha(alpha, sliderHeight, draggerHeight);
  return clamp(offset, 0, sliderHeight);
}
function alphaForDraggerY(y, sliderHeight) {
  const offsetY = clamp(y, 0, sliderHeight);
  return alphaForOffset(offsetY, sliderHeight);
}
function alphaForOffset(offset, sliderHeight) {
  const selectionHeight = offset - VERTICAL_PADDING$1;
  const slidableArea = sliderHeight - VERTICAL_PADDING$1 * 2;
  return clamp(1 - selectionHeight / slidableArea, 0, 1);
}
function offsetForAlpha(alpha, sliderHeight, draggerHeight) {
  const slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING$1);
  return clamp(
    (1 - alpha) * slidableArea + VERTICAL_PADDING$1,
    0,
    sliderHeight - draggerHeight
  );
}
const _sfc_main$2g = /* @__PURE__ */ defineComponent({
  __name: "AlphaPicker",
  props: {
    color: {},
    alpha: {}
  },
  emits: ["change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const sliderHeight = ref(0);
    const draggerHeight = ref(0);
    const alphaPickerRef = ref(null);
    const draggerY = computed(() => {
      return calculateDraggerY$1(props.alpha, sliderHeight.value, draggerHeight.value);
    });
    const background = computed(() => {
      return alphaGradientForColor(props.color);
    });
    onMounted(() => {
      setSliderHeight();
    });
    const setSliderHeight = () => {
      if (alphaPickerRef.value) {
        sliderHeight.value = alphaPickerRef.value.clientHeight;
      }
    };
    const setDraggerHeight = (height2) => {
      draggerHeight.value = height2;
    };
    const handleChange = ({ y }) => {
      const alpha = alphaForDraggerY(y, sliderHeight.value);
      emits("change", alpha);
    };
    function alphaGradientForColor(color2) {
      const { red: red2, green: green2, blue: blue2 } = hsbToRgb(color2);
      const rgb = `${red2}, ${green2}, ${blue2}`;
      return `linear-gradient(to top, rgba(${rgb}, 0) 18px, rgba(${rgb}, 1) calc(100% - 18px))`;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$1e).AlphaPicker),
        ref_key: "alphaPickerRef",
        ref: alphaPickerRef
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$1e).ColorLayer),
          style: normalizeStyle({ background: background.value })
        }, null, 6),
        createVNode(unref(_sfc_main$2h), {
          draggerY: draggerY.value,
          draggerX: 0,
          onChange: handleChange,
          onDraggerHeight: setDraggerHeight
        }, null, 8, ["draggerY"])
      ], 2);
    };
  }
});
const VERTICAL_PADDING = 13;
function calculateDraggerY(hue, sliderHeight, draggerHeight) {
  const offset = offsetForHue(hue, sliderHeight, draggerHeight);
  return clamp(offset, 0, sliderHeight);
}
function hueForDraggerY(y, sliderHeight) {
  const offsetY = clamp(y, 0, sliderHeight);
  return hueForOffset(offsetY, sliderHeight);
}
function hueForOffset(offset, sliderHeight) {
  const selectionHeight = offset - VERTICAL_PADDING;
  const slidableArea = sliderHeight - VERTICAL_PADDING * 2;
  return clamp(selectionHeight / slidableArea * 360, 0, 360);
}
function offsetForHue(hue, sliderHeight, draggerHeight) {
  const slidableArea = sliderHeight - (draggerHeight + VERTICAL_PADDING);
  return clamp(
    hue / 360 * slidableArea + VERTICAL_PADDING,
    0,
    sliderHeight - draggerHeight
  );
}
const _sfc_main$2f = /* @__PURE__ */ defineComponent({
  __name: "HuePicker",
  props: {
    hue: {}
  },
  emits: ["change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const sliderHeight = ref(0);
    const draggerHeight = ref(0);
    const huePickerRef = ref(null);
    const draggerY = computed(() => {
      return calculateDraggerY(props.hue, sliderHeight.value, draggerHeight.value);
    });
    onMounted(() => {
      setSliderHeight();
    });
    const setSliderHeight = () => {
      if (!huePickerRef.value) {
        return;
      }
      sliderHeight.value = huePickerRef.value.clientHeight;
    };
    const setDraggerHeight = (height2) => {
      draggerHeight.value = height2;
    };
    const handleChange = ({ y }) => {
      const hue = hueForDraggerY(y, sliderHeight.value);
      emits("change", hue);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "huePickerRef",
        ref: huePickerRef,
        class: normalizeClass(unref(styles$1e).HuePicker)
      }, [
        createVNode(unref(_sfc_main$2h), {
          "dragger-y": draggerY.value,
          "dragger-x": 0,
          onChange: handleChange,
          onDraggerHeight: setDraggerHeight
        }, null, 8, ["dragger-y"])
      ], 2);
    };
  }
});
const _hoisted_1$11 = ["id"];
const RESIZE_DEBOUNCE_TIME_MS = 200;
const _sfc_main$2e = /* @__PURE__ */ defineComponent({
  __name: "ColorPicker",
  props: /* @__PURE__ */ mergeModels({
    id: {},
    allowAlpha: { type: Boolean },
    fullWidth: { type: Boolean },
    output: {}
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const pickerSize = reactive({ width: 0, height: 0 });
    const colorHsb = reactive({
      hue: 0,
      saturation: 0,
      brightness: 0,
      alpha: 1
    });
    const colorNode = ref(null);
    const huePickerRef = ref(null);
    const draggerX = computed(() => clamp(colorHsb.saturation * pickerSize.width, 0, pickerSize.width));
    const draggerY = computed(() => clamp(pickerSize.height - colorHsb.brightness * pickerSize.height, 0, pickerSize.height));
    const alpha = computed(() => {
      return colorHsb.alpha !== void 0 && props.allowAlpha ? colorHsb.alpha : 1;
    });
    const outputColor = computed(() => {
      if (props.output === "hex") {
        return hsbToHex(colorHsb);
      }
      if (props.output === "rgb") {
        const rgbColor = hsbToRgb(colorHsb);
        return `rgba(${rgbColor.red}, ${rgbColor.green}, ${rgbColor.blue}, ${alpha.value})`;
      }
      return colorHsb;
    });
    const className = classNames(
      styles$1e.ColorPicker,
      props.fullWidth && styles$1e.fullWidth
    );
    const colorString = computed(() => {
      const { red: red2, green: green2, blue: blue2 } = hsbToRgb({
        hue: colorHsb.hue,
        saturation: 1,
        brightness: 1
      });
      return `rgba(${red2}, ${green2}, ${blue2}, ${alpha.value})`;
    });
    if (typeof model.value === "object") {
      colorHsb.alpha = model.value.alpha || 1;
      colorHsb.hue = model.value.hue;
      colorHsb.saturation = model.value.saturation;
      colorHsb.brightness = model.value.brightness;
    }
    if (typeof model.value === "string") {
      let colorRgb;
      if (/#[0-9abcdef]{3,6}/.test(model.value)) {
        colorRgb = { ...hexToRgb(model.value), alpha: 1 };
      } else {
        const colorRgbArr = model.value.replace(/^rgba?\(|\s+|\)$/g, "").split(",");
        colorRgb = {
          red: parseInt(colorRgbArr[0], 10),
          green: parseInt(colorRgbArr[1], 10),
          blue: parseInt(colorRgbArr[2], 10),
          alpha: parseFloat(colorRgbArr[3]) ? parseFloat(colorRgbArr[3]) : 1
        };
      }
      Object.assign(colorHsb, { ...rgbToHsb(colorRgb), alpha: colorRgb.alpha });
    }
    onMounted(() => {
      if (!colorNode.value) {
        return;
      }
      pickerSize.width = colorNode.value.clientWidth;
      pickerSize.height = colorNode.value.clientHeight;
    });
    const handleResize = debounce(() => {
      if (!colorNode.value) {
        return;
      }
      pickerSize.width = colorNode.value.clientWidth;
      pickerSize.height = colorNode.value.clientHeight;
    }, RESIZE_DEBOUNCE_TIME_MS, { leading: true, trailing: true, maxWait: RESIZE_DEBOUNCE_TIME_MS });
    const handleHueChange = (hue) => {
      colorHsb.hue = hue;
      model.value = outputColor.value;
      emits("change", outputColor.value);
    };
    const handleAlphaChange = (alpha2) => {
      colorHsb.alpha = alpha2;
      model.value = outputColor.value;
      emits("change", outputColor.value);
    };
    const handleDraggerMove = ({ x, y }) => {
      colorHsb.saturation = clamp(x / pickerSize.width, 0, 1);
      colorHsb.brightness = clamp(1 - y / pickerSize.height, 0, 1);
      model.value = outputColor.value;
      emits("change", outputColor.value);
    };
    const handlePickerDrag = (e) => {
      e.preventDefault();
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(className)),
        id: _ctx.id,
        onMousedown: handlePickerDrag
      }, [
        createBaseVNode("div", {
          ref_key: "colorNode",
          ref: colorNode,
          class: normalizeClass(unref(styles$1e).MainColor)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(styles$1e).ColorLayer),
            style: normalizeStyle({ backgroundColor: colorString.value })
          }, null, 6),
          createVNode(unref(_sfc_main$2h), {
            draggerX: draggerX.value,
            draggerY: draggerY.value,
            onChange: handleDraggerMove
          }, null, 8, ["draggerX", "draggerY"])
        ], 2),
        createVNode(unref(_sfc_main$2f), {
          ref_key: "huePickerRef",
          ref: huePickerRef,
          hue: colorHsb.hue,
          onChange: handleHueChange
        }, null, 8, ["hue"]),
        _ctx.allowAlpha ? (openBlock(), createBlock(unref(_sfc_main$2g), {
          key: 0,
          alpha: alpha.value,
          color: colorHsb,
          onChange: handleAlphaChange
        }, null, 8, ["alpha", "color"])) : createCommentVNode("", true),
        createVNode(unref(_sfc_main$1Z), {
          event: "resize",
          handler: unref(handleResize)
        }, null, 8, ["handler"])
      ], 42, _hoisted_1$11);
    };
  }
});
function measureColumn(tableData) {
  return function(column, index) {
    const {
      firstVisibleColumnIndex,
      tableLeftVisibleEdge: tableStart,
      tableRightVisibleEdge: tableEnd
    } = tableData;
    const leftEdge = column.offsetLeft;
    const rightEdge = leftEdge + column.offsetWidth;
    const isVisibleLeft = isEdgeVisible(leftEdge, tableStart, tableEnd, "left");
    const isVisibleRight = isEdgeVisible(
      rightEdge,
      tableStart,
      tableEnd,
      "right"
    );
    const isVisible = isVisibleLeft || isVisibleRight;
    const width2 = column.offsetWidth;
    if (isVisible) {
      tableData.firstVisibleColumnIndex = Math.min(
        firstVisibleColumnIndex,
        index
      );
    }
    return { leftEdge, rightEdge, isVisible, width: width2, index };
  };
}
function isEdgeVisible(position, start2, end2, edgeType) {
  const minVisiblePixels = 30;
  return position >= start2 + (edgeType === "left" ? 0 : minVisiblePixels) && position <= end2 - minVisiblePixels;
}
function getPrevAndCurrentColumns(tableData, columnData) {
  const { firstVisibleColumnIndex } = tableData;
  const previousColumnIndex = Math.max(firstVisibleColumnIndex - 1, 0);
  const previousColumn = columnData[previousColumnIndex];
  const currentColumn = columnData[firstVisibleColumnIndex];
  return { previousColumn, currentColumn };
}
const _sfc_main$2d = /* @__PURE__ */ defineComponent({
  __name: "TruncatedText",
  props: {
    className: {}
  },
  setup(__props) {
    const textRef = ref(null);
    const isWithinWidth = computed(() => {
      if (textRef.value) {
        return textRef.value.offsetWidth < textRef.value.scrollWidth;
      }
      return false;
    });
    return (_ctx, _cache) => {
      return isWithinWidth.value ? (openBlock(), createBlock(unref(_sfc_main$4), {
        key: 0,
        content: textRef.value && textRef.value.innerText || ""
      }, {
        default: withCtx(() => [
          createBaseVNode("span", {
            ref_key: "textRef",
            ref: textRef,
            class: normalizeClass(_ctx.className)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)
        ]),
        _: 3
      }, 8, ["content"])) : (openBlock(), createElementBlock("span", {
        key: 1,
        ref_key: "textRef",
        ref: textRef,
        class: normalizeClass(_ctx.className)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2));
    };
  }
});
const _hoisted_1$10 = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$E = /* @__PURE__ */ createBaseVNode("path", {
  "fill-opacity": ".33",
  "fill-rule": "evenodd",
  d: "M9.116 4.823a1.25 1.25 0 0 1 1.768 0L13.53 7.47a.75.75 0 0 1-1.06 1.06L10 6.06 7.53 8.53a.75.75 0 1 1-1.06-1.06z"
}, null, -1);
const _hoisted_3$v = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M9.116 15.177a1.25 1.25 0 0 0 1.768 0l2.646-2.647a.75.75 0 0 0-1.06-1.06L10 13.94l-2.47-2.47a.75.75 0 0 0-1.06 1.06z"
}, null, -1);
const _hoisted_4$h = [
  _hoisted_2$E,
  _hoisted_3$v
];
function render$l(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$10, [..._hoisted_4$h]);
}
const SortDescendingIcon = { render: render$l };
const _hoisted_1$$ = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$D = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M9.116 4.323a1.25 1.25 0 0 1 1.768 0L13.53 6.97a.75.75 0 0 1-1.06 1.06L10 5.56 7.53 8.03a.75.75 0 1 1-1.06-1.06z"
}, null, -1);
const _hoisted_3$u = /* @__PURE__ */ createBaseVNode("path", {
  "fill-opacity": ".33",
  "fill-rule": "evenodd",
  d: "M9.116 15.677a1.25 1.25 0 0 0 1.768 0l2.646-2.647a.75.75 0 0 0-1.06-1.06L10 14.44l-2.47-2.47a.75.75 0 0 0-1.06 1.06z"
}, null, -1);
const _hoisted_4$g = [
  _hoisted_2$D,
  _hoisted_3$u
];
function render$k(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$$, [..._hoisted_4$g]);
}
const SortAscendingIcon = { render: render$k };
const DataTable = "Polaris-DataTable";
const condensed$1 = "Polaris-DataTable--condensed";
const Navigation = "Polaris-DataTable__Navigation";
const Pip = "Polaris-DataTable__Pip";
const ScrollContainer$1 = "Polaris-DataTable__ScrollContainer";
const Table$1 = "Polaris-DataTable__Table";
const TableRow$1 = "Polaris-DataTable__TableRow";
const Cell$1 = "Polaris-DataTable__Cell";
const IncreasedTableDensity = "Polaris-DataTable__IncreasedTableDensity";
const ZebraStripingOnData = "Polaris-DataTable__ZebraStripingOnData";
const RowCountIsEven = "Polaris-DataTable__RowCountIsEven";
const ShowTotalsInFooter = "Polaris-DataTable__ShowTotalsInFooter";
const hoverable = "Polaris-DataTable--hoverable";
const Icon$5 = "Polaris-DataTable__Icon";
const Heading = "Polaris-DataTable__Heading";
const StickyHeaderEnabled = "Polaris-DataTable__StickyHeaderEnabled";
const StickyHeaderWrapper = "Polaris-DataTable__StickyHeaderWrapper";
const ShowTotals = "Polaris-DataTable__ShowTotals";
const Footer$1 = "Polaris-DataTable__Footer";
const StickyHeaderInner = "Polaris-DataTable__StickyHeaderInner";
const StickyHeaderTable = "Polaris-DataTable__StickyHeaderTable";
const FixedFirstColumn = "Polaris-DataTable__FixedFirstColumn";
const StickyTableHeadingsRow = "Polaris-DataTable__StickyTableHeadingsRow";
const TooltipContent = "Polaris-DataTable__TooltipContent";
const styles$1d = {
  DataTable,
  condensed: condensed$1,
  Navigation,
  Pip,
  "Pip-visible": "Polaris-DataTable__Pip--visible",
  ScrollContainer: ScrollContainer$1,
  Table: Table$1,
  TableRow: TableRow$1,
  Cell: Cell$1,
  IncreasedTableDensity,
  ZebraStripingOnData,
  RowCountIsEven,
  ShowTotalsInFooter,
  "Cell-separate": "Polaris-DataTable__Cell--separate",
  "Cell-firstColumn": "Polaris-DataTable__Cell--firstColumn",
  "Cell-numeric": "Polaris-DataTable__Cell--numeric",
  "Cell-truncated": "Polaris-DataTable__Cell--truncated",
  "Cell-header": "Polaris-DataTable__Cell--header",
  "Cell-sortable": "Polaris-DataTable__Cell--sortable",
  "Heading-left": "Polaris-DataTable__Heading--left",
  "Cell-verticalAlignTop": "Polaris-DataTable__Cell--verticalAlignTop",
  "Cell-verticalAlignBottom": "Polaris-DataTable__Cell--verticalAlignBottom",
  "Cell-verticalAlignMiddle": "Polaris-DataTable__Cell--verticalAlignMiddle",
  "Cell-verticalAlignBaseline": "Polaris-DataTable__Cell--verticalAlignBaseline",
  hoverable,
  "Cell-hovered": "Polaris-DataTable__Cell--hovered",
  Icon: Icon$5,
  Heading,
  StickyHeaderEnabled,
  StickyHeaderWrapper,
  "Cell-sorted": "Polaris-DataTable__Cell--sorted",
  "Cell-total": "Polaris-DataTable__Cell--total",
  ShowTotals,
  "Cell-total-footer": "Polaris-DataTable--cellTotalFooter",
  Footer: Footer$1,
  StickyHeaderInner,
  "StickyHeaderInner-isSticky": "Polaris-DataTable__StickyHeaderInner--isSticky",
  StickyHeaderTable,
  FixedFirstColumn,
  StickyTableHeadingsRow,
  TooltipContent
};
const _hoisted_1$_ = ["aria-sort"];
const _hoisted_2$C = ["tabindex"];
const _hoisted_3$t = ["aria-sort"];
const _hoisted_4$f = ["tabindex"];
const _sfc_main$2c = /* @__PURE__ */ defineComponent({
  __name: "Cell",
  props: {
    contentType: {},
    nthColumn: { type: Boolean },
    firstColumn: { type: Boolean },
    truncate: { type: Boolean },
    header: { type: Boolean },
    total: { type: Boolean },
    totalInFooter: { type: Boolean },
    sorted: { type: Boolean },
    sortable: { type: Boolean },
    sortDirection: {},
    defaultSortDirection: { default: "ascending" },
    verticalAlign: { default: "top" },
    colSpan: {},
    style: {},
    setRef: {},
    stickyHeadingCell: { type: Boolean, default: false },
    stickyCellWidth: {},
    hovered: { type: Boolean, default: false },
    inFixedNthColumn: { type: Boolean },
    hasFixedNthColumn: { type: Boolean, default: false },
    fixedCellVisible: { type: Boolean, default: false },
    firstColumnMinWidth: {},
    lastFixedFirstColumn: { type: Boolean }
  },
  emits: ["sort", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const numeric2 = computed(() => props.contentType === "numeric");
    const className = computed(() => classNames(
      styles$1d.Cell,
      styles$1d[`Cell-${variationName("verticalAlign", props.verticalAlign)}`],
      props.firstColumn && styles$1d["Cell-firstColumn"],
      props.truncate && styles$1d["Cell-truncated"],
      props.header && styles$1d["Cell-header"],
      props.total && styles$1d["Cell-total"],
      props.totalInFooter && styles$1d["Cell-total-footer"],
      numeric2.value && styles$1d["Cell-numeric"],
      props.sortable && styles$1d["Cell-sortable"],
      props.sorted && styles$1d["Cell-sorted"],
      props.stickyHeadingCell && styles$1d.StickyHeaderCell,
      props.hovered && styles$1d["Cell-hovered"],
      props.lastFixedFirstColumn && props.inFixedNthColumn && props.fixedCellVisible && styles$1d["Cell-separate"],
      props.nthColumn && props.inFixedNthColumn && props.stickyHeadingCell && styles$1d.FixedFirstColumn
    ));
    const headerClassName = computed(() => classNames(
      props.header && styles$1d.Heading,
      props.header && props.contentType === "text" && styles$1d["Heading-left"]
    ));
    const iconClassName = computed(() => classNames(props.sortable && styles$1d.Icon));
    const direction = computed(() => props.sorted && props.sortDirection ? props.sortDirection : props.defaultSortDirection);
    const source2 = computed(() => direction.value === "descending" ? SortDescendingIcon : SortAscendingIcon);
    const oppositeDirection = computed(() => props.sortDirection === "ascending" ? "descending" : "ascending");
    const sortAccessibilityLabel = computed(() => i18n.translate(
      "Polaris.DataTable.sortAccessibilityLabel",
      { direction: props.sorted ? oppositeDirection.value : direction.value }
    ));
    const focusable = computed(() => !(props.stickyHeadingCell && props.hasFixedNthColumn && props.nthColumn && !props.inFixedNthColumn));
    const colSpanProp = computed(() => props.colSpan && props.colSpan > 1 ? { colSpan: props.colSpan } : {});
    const minWidthStyles = computed(() => props.nthColumn && props.firstColumnMinWidth ? { minWidth: `${props.firstColumnMinWidth}px` } : { minWidth: `${props.stickyCellWidth}px` });
    const handleFocus = (e) => {
      emits("focus", e);
    };
    return (_ctx, _cache) => {
      return _ctx.stickyHeadingCell ? (openBlock(), createElementBlock("th", mergeProps({
        key: 0,
        ref: _ctx.setRef
      }, { ...unref(headerCell).props, ...colSpanProp.value }, {
        class: className.value,
        "aria-sort": _ctx.sortDirection,
        style: { ...props.style, ...minWidthStyles.value },
        "data-index-table-sticky-heading": ""
      }), [
        _ctx.sortable ? (openBlock(), createElementBlock("button", {
          key: 0,
          class: normalizeClass(headerClassName.value),
          tabindex: focusable.value ? 0 : -1,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("sort")),
          onFocus: handleFocus
        }, [
          createBaseVNode("span", {
            class: normalizeClass(iconClassName.value)
          }, [
            createVNode(unref(_sfc_main$1K), {
              source: source2.value,
              accessibilityLabel: sortAccessibilityLabel.value
            }, null, 8, ["source", "accessibilityLabel"])
          ], 2),
          renderSlot(_ctx.$slots, "default")
        ], 42, _hoisted_2$C)) : renderSlot(_ctx.$slots, "default", { key: 1 })
      ], 16, _hoisted_1$_)) : _ctx.header || _ctx.firstColumn || _ctx.nthColumn ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        _ctx.header ? (openBlock(), createElementBlock("th", mergeProps({
          key: 0,
          ref: _ctx.setRef
        }, { ...unref(headerCell).props, ...colSpanProp.value }, {
          class: className.value,
          "aria-sort": _ctx.sortDirection,
          scope: "col",
          style: { ...minWidthStyles.value }
        }), [
          _ctx.sortable ? (openBlock(), createElementBlock("button", {
            key: 0,
            class: normalizeClass(headerClassName.value),
            tabindex: focusable.value ? 0 : -1,
            onClick: _cache[1] || (_cache[1] = ($event) => emits("sort")),
            onFocus: handleFocus
          }, [
            createBaseVNode("span", {
              class: normalizeClass(iconClassName.value)
            }, [
              createVNode(unref(_sfc_main$1K), {
                source: source2.value,
                accessibilityLabel: sortAccessibilityLabel.value
              }, null, 8, ["source", "accessibilityLabel"])
            ], 2),
            renderSlot(_ctx.$slots, "default")
          ], 42, _hoisted_4$f)) : renderSlot(_ctx.$slots, "default", { key: 1 })
        ], 16, _hoisted_3$t)) : (openBlock(), createElementBlock("th", mergeProps({
          key: 1,
          ref: _ctx.setRef
        }, { ...colSpanProp.value }, {
          class: className.value,
          scope: "row",
          style: { ...minWidthStyles.value }
        }), [
          _ctx.truncate ? (openBlock(), createBlock(_sfc_main$2d, {
            key: 0,
            className: unref(styles$1d).TooltipContent
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["className"])) : renderSlot(_ctx.$slots, "default", { key: 1 })
        ], 16))
      ], 64)) : (openBlock(), createElementBlock("td", mergeProps({
        key: 2,
        class: className.value
      }, colSpanProp.value), [
        renderSlot(_ctx.$slots, "default")
      ], 16));
    };
  }
});
const _hoisted_1$Z = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$B = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M11.764 5.204a.75.75 0 0 1 .032 1.06L8.28 10l3.516 3.736a.75.75 0 1 1-1.092 1.028l-4-4.25a.75.75 0 0 1 0-1.028l4-4.25a.75.75 0 0 1 1.06-.032"
}, null, -1);
const _hoisted_3$s = [
  _hoisted_2$B
];
function render$j(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$Z, [..._hoisted_3$s]);
}
const ChevronLeftIcon = { render: render$j };
const _hoisted_1$Y = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$A = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M7.72 14.53a.75.75 0 0 1 0-1.06L11.19 10 7.72 6.53a.75.75 0 0 1 1.06-1.06l4 4a.75.75 0 0 1 0 1.06l-4 4a.75.75 0 0 1-1.06 0"
}, null, -1);
const _hoisted_3$r = [
  _hoisted_2$A
];
function render$i(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$Y, [..._hoisted_3$r]);
}
const ChevronRightIcon = { render: render$i };
const _sfc_main$2b = /* @__PURE__ */ defineComponent({
  __name: "Navigation",
  props: {
    columnVisibilityData: {},
    isScrolledFarthestLeft: { type: Boolean },
    isScrolledFarthestRight: { type: Boolean },
    fixedFirstColumns: {},
    setRef: { type: Function }
  },
  emits: ["navigate-table-left", "navigate-table-right"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const emits = __emit;
    const i18n = useI18n();
    const navigationRef = ref(null);
    const leftA11yLabel = i18n.translate(
      "Polaris.DataTable.navAccessibilityLabel",
      { direction: "left" }
    );
    const rightA11yLabel = i18n.translate(
      "Polaris.DataTable.navAccessibilityLabel",
      { direction: "right" }
    );
    __expose({ el: navigationRef });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$1d).Navigation),
        ref: _ctx.setRef
      }, [
        createVNode(unref(_sfc_main$2t), {
          plain: "",
          icon: unref(ChevronLeftIcon),
          disabled: _ctx.isScrolledFarthestLeft,
          accessibilityLabel: unref(leftA11yLabel),
          onClick: _cache[0] || (_cache[0] = ($event) => emits("navigate-table-left"))
        }, null, 8, ["icon", "disabled", "accessibilityLabel"]),
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.columnVisibilityData, (column, index) => {
          return openBlock(), createElementBlock(Fragment, {
            key: `pip-${index}`
          }, [
            _ctx.fixedFirstColumns <= index ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(classNames)(unref(styles$1d).Pip, column.isVisible && unref(styles$1d)["Pip-visible"]))
            }, null, 2)) : createCommentVNode("", true)
          ], 64);
        }), 128)),
        createVNode(unref(_sfc_main$2t), {
          plain: "",
          icon: unref(ChevronRightIcon),
          disabled: _ctx.isScrolledFarthestRight,
          accessibilityLabel: unref(rightA11yLabel),
          onClick: _cache[1] || (_cache[1] = ($event) => emits("navigate-table-right"))
        }, null, 8, ["icon", "disabled", "accessibilityLabel"])
      ], 2);
    };
  }
});
const _hoisted_1$X = { key: 0 };
const _hoisted_2$z = { key: 0 };
const _hoisted_3$q = { key: 0 };
const _hoisted_4$e = { key: 0 };
const _sfc_main$2a = /* @__PURE__ */ defineComponent({
  __name: "DataTable",
  props: {
    columnContentTypes: {},
    headings: {},
    totals: {},
    totalsName: {},
    showTotalsInFooter: { type: Boolean },
    rows: {},
    hideScrollIndicator: { type: Boolean, default: false },
    truncate: { type: Boolean },
    verticalAlign: {},
    footerContent: { type: [String, Number, Boolean, null] },
    hoverable: { type: Boolean, default: true },
    sortable: {},
    defaultSortDirection: {},
    initialSortColumnIndex: { default: 0 },
    increasedTableDensity: { type: Boolean, default: false },
    hasZebraStripingOnData: { type: Boolean, default: false },
    stickyHeader: { type: Boolean, default: false },
    hasFixedFirstColumn: { type: Boolean },
    fixedFirstColumns: {},
    firstColumnMinWidth: {},
    pagination: {}
  },
  emits: ["sort"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const isMounted = ref(false);
    const condensed2 = ref(false);
    const columnVisibilityData = ref([]);
    const previousColumn = ref(void 0);
    const currentColumn = ref(void 0);
    const sortedColumnIndex = ref(void 0);
    const sortDirection = ref(void 0);
    const isScrolledFarthestLeft = ref(true);
    const isScrolledFarthestRight = ref(false);
    const rowHovered = ref();
    const dataTable = ref(null);
    const scrollContainer = ref(null);
    const table2 = ref(null);
    const stickyTable = ref(null);
    const stickyNav = ref(null);
    const headerNav = ref(null);
    const tableHeadings = ref([]);
    const stickyHeadings = ref([]);
    const tableHeadingWidths = ref([]);
    const stickyHeaderActive = ref(false);
    const scrollStopTimer = ref(null);
    const handleResize = debounce(() => {
      let tmpCondensed = false;
      if (table2.value && scrollContainer.value) {
        tmpCondensed = table2.value.scrollWidth > scrollContainer.value.clientWidth + 1;
      }
      calculateColumnVisibilityData(tmpCondensed);
      condensed2.value = tmpCondensed;
    }, 40, { trailing: true, leading: true, maxWait: 40 });
    const fixedFirstColumns = computed(() => {
      const numberOfFixedFirstColumns = props.hasFixedFirstColumn && !props.fixedFirstColumns ? 1 : props.fixedFirstColumns || 0;
      if (numberOfFixedFirstColumns >= props.headings.length) {
        return 0;
      }
      return numberOfFixedFirstColumns;
    });
    const rowCountIsEven = computed(() => props.rows.length % 2 === 0);
    const className = computed(() => classNames(
      styles$1d.DataTable,
      condensed2.value && styles$1d.condensed,
      props.totals && styles$1d.ShowTotals,
      props.showTotalsInFooter && styles$1d.ShowTotalsInFooter,
      props.hasZebraStripingOnData && styles$1d.ZebraStripingOnData,
      props.hasZebraStripingOnData && rowCountIsEven.value && styles$1d.RowCountIsEven
    ));
    const wrapperClassName = computed(() => classNames(
      styles$1d.TableWrapper,
      condensed2.value && styles$1d.condensed,
      props.increasedTableDensity && styles$1d.IncreasedTableDensity,
      props.stickyHeader && styles$1d.StickyHeaderEnabled
    ));
    const nthColumns = computed(() => props.rows.map((row) => row.slice(0, fixedFirstColumns.value)));
    const nthHeadings = computed(() => props.headings.slice(0, fixedFirstColumns.value));
    const nthTotals = computed(() => {
      var _a;
      return (_a = props.totals) == null ? void 0 : _a.slice(0, fixedFirstColumns.value);
    });
    const tableHeaderRows = computed(() => {
      var _a;
      return (_a = table2.value) == null ? void 0 : _a.children[0].childNodes;
    });
    const tableBodyRows = computed(() => {
      var _a;
      return (_a = table2.value) == null ? void 0 : _a.children[1].childNodes;
    });
    const headerRowHeights = computed(() => getRowClientHeights(tableHeaderRows.value));
    const bodyRowHeights = computed(() => getRowClientHeights(tableBodyRows.value));
    const fixedFirstColumnClassName = computed(() => classNames(
      styles$1d.FixedFirstColumn,
      !isScrolledFarthestLeft.value && styles$1d.separate
    ));
    const tableRowClassName = computed(() => classNames(
      styles$1d.TableRow,
      props.hoverable && styles$1d.hoverable
    ));
    const stickyHeaderInnerClassNames = computed(() => classNames(
      styles$1d.StickyHeaderInner,
      stickyHeaderActive.value && styles$1d["StickyHeaderInner-isSticky"]
    ));
    const stickyHeaderTableClassNames = computed(() => classNames(
      styles$1d.StickyHeaderTable,
      !isScrolledFarthestLeft.value && styles$1d.separate
    ));
    const totalsRowHeading = computed(() => {
      const totalsLabel = props.totalsName ? props.totalsName : {
        singular: i18n.translate("Polaris.DataTable.totalRowHeading"),
        plural: i18n.translate("Polaris.DataTable.totalsRowHeading")
      };
      return props.totals && props.totals.filter((total) => total !== "").length > 1 ? totalsLabel.plural : totalsLabel.singular;
    });
    onMounted(() => {
      isMounted.value = true;
      handleResize();
    });
    onBeforeUnmount(() => {
      handleResize.cancel();
    });
    const getRowClientHeights = (rows) => {
      const heights = [];
      if (!rows) {
        return heights;
      }
      rows.forEach((row) => {
        heights.push(row.clientHeight);
      });
      return heights;
    };
    const setCellRef = ({
      cellRef,
      index,
      inStickyHeader
    }) => {
      if (!cellRef) {
        return;
      }
      if (inStickyHeader) {
        stickyHeadings.value[index] = cellRef;
        const button = cellRef.querySelector("button");
        if (!button) {
          return;
        }
        button.addEventListener("focus", handleHeaderButtonFocus);
      } else {
        tableHeadings.value[index] = cellRef;
        tableHeadingWidths.value[index] = cellRef.clientWidth;
      }
    };
    const changeHeadingFocus = () => {
      var _a, _b;
      const stickyFocusedItemIndex = stickyHeadings.value.findIndex(
        (item) => {
          var _a2;
          return item === ((_a2 = document.activeElement) == null ? void 0 : _a2.parentElement);
        }
      );
      const tableFocusedItemIndex = tableHeadings.value.findIndex(
        (item) => {
          var _a2;
          return item === ((_a2 = document.activeElement) == null ? void 0 : _a2.parentElement);
        }
      );
      const arrowsInStickyNav = (_a = stickyNav.value) == null ? void 0 : _a.querySelectorAll("button");
      const arrowsInHeaderNav = (_b = headerNav.value) == null ? void 0 : _b.querySelectorAll("button");
      let stickyFocusedNavIndex = -1;
      arrowsInStickyNav == null ? void 0 : arrowsInStickyNav.forEach((item, index) => {
        if (item === document.activeElement) {
          stickyFocusedNavIndex = index;
        }
      });
      let headerFocusedNavIndex = -1;
      arrowsInHeaderNav == null ? void 0 : arrowsInHeaderNav.forEach((item, index) => {
        if (item === document.activeElement) {
          headerFocusedNavIndex = index;
        }
      });
      if (stickyFocusedItemIndex < 0 && tableFocusedItemIndex < 0 && stickyFocusedNavIndex < 0 && headerFocusedNavIndex < 0) {
        return null;
      }
      let button;
      if (stickyFocusedItemIndex >= 0) {
        button = tableHeadings.value[stickyFocusedItemIndex].querySelector("button");
      } else if (tableFocusedItemIndex >= 0) {
        button = stickyHeadings.value[tableFocusedItemIndex].querySelector("button");
      }
      if (stickyFocusedNavIndex >= 0) {
        button = arrowsInHeaderNav == null ? void 0 : arrowsInHeaderNav[stickyFocusedNavIndex];
      } else if (headerFocusedNavIndex >= 0) {
        button = arrowsInStickyNav == null ? void 0 : arrowsInStickyNav[headerFocusedNavIndex];
      }
      if (!button) {
        return null;
      }
      button.style.visibility = "visible";
      button.focus();
      button.style.removeProperty("visibility");
    };
    const calculateColumnVisibilityData = (tmpCondensed) => {
      if ((props.stickyHeader || tmpCondensed) && table2.value && scrollContainer.value && dataTable.value) {
        const headerCells = table2.value.querySelectorAll(
          headerCell.selector
        );
        const rightMostHeader = headerCells[fixedFirstColumns.value - 1];
        const nthColumnWidth = fixedFirstColumns.value ? rightMostHeader.offsetLeft + rightMostHeader.offsetWidth : 0;
        if (headerCells.length > 0) {
          const firstVisibleColumnIndex = headerCells.length - 1;
          const tableLeftVisibleEdge = scrollContainer.value.scrollLeft + nthColumnWidth;
          const tableRightVisibleEdge = scrollContainer.value.scrollLeft + dataTable.value.offsetWidth;
          const tableData = {
            firstVisibleColumnIndex,
            tableLeftVisibleEdge,
            tableRightVisibleEdge
          };
          const tmpColumnVisibilityData = [...headerCells].map(
            measureColumn(tableData)
          );
          const lastColumn = tmpColumnVisibilityData[tmpColumnVisibilityData.length - 1];
          const tmpIsScrolledFarthestLeft = fixedFirstColumns.value ? tableLeftVisibleEdge === nthColumnWidth : tableLeftVisibleEdge === 0;
          const {
            previousColumn: tmpPreviousColumn,
            currentColumn: tmpCurrentColumn
          } = getPrevAndCurrentColumns(tableData, tmpColumnVisibilityData);
          columnVisibilityData.value = tmpColumnVisibilityData;
          isScrolledFarthestLeft.value = tmpIsScrolledFarthestLeft;
          isScrolledFarthestRight.value = lastColumn.rightEdge <= tableRightVisibleEdge;
          previousColumn.value = tmpPreviousColumn;
          currentColumn.value = tmpCurrentColumn;
          return;
        }
      }
      columnVisibilityData.value = [];
      previousColumn.value = void 0;
      currentColumn.value = void 0;
    };
    const handleHeaderButtonFocus = (event) => {
      var _a;
      if (!scrollContainer.value || event.target == null || columnVisibilityData.value.length === 0) {
        return;
      }
      const target = event.target;
      const currentCell = target.parentNode;
      const tableScrollLeft = scrollContainer.value.scrollLeft;
      const tableViewableWidth = scrollContainer.value.offsetWidth;
      const tableRightEdge = tableScrollLeft + tableViewableWidth;
      const nthColumnWidth = columnVisibilityData.value.length > 0 ? (_a = columnVisibilityData.value[fixedFirstColumns.value]) == null ? void 0 : _a.rightEdge : 0;
      const currentColumnLeftEdge = currentCell.offsetLeft;
      const currentColumnRightEdge = currentCell.offsetLeft + currentCell.offsetWidth;
      if (tableScrollLeft > currentColumnLeftEdge - nthColumnWidth) {
        scrollContainer.value.scrollLeft = currentColumnLeftEdge - nthColumnWidth;
      }
      if (currentColumnRightEdge > tableRightEdge) {
        scrollContainer.value.scrollLeft = currentColumnRightEdge - tableViewableWidth;
      }
    };
    const stickyHeaderScrolling = () => {
      if (!stickyTable.value || !scrollContainer.value) {
        return;
      }
      stickyTable.value.scrollLeft = scrollContainer.value.scrollLeft;
    };
    const scrollListener = () => {
      var _a, _b;
      if (scrollStopTimer.value) {
        clearTimeout(scrollStopTimer.value);
      }
      scrollStopTimer.value = setTimeout(() => {
        calculateColumnVisibilityData(condensed2.value);
      }, 100);
      if (isScrolledFarthestLeft.value !== (((_a = scrollContainer.value) == null ? void 0 : _a.scrollLeft) === 0)) {
        isScrolledFarthestLeft.value = ((_b = scrollContainer.value) == null ? void 0 : _b.scrollLeft) === 0;
      }
      if (props.stickyHeader && stickyHeaderActive.value) {
        stickyHeaderScrolling();
      }
    };
    const handleHover = (row) => () => {
      rowHovered.value = row;
    };
    const handleFocus = (event) => {
      var _a;
      if (!scrollContainer.value || !event.target) {
        return;
      }
      const currentCell = event.target.parentNode;
      const hasFixedFirstColumn = columnVisibilityData.value.length > 0;
      const nthColumnWidth = hasFixedFirstColumn ? (_a = columnVisibilityData.value[fixedFirstColumns.value]) == null ? void 0 : _a.rightEdge : 0;
      const currentColumnLeftEdge = currentCell.offsetLeft;
      const desiredScrollLeft = currentColumnLeftEdge - nthColumnWidth;
      if (scrollContainer.value.scrollLeft > desiredScrollLeft) {
        scrollContainer.value.scrollLeft = desiredScrollLeft;
      }
    };
    const navigateTable = (direction) => {
      var _a;
      const nthColumnWidth = (_a = columnVisibilityData.value[fixedFirstColumns.value - 1]) == null ? void 0 : _a.rightEdge;
      if (!currentColumn.value || !previousColumn.value) {
        return;
      }
      let prevWidths = 0;
      for (let index = 0; index < currentColumn.value.index; index++) {
        prevWidths += columnVisibilityData.value[index].width;
      }
      const handleScroll = () => {
        var _a2, _b, _c, _d;
        let newScrollLeft = 0;
        if (fixedFirstColumns.value) {
          newScrollLeft = direction === "right" ? prevWidths - nthColumnWidth + (((_a2 = currentColumn.value) == null ? void 0 : _a2.width) ?? 0) : prevWidths - (((_b = previousColumn.value) == null ? void 0 : _b.width) ?? 0) - nthColumnWidth;
        } else {
          newScrollLeft = direction === "right" ? ((_c = currentColumn.value) == null ? void 0 : _c.rightEdge) ?? 0 : ((_d = previousColumn.value) == null ? void 0 : _d.leftEdge) ?? 0;
        }
        if (scrollContainer.value) {
          scrollContainer.value.scrollLeft = newScrollLeft;
          requestAnimationFrame(() => {
            calculateColumnVisibilityData(condensed2.value);
          });
        }
      };
      return handleScroll;
    };
    const getColSpan = (rowLength, headingsLength, contentTypesLength, cellIndex) => {
      if (fixedFirstColumns.value) {
        return 1;
      }
      const rowLen = rowLength ? rowLength : 1;
      const colLen = headingsLength ? headingsLength : contentTypesLength;
      const colSpan = Math.floor(colLen / rowLen);
      const remainder = colLen % rowLen;
      return cellIndex === 0 ? colSpan + remainder : colSpan;
    };
    const defaultOnSort = (headingIndex) => {
      sortDirection.value = sortDirection.value ?? toRaw(props.defaultSortDirection || "ascending");
      sortedColumnIndex.value = sortedColumnIndex.value ?? toRaw(props.initialSortColumnIndex);
      let newSortDirection = props.defaultSortDirection || "ascending";
      if (sortedColumnIndex.value === headingIndex) {
        newSortDirection = sortDirection.value === "ascending" ? "descending" : "ascending";
      }
      const handleSort = () => {
        sortDirection.value = newSortDirection;
        sortedColumnIndex.value = headingIndex;
        emits("sort", headingIndex, newSortDirection);
      };
      return handleSort;
    };
    const stickyHandler = (isSticky) => {
      setTimeout(changeHeadingFocus, 10);
      stickyHeaderActive.value = isSticky;
    };
    const navigationMarkup = (location2) => h(
      _sfc_main$2b,
      {
        columnVisibilityData: columnVisibilityData.value,
        isScrolledFarthestLeft: isScrolledFarthestLeft.value,
        isScrolledFarthestRight: isScrolledFarthestRight.value,
        onNavigateTableLeft: navigateTable("left"),
        onNavigateTableRight: navigateTable("right"),
        fixedFirstColumns: fixedFirstColumns.value,
        setRef: (ref2) => {
          if (location2 === "sticky") {
            stickyNav.value = ref2;
          } else {
            headerNav.value = ref2;
          }
        }
      }
    );
    const renderHeading = ({
      heading,
      headingIndex,
      inFixedNthColumn,
      inStickyHeader
    }) => {
      sortDirection.value = sortDirection.value ?? props.defaultSortDirection;
      sortedColumnIndex.value = sortedColumnIndex.value ?? (props.initialSortColumnIndex || 0);
      let sortableHeadingProps;
      const headingCellId = `heading-cell-${headingIndex}`;
      const stickyHeaderId = `stickyheader-${headingIndex}`;
      const id = inStickyHeader ? stickyHeaderId : headingCellId;
      if (props.sortable) {
        const isSortable = props.sortable[headingIndex];
        const isSorted = isSortable && sortedColumnIndex.value === headingIndex;
        const direction = isSorted ? sortDirection.value : "none";
        sortableHeadingProps = {
          defaultSortDirection: props.defaultSortDirection,
          sorted: isSorted,
          sortable: isSortable,
          sortDirection: direction,
          inFixedNthColumn: fixedFirstColumns.value,
          onSort: defaultOnSort(headingIndex)
        };
      }
      const stickyCellWidth = inStickyHeader ? tableHeadingWidths.value[headingIndex] : void 0;
      const fixedCellVisible = !isScrolledFarthestLeft.value;
      const cellProps = {
        header: true,
        stickyHeadingCell: inStickyHeader,
        contentType: props.columnContentTypes[headingIndex],
        nthColumn: headingIndex < fixedFirstColumns.value,
        truncate: props.truncate,
        ...sortableHeadingProps,
        verticalAlign: props.verticalAlign,
        stickyCellWidth,
        fixedCellVisible,
        firstColumnMinWidth: props.firstColumnMinWidth,
        onFocus: handleFocus
      };
      if (inFixedNthColumn && inStickyHeader) {
        return () => {
          var _a;
          return [
            h(_sfc_main$2c, {
              key: id,
              ...cellProps,
              setRef: (ref2) => {
                setCellRef({ cellRef: ref2, index: headingIndex, inStickyHeader });
              },
              inFixedNthColumn: false
            }, () => heading),
            h(_sfc_main$2c, {
              key: `${id}-sticky`,
              ...cellProps,
              setRef: (ref2) => {
                setCellRef({ cellRef: ref2, index: headingIndex, inStickyHeader });
              },
              inFixedNthColumn: Boolean(fixedFirstColumns.value),
              lastFixedFirstColumn: headingIndex === fixedFirstColumns.value - 1,
              style: { left: `${(_a = columnVisibilityData.value[headingIndex]) == null ? void 0 : _a.leftEdge}px` }
            }, () => heading)
          ];
        };
      }
      return () => h(_sfc_main$2c, {
        key: id,
        ...cellProps,
        setRef: (ref2) => {
          setCellRef({ cellRef: ref2, index: headingIndex, inStickyHeader });
        },
        inFixedNthColumn,
        lastFixedFirstColumn: headingIndex === fixedFirstColumns.value - 1
      }, () => heading);
    };
    const renderTotals = ({ total, index }) => {
      const id = `totals-cell-${index}`;
      let content;
      let contentType;
      if (!index) {
        content = totalsRowHeading.value;
      }
      if (total !== "" && index > 0) {
        content = total;
        contentType = props.columnContentTypes[index];
      }
      return () => h(_sfc_main$2c, {
        key: id,
        total: true,
        totalInFooter: props.showTotalsInFooter,
        nthColumn: index <= fixedFirstColumns.value - 1,
        firstColumn: !index,
        contentType,
        truncate: props.truncate,
        verticalAlign: props.verticalAlign
      }, () => content);
    };
    const defaultRenderRow = ({
      row,
      index,
      inFixedNthColumn,
      rowHeights
    }) => {
      return () => h(
        "tr",
        {
          key: `row-${index}`,
          class: tableRowClassName.value,
          onMouseenter: handleHover(index),
          onMouseleave: handleHover()
        },
        row.map((content, cellIndex) => {
          const hovered = rowHovered.value === index;
          const id = `cell-${cellIndex}-row-${index}`;
          const colSpan = getColSpan(row.length, props.headings.length, props.columnContentTypes.length, cellIndex);
          return h(_sfc_main$2c, {
            key: id,
            contentType: props.columnContentTypes[cellIndex],
            nthColumn: cellIndex <= fixedFirstColumns.value - 1,
            firstColumn: cellIndex === 0,
            truncate: props.truncate,
            verticalAlign: props.verticalAlign,
            colSpan,
            hovered,
            inFixedNthColumn: condensed2.value && inFixedNthColumn,
            style: { height: rowHeights ? `${rowHeights == null ? void 0 : rowHeights[index]}px` : void 0 }
          }, () => content);
        })
      );
    };
    return (_ctx, _cache) => {
      var _a;
      return openBlock(), createElementBlock("div", {
        ref_key: "dataTable",
        ref: dataTable,
        class: normalizeClass(wrapperClassName.value)
      }, [
        _ctx.stickyHeader && isMounted.value ? (openBlock(), createElementBlock("div", {
          key: 0,
          role: "presentation",
          class: normalizeClass(unref(styles$1d).StickyHeaderWrapper)
        }, [
          createVNode(unref(_sfc_main$q), {
            "bounding-element": dataTable.value,
            onStickyChange: stickyHandler
          }, {
            default: withCtx(() => [
              createBaseVNode("div", {
                class: normalizeClass(stickyHeaderInnerClassNames.value)
              }, [
                createBaseVNode("div", null, [
                  !_ctx.hideScrollIndicator ? (openBlock(), createBlock(resolveDynamicComponent(navigationMarkup("sticky")), { key: 0 })) : createCommentVNode("", true)
                ]),
                createBaseVNode("table", {
                  ref_key: "stickyTable",
                  ref: stickyTable,
                  class: normalizeClass(stickyHeaderTableClassNames.value)
                }, [
                  createBaseVNode("thead", null, [
                    createBaseVNode("tr", {
                      class: normalizeClass(unref(styles$1d).StickyTableHeadingsRow)
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.headings, (heading, headingIndex) => {
                        return openBlock(), createBlock(resolveDynamicComponent(renderHeading({ heading, headingIndex, inFixedNthColumn: Boolean(fixedFirstColumns.value && headingIndex <= fixedFirstColumns.value - 1), inStickyHeader: true })), { key: headingIndex });
                      }), 128))
                    ], 2)
                  ])
                ], 2)
              ], 2)
            ]),
            _: 1
          }, 8, ["bounding-element"])
        ], 2)) : createCommentVNode("", true),
        !_ctx.hideScrollIndicator ? (openBlock(), createBlock(resolveDynamicComponent(navigationMarkup("header")), { key: 1 })) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass(className.value)
        }, [
          createBaseVNode("div", {
            ref_key: "scrollContainer",
            ref: scrollContainer,
            class: normalizeClass(unref(styles$1d).ScrollContainer)
          }, [
            createVNode(unref(_sfc_main$1Z), {
              event: "resize",
              handler: unref(handleResize)
            }, null, 8, ["handler"]),
            createVNode(unref(_sfc_main$1Z), {
              event: "scroll",
              capture: "",
              passive: "",
              handler: scrollListener
            }),
            createBaseVNode("table", {
              class: normalizeClass(fixedFirstColumnClassName.value),
              style: normalizeStyle({ width: `${(_a = columnVisibilityData.value[fixedFirstColumns.value - 1]) == null ? void 0 : _a.rightEdge}px` })
            }, [
              createBaseVNode("thead", null, [
                createBaseVNode("tr", {
                  style: normalizeStyle({ height: `${headerRowHeights.value[0]}px` })
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(nthHeadings.value, (heading, headingIndex) => {
                    return openBlock(), createBlock(resolveDynamicComponent(renderHeading({ heading, headingIndex, inFixedNthColumn: true, inStickyHeader: false })), { key: headingIndex });
                  }), 128))
                ], 4),
                _ctx.totals && !_ctx.showTotalsInFooter ? (openBlock(), createElementBlock("tr", {
                  key: 0,
                  style: normalizeStyle({ height: `${headerRowHeights.value[1]}px` })
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(nthTotals.value, (total, index) => {
                    return openBlock(), createBlock(resolveDynamicComponent(renderTotals({ total, index })), { key: index });
                  }), 128))
                ], 4)) : createCommentVNode("", true)
              ]),
              createBaseVNode("tbody", null, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(nthColumns.value, (row, index) => {
                  return openBlock(), createBlock(resolveDynamicComponent(defaultRenderRow({ row, index, inFixedNthColumn: true, rowHeights: bodyRowHeights.value })));
                }), 256))
              ]),
              _ctx.totals && _ctx.showTotalsInFooter ? (openBlock(), createElementBlock("tfoot", _hoisted_1$X, [
                createBaseVNode("tr", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(nthTotals.value, (total, index) => {
                    return openBlock(), createBlock(resolveDynamicComponent(renderTotals({ total, index })));
                  }), 256))
                ])
              ])) : createCommentVNode("", true)
            ], 6),
            createBaseVNode("table", {
              ref_key: "table",
              ref: table2,
              class: normalizeClass(unref(styles$1d).Table)
            }, [
              createBaseVNode("thead", null, [
                createBaseVNode("tr", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.headings, (heading, headingIndex) => {
                    return openBlock(), createBlock(resolveDynamicComponent(renderHeading({ heading, headingIndex, inFixedNthColumn: false, inStickyHeader: false })));
                  }), 256))
                ]),
                !_ctx.showTotalsInFooter && _ctx.totals ? (openBlock(), createElementBlock("tr", _hoisted_2$z, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.totals, (total, index) => {
                    return openBlock(), createBlock(resolveDynamicComponent(renderTotals({ total, index })));
                  }), 256))
                ])) : createCommentVNode("", true)
              ]),
              createBaseVNode("tbody", null, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.rows, (row, index) => {
                  return openBlock(), createBlock(resolveDynamicComponent(defaultRenderRow({ row, index, inFixedNthColumn: false })));
                }), 256))
              ]),
              _ctx.showTotalsInFooter ? (openBlock(), createElementBlock("tfoot", _hoisted_3$q, [
                _ctx.totals ? (openBlock(), createElementBlock("tr", _hoisted_4$e, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.totals, (total, index) => {
                    return openBlock(), createBlock(resolveDynamicComponent(renderTotals({ total, index })));
                  }), 256))
                ])) : createCommentVNode("", true)
              ])) : createCommentVNode("", true)
            ], 2)
          ], 2),
          _ctx.pagination ? (openBlock(), createBlock(unref(_sfc_main$Q), mergeProps({
            key: 0,
            type: "table"
          }, _ctx.pagination), null, 16)) : createCommentVNode("", true),
          _ctx.footerContent ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(styles$1d).Footer)
          }, [
            typeof _ctx.footerContent === "string" || typeof _ctx.footerContent === "number" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createTextVNode(toDisplayString(_ctx.footerContent), 1)
            ], 64)) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.footerContent), { key: 1 }))
          ], 2)) : createCommentVNode("", true)
        ], 2)
      ], 2);
    };
  }
});
const WEEK_LENGTH = 7;
function getWeeksForMonth(month, year, weekStartsOn = 0) {
  const firstOfMonth = new Date(year, month, 1);
  const firstDayOfWeek = firstOfMonth.getDay();
  const weeks = [[]];
  let currentWeek = weeks[0];
  let currentDate = firstOfMonth;
  const orderedWeekday = getOrderedWeekdays(weekStartsOn);
  for (let i = 0; i < orderedWeekday.indexOf(firstDayOfWeek); i++) {
    currentWeek.push(null);
  }
  while (currentDate.getMonth() === month) {
    if (currentWeek.length === WEEK_LENGTH) {
      currentWeek = [];
      weeks.push(currentWeek);
    }
    currentWeek.push(currentDate);
    currentDate = new Date(year, month, currentDate.getDate() + 1);
  }
  while (currentWeek.length < 7) {
    currentWeek.push(null);
  }
  return weeks;
}
function dateIsInRange(day, range) {
  if (day == null) {
    return false;
  }
  const { start: start2, end: end2 } = range;
  return Boolean(start2 && day > start2 && end2 && day < end2);
}
function dateIsSelected(day, range) {
  if (day == null) {
    return false;
  }
  const { start: start2, end: end2 } = range;
  return Boolean(
    start2 && isSameDay(start2, day) || end2 && isSameDay(end2, day)
  );
}
function isSameDay(day1, day2) {
  return day1.getDate() === day2.getDate() && day1.getMonth() === day2.getMonth() && day1.getFullYear() === day2.getFullYear();
}
function getNewRange(range, selected2) {
  if (range == null) {
    return { start: selected2, end: selected2 };
  }
  const { start: start2, end: end2 } = range;
  if (end2 && (isDateAfter(start2, end2) || isDateBefore(start2, end2))) {
    return { start: selected2, end: selected2 };
  }
  if (start2) {
    if (isDateBefore(selected2, start2)) {
      return { start: selected2, end: selected2 };
    }
    return { start: start2, end: selected2 };
  }
  if (end2) {
    if (isDateBefore(selected2, end2)) {
      return { start: selected2, end: end2 };
    }
    return { start: start2 || end2, end: selected2 };
  }
  return { start: selected2, end: selected2 };
}
function getNextDisplayMonth(month) {
  if (month === 11) {
    return 0;
  }
  return month + 1;
}
function getNextDisplayYear(month, year) {
  if (month === 11) {
    return year + 1;
  }
  return year;
}
function getPreviousDisplayMonth(month) {
  if (month === 0) {
    return 11;
  }
  return month - 1;
}
function getPreviousDisplayYear(month, year) {
  if (month === 0) {
    return year - 1;
  }
  return year;
}
function isDateAfter(date, dateToCompare) {
  return date.getTime() > dateToCompare.getTime();
}
function isDateBefore(date, dateToCompare) {
  return date.getTime() < dateToCompare.getTime();
}
function isDateDisabled(date, datesToCompare) {
  return datesToCompare.some((dateToCompare) => {
    return date.getTime() === dateToCompare.getTime();
  });
}
const WEEKDAYS = [0, 1, 2, 3, 4, 5, 6];
function getOrderedWeekdays(weekStartsOn) {
  const weekDays = [...WEEKDAYS];
  const restOfDays = weekDays.splice(weekStartsOn);
  return [...restOfDays, ...weekDays];
}
function monthName(month) {
  switch (month) {
    case 0:
      return "january";
    case 1:
      return "february";
    case 2:
      return "march";
    case 3:
      return "april";
    case 4:
      return "may";
    case 5:
      return "june";
    case 6:
      return "july";
    case 7:
      return "august";
    case 8:
      return "september";
    case 9:
      return "october";
    case 10:
      return "november";
    case 11:
      return "december";
  }
}
function weekdayName(weekday) {
  switch (weekday) {
    case 0:
      return "sunday";
    case 1:
      return "monday";
    case 2:
      return "tuesday";
    case 3:
      return "wednesday";
    case 4:
      return "thursday";
    case 5:
      return "friday";
    case 6:
      return "saturday";
  }
}
const DatePicker = "Polaris-DatePicker";
const MonthLayout = "Polaris-DatePicker__MonthLayout";
const MonthContainer = "Polaris-DatePicker__MonthContainer";
const Month = "Polaris-DatePicker__Month";
const DayCell = "Polaris-DatePicker__DayCell";
const Day = "Polaris-DatePicker__Day";
const EmptyDayCell = "Polaris-DatePicker__EmptyDayCell";
const Weekday = "Polaris-DatePicker__Weekday";
const Header$1 = "Polaris-DatePicker__Header";
const Title$3 = "Polaris-DatePicker__Title";
const Week = "Polaris-DatePicker__Week";
const styles$1c = {
  DatePicker,
  MonthLayout,
  MonthContainer,
  Month,
  "Month-current": "Polaris-DatePicker__Month--current",
  DayCell,
  "DayCell-inRange": "Polaris-DatePicker__DayCell--inRange",
  Day,
  "Day-today": "Polaris-DatePicker__Day--today",
  "Day-inRange": "Polaris-DatePicker__Day--inRange",
  "Day-selected": "Polaris-DatePicker__Day--selected",
  "Day-disabled": "Polaris-DatePicker__Day--disabled",
  EmptyDayCell,
  Weekday,
  "Weekday-current": "Polaris-DatePicker__Weekday--current",
  Header: Header$1,
  Title: Title$3,
  "Day-firstInRange": "Polaris-DatePicker__Day--firstInRange",
  "Day-hasRange": "Polaris-DatePicker__Day--hasRange",
  "Day-hoverRight": "Polaris-DatePicker__Day--hoverRight",
  "Day-lastInRange": "Polaris-DatePicker__Day--lastInRange",
  Week
};
const _hoisted_1$W = ["tabindex", "aria-label", "aria-disabled", "aria-pressed"];
const _sfc_main$29 = /* @__PURE__ */ defineComponent({
  __name: "Day",
  props: {
    focused: { type: Boolean },
    day: {},
    selected: { type: Boolean },
    inRange: { type: Boolean },
    inHoveringRange: { type: Boolean },
    disabled: { type: Boolean },
    lastDayOfMonth: {},
    isLastSelectedDay: { type: Boolean },
    isFirstSelectedDay: { type: Boolean },
    isHoveringRight: { type: Boolean },
    rangeIsDifferent: { type: Boolean },
    weekday: {},
    selectedAccessibilityLabelPrefix: {}
  },
  emits: ["click", "hover", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const dayNode = ref(null);
    const hoverValue = computed(() => props.lastDayOfMonth || props.day);
    const today = computed(() => props.day ? isSameDay(/* @__PURE__ */ new Date(), props.day) : null);
    const date = computed(() => {
      var _a;
      return (_a = props.day) == null ? void 0 : _a.getDate();
    });
    const tabIndex = computed(() => (props.focused || props.selected || today.value || date.value === 1) && !props.disabled ? 0 : -1);
    const ariaLabel = computed(() => {
      var _a;
      return [
        props.selected && props.selectedAccessibilityLabelPrefix ? `${props.selectedAccessibilityLabelPrefix} ` : "",
        `${today.value ? i18n.translate("Polaris.DatePicker.today") : ""}`,
        `${props.weekday ? props.weekday : ""} `,
        `${props.day ? i18n.translate(
          `Polaris.DatePicker.months.${monthName(props.day.getMonth())}`
        ) : null} `,
        `${date.value} `,
        `${(_a = props.day) == null ? void 0 : _a.getFullYear()}`
      ].join("");
    });
    const dayCellClassName = computed(() => classNames(
      styles$1c.DayCell,
      props.selected && styles$1c["DayCell-selected"],
      (props.inRange || props.inHoveringRange) && !props.disabled && styles$1c["DayCell-inRange"],
      props.isLastSelectedDay && styles$1c["DayCell-lastInRange"],
      props.isFirstSelectedDay && styles$1c["DayCell-firstInRange"],
      props.isHoveringRight && styles$1c["DayCell-hoverRight"],
      props.rangeIsDifferent && styles$1c["DayCell-hasRange"]
    ));
    const dayClassName = computed(() => classNames(
      styles$1c.Day,
      props.selected && styles$1c["Day-selected"],
      props.disabled && styles$1c["Day-disabled"],
      today.value && styles$1c["Day-today"],
      (props.inRange || props.inHoveringRange) && !props.disabled && styles$1c["Day-inRange"],
      props.isLastSelectedDay && styles$1c["Day-lastInRange"],
      props.isFirstSelectedDay && styles$1c["Day-firstInRange"],
      props.isHoveringRight && styles$1c["Day-hoverRight"],
      props.rangeIsDifferent && styles$1c["Day-hasRange"]
    ));
    watch(
      () => props.focused,
      () => {
        if (props.focused && dayNode.value) {
          dayNode.value.focus();
        }
      }
    );
    const handleClick = () => {
      if (props.disabled || !props.day) {
        return;
      }
      emits("click", props.day);
    };
    const handleHover = () => {
      emits("hover", hoverValue.value);
    };
    return (_ctx, _cache) => {
      return _ctx.day ? (openBlock(), createElementBlock("td", {
        key: 0,
        class: normalizeClass(dayCellClassName.value)
      }, [
        createBaseVNode("button", {
          ref_key: "dayNode",
          ref: dayNode,
          tabindex: tabIndex.value,
          class: normalizeClass(dayClassName.value),
          "aria-label": ariaLabel.value,
          "aria-disabled": _ctx.disabled,
          "aria-pressed": _ctx.selected,
          onMouseover: handleHover,
          onClick: handleClick
        }, toDisplayString(date.value), 43, _hoisted_1$W)
      ], 2)) : (openBlock(), createElementBlock("td", {
        key: 1,
        class: normalizeClass(unref(styles$1c).EmptyDayCell),
        onMouseover: handleHover
      }, null, 34));
    };
  }
});
const _hoisted_1$V = ["aria-label"];
const _sfc_main$28 = /* @__PURE__ */ defineComponent({
  __name: "Weekday",
  props: {
    label: {},
    title: {},
    current: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles$1c.Weekday,
      props.current && styles$1c["Weekday-current"]
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("th", {
        "aria-label": _ctx.label,
        scope: "col",
        class: normalizeClass(className.value)
      }, toDisplayString(_ctx.title), 11, _hoisted_1$V);
    };
  }
});
const _sfc_main$27 = /* @__PURE__ */ defineComponent({
  __name: "Month",
  props: {
    focusedDate: {},
    selected: {},
    hoverDate: {},
    month: {},
    year: {},
    disableDatesBefore: {},
    disableDatesAfter: {},
    disableSpecificDates: {},
    allowRange: { type: Boolean },
    weekStartsOn: {},
    accessibilityLabelPrefixes: {}
  },
  emits: ["change", "hover", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const isInHoveringRange = props.allowRange ? hoveringDateIsInRange : () => false;
    const now = /* @__PURE__ */ new Date();
    const current = computed(() => now.getMonth() === props.month && now.getFullYear() === props.year);
    const className = computed(() => classNames(
      styles$1c.Title,
      current.value && styles$1c["Month-current"]
    ));
    const weeks = computed(() => getWeeksForMonth(props.month, props.year, props.weekStartsOn));
    const lastDayOfMonth = computed(() => {
      return new Date(props.year, props.month + 1, 0);
    });
    const rangeIsDifferent = computed(() => !(props.selected && isSameDay(props.selected.start, props.selected.end)));
    const weekdaysOrdered = computed(() => {
      return getOrderedWeekdays(props.weekStartsOn);
    });
    const isDayDisabled = (day) => {
      return props.disableDatesBefore && isDateBefore(day, props.disableDatesBefore) || props.disableDatesAfter && isDateAfter(day, props.disableDatesAfter) || props.disableSpecificDates && isDateDisabled(day, props.disableSpecificDates);
    };
    const isFirstSelectedDay = (day) => {
      return props.allowRange && props.selected && isDateStart(day, props.selected);
    };
    const isLastSelectedDay = (day) => {
      return props.allowRange && props.selected && (!isSameDay(props.selected.start, props.selected.end) && isDateEnd(day, props.selected) || props.hoverDate && isSameDay(props.selected.start, props.selected.end) && isDateAfter(props.hoverDate, props.selected.start) && isSameDay(day, props.hoverDate) && !isFirstSelectedDay(day));
    };
    const isHoveringRight = (day) => {
      return props.hoverDate && isDateBefore(day, props.hoverDate);
    };
    const accessibilityLabelPrefix = (day) => {
      const [firstAccessibilityLabelPrefix, lastAccessibilityLabelPrefix] = props.accessibilityLabelPrefixes;
      if (props.allowRange && isFirstSelectedDay(day) || !props.allowRange && firstAccessibilityLabelPrefix) {
        return firstAccessibilityLabelPrefix;
      }
      if (props.allowRange && isLastSelectedDay(day)) {
        return lastAccessibilityLabelPrefix;
      }
    };
    const handleDateClick = (selectedDate) => {
      const selectedValue = getNewRange(props.allowRange ? props.selected : void 0, selectedDate);
      emits("change", selectedValue);
    };
    const weekdayLabel = (weekday) => {
      return i18n.translate(`Polaris.DatePicker.days.${weekdayName(weekday)}`);
    };
    function hoveringDateIsInRange(day, range, hoverEndDate) {
      if (day == null) {
        return false;
      }
      const { start: start2, end: end2 } = range;
      return Boolean(isSameDay(start2, end2) && day > start2 && day <= hoverEndDate);
    }
    function isDateEnd(day, range) {
      if (day == null)
        return false;
      const { end: end2 } = range;
      return Boolean(end2 && isSameDay(end2, day));
    }
    function isDateStart(day, range) {
      if (day == null)
        return false;
      const { start: start2 } = range;
      return Boolean(start2 && isSameDay(start2, day));
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$1c).MonthContainer)
      }, [
        createBaseVNode("table", {
          role: "grid",
          class: normalizeClass(unref(styles$1c).Month)
        }, [
          createBaseVNode("caption", {
            class: normalizeClass(className.value)
          }, toDisplayString(unref(i18n).translate(`Polaris.DatePicker.months.${unref(monthName)(_ctx.month)}`)) + " " + toDisplayString(_ctx.year), 3),
          createBaseVNode("thead", null, [
            createBaseVNode("tr", {
              class: normalizeClass(unref(styles$1c).WeekHeadings)
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(weekdaysOrdered.value, (weekday) => {
                return openBlock(), createBlock(unref(_sfc_main$28), {
                  key: weekday,
                  title: unref(i18n).translate(`Polaris.DatePicker.daysAbbreviated.${unref(weekdayName)(weekday)}`),
                  label: weekdayLabel(weekday),
                  current: current.value && (/* @__PURE__ */ new Date()).getDay() === weekday
                }, null, 8, ["title", "label", "current"]);
              }), 128))
            ], 2)
          ]),
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(weeks.value, (week, index) => {
              return openBlock(), createElementBlock("tr", {
                key: index,
                class: normalizeClass(unref(styles$1c).Week)
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(week, (day, dayIndex) => {
                  return openBlock(), createElementBlock(Fragment, { key: dayIndex }, [
                    !day ? (openBlock(), createBlock(unref(_sfc_main$29), {
                      key: 0,
                      "last-day-of-month": lastDayOfMonth.value,
                      onHover: _cache[0] || (_cache[0] = ($event) => emits("hover", null))
                    }, null, 8, ["last-day-of-month"])) : (openBlock(), createBlock(unref(_sfc_main$29), {
                      key: 1,
                      "selected-accessibility-label-prefix": accessibilityLabelPrefix(day),
                      weekday: weekdayLabel(dayIndex),
                      focused: _ctx.focusedDate && unref(isSameDay)(day, _ctx.focusedDate),
                      day,
                      selected: _ctx.selected && unref(dateIsSelected)(day, _ctx.selected),
                      "in-range": _ctx.selected && unref(dateIsInRange)(day, _ctx.selected),
                      disabled: isDayDisabled(day),
                      "in-hovering-range": _ctx.selected && _ctx.hoverDate && unref(isInHoveringRange)(day, _ctx.selected, _ctx.hoverDate),
                      "is-last-selected-day": isLastSelectedDay(day),
                      "is-first-selected-day": isFirstSelectedDay(day),
                      "is-hovering-right": isHoveringRight(day),
                      "range-is-different": rangeIsDifferent.value,
                      onFocus: ($event) => emits("focus", day),
                      onClick: ($event) => handleDateClick(day),
                      onHover: ($event) => emits("hover", day)
                    }, null, 8, ["selected-accessibility-label-prefix", "weekday", "focused", "day", "selected", "in-range", "disabled", "in-hovering-range", "is-last-selected-day", "is-first-selected-day", "is-hovering-right", "range-is-different", "onFocus", "onClick", "onHover"]))
                  ], 64);
                }), 128))
              ], 2);
            }), 128))
          ])
        ], 2)
      ], 2);
    };
  }
});
const _hoisted_1$U = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$y = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M3.5 10a.75.75 0 0 1 .75-.75h9.69l-2.72-2.72a.75.75 0 1 1 1.06-1.06l4 4a.75.75 0 0 1 0 1.06l-4 4a.75.75 0 0 1-1.06-1.06l2.72-2.72H4.25A.75.75 0 0 1 3.5 10"
}, null, -1);
const _hoisted_3$p = [
  _hoisted_2$y
];
function render$h(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$U, [..._hoisted_3$p]);
}
const ArrowRightIcon = { render: render$h };
const _hoisted_1$T = ["id"];
const _sfc_main$26 = /* @__PURE__ */ defineComponent({
  __name: "DatePicker",
  props: /* @__PURE__ */ mergeModels({
    id: {},
    month: {},
    year: {},
    allowRange: { type: Boolean },
    disableDatesBefore: {},
    disableDatesAfter: {},
    disableSpecificDates: {},
    multiMonth: { type: Boolean },
    weekStartsOn: { default: 0 },
    dayAccessibilityLabelPrefix: {}
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "month-change"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const model = useModel(__props, "modelValue");
    const hoverDate = ref();
    const focusDate = ref();
    const showNextYear = computed(() => getNextDisplayYear(props.month, props.year));
    const showNextMonth = computed(() => getNextDisplayMonth(props.month));
    const showNextToNextYear = computed(() => getNextDisplayYear(showNextMonth.value, showNextYear.value));
    const showNextToNextMonth = computed(() => getNextDisplayMonth(showNextMonth.value));
    const showPreviousYear = computed(() => getPreviousDisplayYear(props.month, props.year));
    const showPreviousMonth = computed(() => getPreviousDisplayMonth(props.month));
    const previousMonthName = computed(() => i18n.translate(
      `Polaris.DatePicker.months.${monthName(showPreviousMonth.value)}`
    ));
    const nextMonth = computed(() => {
      if (props.multiMonth) {
        return i18n.translate(
          `Polaris.DatePicker.months.${monthName(showNextToNextMonth.value)}`
        );
      }
      return i18n.translate(
        `Polaris.DatePicker.months.${monthName(showNextMonth.value)}`
      );
    });
    const nextYear = computed(() => {
      if (props.multiMonth) {
        return showNextToNextYear.value;
      }
      return showNextYear.value;
    });
    const firstDatePickerAccessibilityLabelPrefix = computed(() => {
      if (props.allowRange) {
        return i18n.translate("Polaris.DatePicker.startDate");
      }
      return props.dayAccessibilityLabelPrefix;
    });
    const secondDatePickerAccessibilityLabelPrefix = i18n.translate("Polaris.DatePicker.end");
    const accessibilityLabelPrefixes = computed(() => [
      firstDatePickerAccessibilityLabelPrefix.value,
      secondDatePickerAccessibilityLabelPrefix
    ]);
    const datePickerClassName = classNames(styles$1c.DatePicker);
    const handleFocus = (date) => {
      focusDate.value = date;
    };
    const setFocusDateAndHandleMonthChange = (date) => {
      emits("month-change", date.getMonth(), date.getFullYear());
      hoverDate.value = date;
      focusDate.value = date;
    };
    const handleDateSelection = (range) => {
      hoverDate.value = range.end;
      focusDate.value = new Date(range.end);
      model.value = range;
      emits("change", range);
    };
    const handleMonthChangeClick = (month, year) => {
      focusDate.value = void 0;
      emits("month-change", month, year);
    };
    const handleHover = (date) => {
      hoverDate.value = date || void 0;
    };
    const handleKeyUp = (event) => {
      const { key } = event;
      const range = deriveRange(model.value);
      const focusedDate = focusDate.value || range && range.start;
      if (!focusedDate) {
        return;
      }
      if (key === "ArrowUp") {
        const previousWeek = new Date(focusedDate);
        previousWeek.setDate(focusedDate.getDate() - 7);
        if (!(props.disableDatesBefore && isDateBefore(previousWeek, props.disableDatesBefore) || props.disableSpecificDates && isDateDisabled(previousWeek, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(previousWeek);
        }
      }
      if (key === "ArrowDown") {
        const nextWeek = new Date(focusedDate);
        nextWeek.setDate(focusedDate.getDate() + 7);
        if (!(props.disableDatesAfter && isDateAfter(nextWeek, props.disableDatesAfter) || props.disableSpecificDates && isDateDisabled(nextWeek, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(nextWeek);
        }
      }
      if (key === "ArrowRight") {
        const nextDay = new Date(focusedDate);
        nextDay.setDate(focusedDate.getDate() + 1);
        if (!(props.disableDatesAfter && isDateAfter(nextDay, props.disableDatesAfter) || props.disableSpecificDates && isDateDisabled(nextDay, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(nextDay);
        }
      }
      if (key === "ArrowLeft") {
        const previousDay = new Date(focusedDate);
        previousDay.setDate(focusedDate.getDate() - 1);
        if (!(props.disableDatesBefore && isDateBefore(previousDay, props.disableDatesBefore) || props.disableSpecificDates && isDateDisabled(previousDay, props.disableSpecificDates))) {
          setFocusDateAndHandleMonthChange(previousDay);
        }
      }
    };
    const handleKeyDown = (event) => {
      const { key } = event;
      if (key === "ArrowUp" || key === "ArrowDown" || key === "ArrowRight" || key === "ArrowLeft") {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    function deriveRange(selected2) {
      return selected2 instanceof Date ? { start: selected2, end: selected2 } : selected2;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        id: _ctx.id,
        class: normalizeClass(unref(datePickerClassName)),
        onKeydown: handleKeyDown,
        onKeyup: handleKeyUp
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$1c).Header)
        }, [
          createVNode(unref(_sfc_main$2t), {
            variant: "tertiary",
            icon: unref(ArrowLeftIcon),
            "accessibility-label": unref(i18n).translate("Polaris.DatePicker.previousMonth", { previousMonthName: previousMonthName.value, showPreviousYear: showPreviousYear.value }),
            onClick: _cache[0] || (_cache[0] = () => handleMonthChangeClick(showPreviousMonth.value, showPreviousYear.value))
          }, null, 8, ["icon", "accessibility-label"]),
          createVNode(unref(_sfc_main$2t), {
            variant: "tertiary",
            icon: unref(ArrowRightIcon),
            "accessibility-label": unref(i18n).translate("Polaris.DatePicker.nextMonth", { nextMonth: nextMonth.value, nextYear: nextYear.value }),
            onClick: _cache[1] || (_cache[1] = () => handleMonthChangeClick(showNextMonth.value, showNextYear.value))
          }, null, 8, ["icon", "accessibility-label"])
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$1c).MonthLayout)
        }, [
          createVNode(unref(_sfc_main$27), {
            "focused-date": focusDate.value,
            month: _ctx.month,
            year: _ctx.year,
            selected: deriveRange(model.value),
            "hover-date": hoverDate.value,
            "disable-dates-before": _ctx.disableDatesBefore,
            "disable-dates-after": _ctx.disableDatesAfter,
            "disable-specific-dates": _ctx.disableSpecificDates,
            "allow-range": _ctx.allowRange,
            "week-starts-on": _ctx.weekStartsOn,
            "accessibility-label-prefixes": accessibilityLabelPrefixes.value,
            onChange: handleDateSelection,
            onHover: handleHover,
            onFocus: handleFocus
          }, null, 8, ["focused-date", "month", "year", "selected", "hover-date", "disable-dates-before", "disable-dates-after", "disable-specific-dates", "allow-range", "week-starts-on", "accessibility-label-prefixes"]),
          _ctx.multiMonth ? (openBlock(), createBlock(unref(_sfc_main$27), {
            key: 0,
            "focused-date": focusDate.value,
            month: showNextMonth.value,
            year: showNextYear.value,
            selected: deriveRange(model.value),
            "hover-date": hoverDate.value,
            "disable-dates-before": _ctx.disableDatesBefore,
            "disable-dates-after": _ctx.disableDatesAfter,
            "disable-specific-dates": _ctx.disableSpecificDates,
            "allow-range": _ctx.allowRange,
            "week-starts-on": _ctx.weekStartsOn,
            "accessibility-label-prefixes": accessibilityLabelPrefixes.value,
            onChange: handleDateSelection,
            onHover: handleHover,
            onFocus: handleFocus
          }, null, 8, ["focused-date", "month", "year", "selected", "hover-date", "disable-dates-before", "disable-dates-after", "disable-specific-dates", "allow-range", "week-starts-on", "accessibility-label-prefixes"])) : createCommentVNode("", true)
        ], 2)
      ], 42, _hoisted_1$T);
    };
  }
});
const DescriptionList = "Polaris-DescriptionList";
const Term = "Polaris-DescriptionList__Term";
const spacingTight$2 = "Polaris-DescriptionList--spacingTight";
const Description$2 = "Polaris-DescriptionList__Description";
const styles$1b = {
  DescriptionList,
  Term,
  spacingTight: spacingTight$2,
  Description: Description$2
};
const _sfc_main$25 = /* @__PURE__ */ defineComponent({
  __name: "DescriptionList",
  props: {
    gap: { default: "loose" }
  },
  setup(__props) {
    const prop = __props;
    const className = computed(() => classNames(
      styles$1b.DescriptionList,
      prop.gap === "tight" && styles$1b.spacingTight
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("dl", {
        class: normalizeClass(className.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$24 = /* @__PURE__ */ defineComponent({
  __name: "DescriptionListTerm",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("dt", {
        class: normalizeClass(unref(styles$1b).Term)
      }, [
        createVNode(unref(_sfc_main$f), {
          as: "span",
          variant: "headingSm"
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
const _sfc_main$23 = /* @__PURE__ */ defineComponent({
  __name: "DescriptionListDesc",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("dd", {
        class: normalizeClass(unref(styles$1b).Description)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const Divider = "Polaris-Divider";
const styles$1a = {
  Divider
};
const _sfc_main$22 = /* @__PURE__ */ defineComponent({
  __name: "Divider",
  props: {
    borderColor: { default: "border-secondary" },
    borderWidth: { default: "025" }
  },
  setup(__props) {
    const props = __props;
    const borderColorValue = computed(
      () => props.borderColor === "transparent" ? props.borderColor : `var(--p-color-${props.borderColor})`
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("hr", {
        class: normalizeClass(unref(styles$1a).Divider),
        style: normalizeStyle({ borderBlockStart: `var(--p-border-width-${_ctx.borderWidth}) solid ${borderColorValue.value}` })
      }, null, 6);
    };
  }
});
const dragEvents = ["dragover", "dragenter", "drop"];
function fileAccepted(file, accept) {
  return file.type === "application/x-moz-file" || accepts(file, accept);
}
function getDataTransferFiles(event) {
  if (isDragEvent(event) && event.dataTransfer) {
    const dt = event.dataTransfer;
    if (dt.files && dt.files.length) {
      return Array.from(dt.files);
    } else if (dt.items && dt.items.length) {
      return Array.from(dt.items);
    }
  } else if (isChangeEvent(event)) {
    const target = event.target;
    if (target.files) {
      return Array.from(target.files);
    }
  }
  return [];
}
function accepts(file, acceptedFiles) {
  if (file && acceptedFiles) {
    const fileName = file.name || "";
    const mimeType = file.type || "";
    const baseMimeType = mimeType.replace(/\/.*$/, "");
    const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
    return acceptedFilesArray.some((type) => {
      const validType = type.trim();
      if (validType.startsWith(".")) {
        return fileName.toLowerCase().endsWith(validType.toLowerCase());
      } else if (validType.endsWith("/*")) {
        return baseMimeType === validType.replace(/\/.*$/, "");
      }
      return mimeType === validType;
    });
  }
  return true;
}
function isDragEvent(event) {
  return dragEvents.indexOf(event.type) > 0;
}
function isChangeEvent(event) {
  return event.type === "change";
}
const defaultAllowMultiple = true;
function createAllowMultipleKey(allowMultiple2) {
  return allowMultiple2 ? "allowMultiple" : "single";
}
const _hoisted_1$S = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$x = /* @__PURE__ */ createBaseVNode("path", { d: "M16.5 6.26a.75.75 0 0 1-1.5 0v-.51a.75.75 0 0 0-.75-.75h-8.5a.75.75 0 0 0-.75.75v.51a.75.75 0 0 1-1.5 0v-.51A2.25 2.25 0 0 1 5.75 3.5h8.5a2.25 2.25 0 0 1 2.25 2.25z" }, null, -1);
const _hoisted_3$o = /* @__PURE__ */ createBaseVNode("path", { d: "M10.75 16.01a.75.75 0 0 1-1.5 0V9.32l-1.72 1.72a.75.75 0 1 1-1.06-1.06l3-3a.75.75 0 0 1 1.06 0l3 3a.75.75 0 1 1-1.06 1.06l-1.72-1.72z" }, null, -1);
const _hoisted_4$d = [
  _hoisted_2$x,
  _hoisted_3$o
];
function render$g(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$S, [..._hoisted_4$d]);
}
const UploadIcon$1 = { render: render$g };
const _hoisted_1$R = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$w = /* @__PURE__ */ createBaseVNode("path", { d: "M10 6a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 10 6M11 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0" }, null, -1);
const _hoisted_3$n = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0m-1.5 0a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"
}, null, -1);
const _hoisted_4$c = [
  _hoisted_2$w,
  _hoisted_3$n
];
function render$f(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$R, [..._hoisted_4$c]);
}
const AlertCircleIcon = { render: render$f };
const DropZone = "Polaris-DropZone";
const focused$2 = "Polaris-DropZone--focused";
const noOutline = "Polaris-DropZone--noOutline";
const hasOutline = "Polaris-DropZone--hasOutline";
const isDisabled = "Polaris-DropZone--isDisabled";
const isDragging = "Polaris-DropZone--isDragging";
const sizeLarge$7 = "Polaris-DropZone--sizeLarge";
const sizeMedium$4 = "Polaris-DropZone--sizeMedium";
const sizeSmall$7 = "Polaris-DropZone--sizeSmall";
const measuring$2 = "Polaris-DropZone--measuring";
const Container$3 = "Polaris-DropZone__Container";
const Overlay = "Polaris-DropZone__Overlay";
const hasError = "Polaris-DropZone--hasError";
const styles$19 = {
  DropZone,
  focused: focused$2,
  noOutline,
  hasOutline,
  isDisabled,
  isDragging,
  sizeLarge: sizeLarge$7,
  sizeMedium: sizeMedium$4,
  sizeSmall: sizeSmall$7,
  measuring: measuring$2,
  Container: Container$3,
  Overlay,
  hasError
};
const _hoisted_1$Q = ["aria-disabled"];
const _hoisted_2$v = ["id", "accept", "multiple", "disabled"];
const _sfc_main$21 = /* @__PURE__ */ defineComponent({
  __name: "DropZone",
  props: {
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    id: {},
    accept: {},
    type: { default: "file" },
    active: { type: Boolean },
    error: { type: Boolean },
    outline: { type: Boolean, default: true },
    overlay: { type: Boolean, default: true },
    overlayText: {},
    errorOverlayText: {},
    allowMultiple: { type: Boolean, default: defaultAllowMultiple },
    disabled: { type: Boolean, default: false },
    dropOnPage: { type: Boolean },
    openFileDialog: { type: Boolean },
    variableHeight: { type: Boolean },
    customValidator: {}
  },
  emits: ["click", "drop", "drop-accepted", "drop-rejected", "drag-over", "drag-enter", "drag-leave", "file-dialog-close"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const uniqId = useId();
    const { hasSlot } = useHasSlot();
    const currentInstance = getCurrentInstance();
    const dropNodeRef = ref(null);
    const inputRef = ref(null);
    const dragTargets = ref([]);
    const dragging = ref(false);
    const internalError = ref(false);
    const { value: focused2, setTrue: handleFocus, setFalse: handleBlur } = useToggle(false);
    const size2 = ref("large");
    const measuring2 = ref(true);
    const id = computed(() => props.id || uniqId);
    const typeSuffix = computed(() => capitalize(props.type));
    const allowMultipleKey = computed(() => createAllowMultipleKey(props.allowMultiple));
    const overlayTextWithDefault = computed(
      () => !props.overlayText ? i18n.translate(`Polaris.DropZone.${allowMultipleKey.value}.overlayText${typeSuffix.value}`) : props.overlayText
    );
    const errorOverlayTextWithDefault = computed(
      () => !props.errorOverlayText ? i18n.translate(`Polaris.DropZone.errorOverlayText${typeSuffix.value}`) : props.errorOverlayText
    );
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const labelHiddenValue = computed(() => props.label ? props.labelHidden : true);
    const classes = computed(() => classNames(
      styles$19.DropZone,
      props.outline && styles$19.hasOutline,
      !props.outline && styles$19.noOutline,
      focused2.value && styles$19.focused,
      (props.active || dragging.value) && styles$19.isDragging,
      props.disabled && styles$19.isDisabled,
      (internalError.value || props.error) && styles$19.hasError,
      !props.variableHeight && styles$19[variationName("size", size2.value)],
      measuring2.value && styles$19.measuring
    ));
    const showDragOverlay = computed(() => (props.active || dragging.value) && !internalError.value && !props.error && props.overlay);
    const showDragErrorOverlay = computed(() => dragging.value && (internalError.value || props.error));
    const adjustSize = debounce(() => {
      if (!dropNodeRef.value)
        return;
      if (props.variableHeight) {
        measuring2.value = false;
        return;
      }
      let tmpSize = "large";
      const width2 = dropNodeRef.value.getBoundingClientRect().width;
      if (width2 < 100) {
        tmpSize = "small";
      } else if (width2 < 160) {
        tmpSize = "medium";
      }
      size2.value = tmpSize;
      if (measuring2.value)
        measuring2.value = false;
    }, 50, { trailing: true });
    const getValidatedFiles = (files) => {
      const acceptedFiles = [];
      const rejectedFiles = [];
      Array.from(files).forEach((file) => {
        !fileAccepted(file, props.accept) || props.customValidator && !props.customValidator(file) ? rejectedFiles.push(file) : acceptedFiles.push(file);
      });
      if (!props.allowMultiple) {
        acceptedFiles.splice(1, acceptedFiles.length);
        rejectedFiles.push(...acceptedFiles.slice(1));
      }
      return { files, acceptedFiles, rejectedFiles };
    };
    const handleDrop = (event) => {
      stopEvent(event);
      if (props.disabled)
        return;
      const fileList = getDataTransferFiles(event);
      const { files, acceptedFiles, rejectedFiles } = getValidatedFiles(fileList);
      dragTargets.value = [];
      dragging.value = false;
      internalError.value = rejectedFiles.length > 0;
      emits("drop", files, acceptedFiles, rejectedFiles);
      acceptedFiles.length && emits("drop-accepted", acceptedFiles);
      rejectedFiles.length && emits("drop-rejected", rejectedFiles);
      if (!(event.target && "value" in event.target))
        return;
      event.target.value = "";
    };
    const handleDragEnter = (event) => {
      stopEvent(event);
      if (props.disabled)
        return;
      const fileList = getDataTransferFiles(event);
      if (event.target && !dragTargets.value.includes(event.target)) {
        dragTargets.value.push(event.target);
      }
      if (dragging.value)
        return;
      const { rejectedFiles } = getValidatedFiles(fileList);
      dragging.value = true;
      internalError.value = rejectedFiles.length > 0;
      emits("drag-enter");
    };
    const handleDragOver = (event) => {
      stopEvent(event);
      if (props.disabled)
        return;
      emits("drag-over");
    };
    const handleDragLeave = (event) => {
      stopEvent(event);
      if (props.disabled)
        return;
      dragTargets.value = dragTargets.value.filter((el) => {
        const compareNode = props.dropOnPage ? document : dropNodeRef.value;
        return el !== event.target && compareNode && compareNode.contains(el);
      });
      if (dragTargets.value.length > 0)
        return;
      dragging.value = false;
      internalError.value = false;
      emits("drag-leave");
    };
    const open = () => {
      if (!inputRef.value)
        return;
      inputRef.value.click();
    };
    const triggerFileDialog = () => {
      open();
      emits("file-dialog-close");
    };
    const handleClick = (event) => {
      if (props.disabled)
        return;
      if (currentInstance == null ? void 0 : currentInstance.attrs.onClick) {
        emits("click", event);
      } else {
        open();
      }
    };
    const stopEvent = (event) => {
      event.preventDefault();
      event.stopPropagation();
    };
    watch(
      () => props.openFileDialog,
      () => {
        if (props.openFileDialog)
          triggerFileDialog();
      }
    );
    onMounted(() => {
      adjustSize();
      const dropNode = props.dropOnPage ? document : dropNodeRef.value;
      if (!dropNode)
        return;
      dropNode.addEventListener("drop", handleDrop);
      dropNode.addEventListener("dragover", handleDragOver);
      dropNode.addEventListener("dragenter", handleDragEnter);
      dropNode.addEventListener("dragleave", handleDragLeave);
      window.addEventListener("resize", adjustSize);
    });
    onBeforeUnmount(() => {
      const dropNode = props.dropOnPage ? document : dropNodeRef.value;
      if (!dropNode)
        return;
      dropNode.removeEventListener("drop", handleDrop);
      dropNode.removeEventListener("dragover", handleDragOver);
      dropNode.removeEventListener("dragenter", handleDragEnter);
      dropNode.removeEventListener("dragleave", handleDragLeave);
      window.removeEventListener("resize", adjustSize);
    });
    const context = reactive({
      disabled: props.disabled,
      focused: focused2,
      size: size2,
      type: props.type || "file",
      measuring: measuring2,
      allowMultiple: props.allowMultiple
    });
    provide("dropZoneContext", context);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1n), {
        id: `${id.value}`,
        "label-hidden": labelHiddenValue.value,
        action: _ctx.labelAction
      }, createSlots({
        default: withCtx(() => [
          createBaseVNode("div", {
            ref_key: "dropNodeRef",
            ref: dropNodeRef,
            class: normalizeClass(classes.value),
            "aria-disabled": _ctx.disabled,
            onClick: handleClick,
            onDragstart: stopEvent
          }, [
            showDragOverlay.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles$19).Overlay)
            }, [
              createVNode(unref(_sfc_main$2C), {
                gap: "200",
                "inline-align": "center"
              }, {
                default: withCtx(() => [
                  size2.value === "small" ? (openBlock(), createBlock(unref(_sfc_main$1K), {
                    key: 0,
                    source: unref(UploadIcon$1),
                    tone: "critical"
                  }, null, 8, ["source"])) : size2.value === "medium" || size2.value === "large" ? (openBlock(), createBlock(unref(_sfc_main$f), {
                    key: 1,
                    variant: "bodySm",
                    as: "p",
                    "font-weight": "bold"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(overlayTextWithDefault.value), 1)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true),
            showDragErrorOverlay.value ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(styles$19).Overlay)
            }, [
              createVNode(unref(_sfc_main$2C), {
                gap: "200",
                "inline-align": "center"
              }, {
                default: withCtx(() => [
                  size2.value === "small" ? (openBlock(), createBlock(unref(_sfc_main$1K), {
                    key: 0,
                    source: unref(AlertCircleIcon),
                    tone: "critical"
                  }, null, 8, ["source"])) : size2.value === "medium" || size2.value === "large" ? (openBlock(), createBlock(unref(_sfc_main$f), {
                    key: 1,
                    variant: "bodySm",
                    as: "p",
                    "font-weight": "bold"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(errorOverlayTextWithDefault.value), 1)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true),
            createVNode(unref(_sfc_main$f), {
              as: "span",
              variant: "bodySm",
              "visually-hidden": ""
            }, {
              default: withCtx(() => [
                createBaseVNode("input", {
                  ref_key: "inputRef",
                  ref: inputRef,
                  type: "file",
                  id: `${id.value}`,
                  accept: _ctx.accept,
                  multiple: _ctx.allowMultiple,
                  disabled: _ctx.disabled,
                  autoComplete: "off",
                  onChange: handleDrop,
                  onFocus: _cache[0] || (_cache[0] = //@ts-ignore
                  (...args) => unref(handleFocus) && unref(handleFocus)(...args)),
                  onBlur: _cache[1] || (_cache[1] = //@ts-ignore
                  (...args) => unref(handleBlur) && unref(handleBlur)(...args))
                }, null, 40, _hoisted_2$v)
              ]),
              _: 1
            }),
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$19).Container)
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2)
          ], 42, _hoisted_1$Q)
        ]),
        _: 2
      }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            unref(slots).label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : _ctx.label ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
              createTextVNode(toDisplayString(unref(i18n).translate(`Polaris.DropZone.${allowMultipleKey.value}.label${typeSuffix.value}`)), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0
      ]), 1032, ["id", "label-hidden", "action"]);
    };
  }
});
const DropZoneContext = reactive({
  disabled: false,
  focused: toRef(false),
  size: toRef("extraLarge"),
  type: "file",
  measuring: toRef(false),
  allowMultiple: defaultAllowMultiple
});
function useDropZoneContext() {
  const context = inject("dropZoneContext", DropZoneContext);
  return toRefs(context);
}
const FileUpload = "Polaris-DropZone-FileUpload";
const large = "Polaris-DropZone-FileUpload--large";
const small$1 = "Polaris-DropZone-FileUpload--small";
const Action$2 = "Polaris-DropZone-FileUpload__Action";
const disabled$8 = "Polaris-DropZone-FileUpload--disabled";
const ActionTitle = "Polaris-DropZone-FileUpload__ActionTitle";
const UploadIcon = "Polaris-DropZone-FileUpload__UploadIcon";
const styles$18 = {
  FileUpload,
  large,
  small: small$1,
  Action: Action$2,
  disabled: disabled$8,
  ActionTitle,
  "ActionTitle-disabled": "Polaris-DropZone-FileUpload__ActionTitle--disabled",
  "ActionTitle-focused": "Polaris-DropZone-FileUpload__ActionTitle--focused",
  UploadIcon
};
const _sfc_main$20 = /* @__PURE__ */ defineComponent({
  __name: "FileUpload",
  props: {
    actionTitle: {},
    actionHint: {}
  },
  setup(__props) {
    const i18n = useI18n();
    const { size: size2, measuring: measuring2, type, disabled: disabled2, allowMultiple: allowMultiple2 } = useDropZoneContext();
    const typeSuffix = capitalize(type.value);
    const allowMultipleKey = createAllowMultipleKey(allowMultiple2.value);
    const props = __props;
    const actionTitleValue = computed(() => props.actionTitle || i18n.translate(`Polaris.DropZone.${allowMultipleKey}.actionTitle${typeSuffix}`));
    const actionClassNames = computed(() => classNames(
      styles$18.Action,
      disabled2.value && styles$18.disabled
    ));
    const fileUploadClassName = computed(() => classNames(
      styles$18.FileUpload,
      measuring2.value && styles$18.measuring,
      size2.value === "large" && styles$18.large,
      size2.value === "small" && styles$18.small
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(fileUploadClassName.value)
      }, [
        unref(size2) === "large" || unref(size2) === "medium" ? (openBlock(), createBlock(unref(_sfc_main$2C), {
          key: 0,
          "inline-align": "center",
          gap: "200"
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(actionClassNames.value)
            }, toDisplayString(actionTitleValue.value), 3),
            _ctx.actionHint ? (openBlock(), createBlock(unref(_sfc_main$f), {
              key: 0,
              variant: "bodySm",
              as: "p",
              tone: "subdued"
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.actionHint), 1)
              ]),
              _: 1
            })) : createCommentVNode("", true)
          ]),
          _: 1
        })) : (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(classNames)(unref(styles$18).UploadIcon, unref(disabled2) && unref(styles$18).disabled))
        }, [
          createVNode(unref(_sfc_main$1K), { source: unref(UploadIcon$1) }, null, 8, ["source"])
        ], 2))
      ], 2);
    };
  }
});
const _hoisted_1$P = { key: 0 };
const source = "data:image/svg+xml,%3csvg width='60' height='60' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e";
const _sfc_main$1$ = /* @__PURE__ */ defineComponent({
  __name: "EmptySearchResult",
  props: {
    title: {},
    description: {},
    withIllustration: { type: Boolean }
  },
  setup(__props) {
    const i18n = useI18n();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1e), {
        alignment: "center",
        vertical: ""
      }, {
        default: withCtx(() => [
          _ctx.withIllustration ? (openBlock(), createBlock(unref(_sfc_main$1J), {
            key: 0,
            alt: unref(i18n).translate("Polaris.EmptySearchResult.altText"),
            source,
            draggable: false
          }, null, 8, ["alt"])) : createCommentVNode("", true),
          createVNode(unref(_sfc_main$f), {
            variant: "headingLg",
            as: "p"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ]),
            _: 1
          }),
          createVNode(unref(_sfc_main$f), {
            tone: "subdued",
            as: "span"
          }, {
            default: withCtx(() => [
              _ctx.description ? (openBlock(), createElementBlock("p", _hoisted_1$P, toDisplayString(_ctx.description), 1)) : createCommentVNode("", true)
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});
const imageContained = "Polaris-EmptyState--imageContained";
const styles$17 = {
  imageContained
};
const _sfc_main$1_ = /* @__PURE__ */ defineComponent({
  __name: "EmptyState",
  props: {
    heading: {},
    image: {},
    largeImage: {},
    imageContained: { type: Boolean },
    fullWidth: { type: Boolean, default: false },
    action: {},
    secondaryAction: {}
  },
  setup(__props) {
    const { hasSlot } = useHasSlot();
    const slots = useSlots();
    const props = __props;
    const imageContainedClass = computed(() => classNames(
      props.imageContained && styles$17.imageContained
    ));
    const sourceSet = computed(() => {
      return [
        { source: props.image, descriptor: "568w" },
        { source: props.largeImage, descriptor: "1136w" }
      ];
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2B), {
        "padding-inline-start": "0",
        "padding-inline-end": "0",
        "padding-block-start": "500",
        "padding-block-end": "1600"
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2C), { "inline-align": "center" }, {
            default: withCtx(() => [
              _ctx.largeImage ? (openBlock(), createBlock(unref(_sfc_main$1J), {
                key: 0,
                alt: "",
                role: "presentation",
                source: _ctx.largeImage,
                "class-name": imageContainedClass.value,
                "source-set": sourceSet.value
              }, null, 8, ["source", "class-name", "source-set"])) : (openBlock(), createBlock(unref(_sfc_main$1J), {
                key: 1,
                alt: "",
                role: "presentation",
                "class-name": imageContainedClass.value,
                source: _ctx.image
              }, null, 8, ["class-name", "source"])),
              createVNode(unref(_sfc_main$2B), {
                "max-width": _ctx.fullWidth ? "100%" : "400px"
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$2C), { "inline-align": "center" }, {
                    default: withCtx(() => [
                      _ctx.heading || unref(hasSlot)(unref(slots).default) ? (openBlock(), createBlock(unref(_sfc_main$2B), {
                        key: 0,
                        "padding-block-end": "400"
                      }, {
                        default: withCtx(() => [
                          _ctx.heading ? (openBlock(), createBlock(unref(_sfc_main$2B), {
                            key: 0,
                            "padding-block-end": "150"
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(_sfc_main$f), {
                                variant: "headingMd",
                                as: "p",
                                alignment: "center"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(_ctx.heading), 1)
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          unref(hasSlot)(unref(slots).default) ? (openBlock(), createBlock(unref(_sfc_main$f), {
                            key: 1,
                            as: "span",
                            alignment: "center",
                            variant: "bodySm"
                          }, {
                            default: withCtx(() => [
                              renderSlot(_ctx.$slots, "default")
                            ]),
                            _: 3
                          })) : createCommentVNode("", true)
                        ]),
                        _: 3
                      })) : createCommentVNode("", true),
                      createVNode(unref(_sfc_main$1r), {
                        align: "center",
                        gap: "200"
                      }, {
                        default: withCtx(() => [
                          _ctx.secondaryAction ? (openBlock(), createBlock(unref(_sfc_main$2s), {
                            key: 0,
                            action: _ctx.secondaryAction
                          }, null, 8, ["action"])) : createCommentVNode("", true),
                          _ctx.action ? (openBlock(), createBlock(unref(_sfc_main$2s), {
                            key: 1,
                            action: _ctx.action,
                            overrides: { variant: "primary", size: "medium" }
                          }, null, 8, ["action"])) : createCommentVNode("", true)
                        ]),
                        _: 1
                      }),
                      unref(hasSlot)(unref(slots).footerContent) ? (openBlock(), createBlock(unref(_sfc_main$2B), {
                        key: 1,
                        "padding-block-start": "400"
                      }, {
                        default: withCtx(() => [
                          createVNode(unref(_sfc_main$f), {
                            as: "span",
                            alignment: "center",
                            variant: "bodySm"
                          }, {
                            default: withCtx(() => [
                              renderSlot(_ctx.$slots, "footerContent")
                            ]),
                            _: 3
                          })
                        ]),
                        _: 3
                      })) : createCommentVNode("", true)
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              }, 8, ["max-width"])
            ]),
            _: 3
          })
        ]),
        _: 3
      });
    };
  }
});
const __default__$2 = {
  inheritAttrs: false,
  render() {
    return null;
  }
};
const _sfc_main$1Z = /* @__PURE__ */ defineComponent({
  ...__default__$2,
  __name: "EventListener",
  props: {
    passive: { type: Boolean },
    event: {},
    capture: { type: Boolean },
    handler: { type: Function }
  },
  setup(__props) {
    const props = __props;
    onMounted(() => {
      attachListener();
    });
    onBeforeUnmount(() => {
      detachListener();
    });
    watch(
      () => ({ ...props }),
      (newProps, oldProps) => {
        if (newProps !== oldProps) {
          detachListener();
          attachListener();
        }
      }
    );
    function attachListener() {
      window.addEventListener(props.event, props.handler, {
        capture: props.capture,
        passive: props.passive
      });
    }
    function detachListener() {
      window.removeEventListener(props.event, props.handler, {
        capture: props.capture
      });
    }
    return { props, attachListener, detachListener };
  }
});
const ExceptionList = "Polaris-ExceptionList";
const Item$5 = "Polaris-ExceptionList__Item";
const Icon$4 = "Polaris-ExceptionList__Icon";
const statusWarning = "Polaris-ExceptionList--statusWarning";
const statusCritical = "Polaris-ExceptionList--statusCritical";
const Bullet = "Polaris-ExceptionList__Bullet";
const Title$2 = "Polaris-ExceptionList__Title";
const Description$1 = "Polaris-ExceptionList__Description";
const styles$16 = {
  ExceptionList,
  Item: Item$5,
  Icon: Icon$4,
  statusWarning,
  statusCritical,
  Bullet,
  Title: Title$2,
  Description: Description$1
};
const _sfc_main$1Y = /* @__PURE__ */ defineComponent({
  __name: "ExceptionList",
  props: {
    items: {}
  },
  setup(__props) {
    const itemClasses = (item) => classNames(
      styles$16.Item,
      item.status && styles$16[variationName("status", item.status)]
    );
    return (_ctx, _cache) => {
      const _component_Icon = resolveComponent("Icon");
      const _component_Truncate = resolveComponent("Truncate");
      return openBlock(), createElementBlock("ul", {
        class: normalizeClass(unref(styles$16).ExceptionList)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item, index) => {
          return openBlock(), createElementBlock("li", {
            key: index,
            class: normalizeClass(itemClasses(item))
          }, [
            createBaseVNode("span", {
              class: normalizeClass(unref(styles$16).Icon)
            }, [
              item.icon ? (openBlock(), createBlock(_component_Icon, {
                key: 0,
                source: item.icon
              }, null, 8, ["source"])) : (openBlock(), createElementBlock("span", {
                key: 1,
                class: normalizeClass(unref(styles$16).Bullet)
              }, null, 2))
            ], 2),
            item.truncate ? (openBlock(), createBlock(_component_Truncate, { key: 0 }, {
              default: withCtx(() => [
                item.title ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  class: normalizeClass(unref(styles$16).Title)
                }, toDisplayString(item.title), 3)) : createCommentVNode("", true),
                item.description ? (openBlock(), createElementBlock("span", {
                  key: 1,
                  class: normalizeClass(unref(styles$16).Description)
                }, toDisplayString(item.description), 3)) : createCommentVNode("", true)
              ]),
              _: 2
            }, 1024)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              item.title ? (openBlock(), createElementBlock("span", {
                key: 0,
                class: normalizeClass(unref(styles$16).Title)
              }, toDisplayString(item.title), 3)) : createCommentVNode("", true),
              item.description ? (openBlock(), createElementBlock("span", {
                key: 1,
                class: normalizeClass(unref(styles$16).Description)
              }, toDisplayString(item.description), 3)) : createCommentVNode("", true)
            ], 64))
          ], 2);
        }), 128))
      ], 2);
    };
  }
});
const FilterButton = "Polaris-Filters-FilterPill__FilterButton";
const focusedFilterButton = "Polaris-Filters-FilterPill--focusedFilterButton";
const ActiveFilterButton = "Polaris-Filters-FilterPill__ActiveFilterButton";
const PlainButton = "Polaris-Filters-FilterPill__PlainButton";
const ToggleButton = "Polaris-Filters-FilterPill__ToggleButton";
const Label$5 = "Polaris-Filters-FilterPill__Label";
const clearButton = "Polaris-Filters-FilterPill--clearButton";
const IconWrapper = "Polaris-Filters-FilterPill__IconWrapper";
const PopoverWrapper = "Polaris-Filters-FilterPill__PopoverWrapper";
const ClearButtonWrapper = "Polaris-Filters-FilterPill__ClearButtonWrapper";
const styles$15 = {
  FilterButton,
  focusedFilterButton,
  ActiveFilterButton,
  PlainButton,
  ToggleButton,
  Label: Label$5,
  clearButton,
  IconWrapper,
  PopoverWrapper,
  ClearButtonWrapper
};
const _sfc_main$1X = /* @__PURE__ */ defineComponent({
  __name: "FilterPill",
  props: {
    filterKey: {},
    selected: { type: Boolean },
    initialActive: { type: Boolean },
    disabled: { type: Boolean },
    closeOnChildOverlayClick: { type: Boolean },
    name: {},
    label: {},
    filter: { type: [String, Number, Boolean, null] },
    shortcut: { type: Boolean },
    pinned: { type: Boolean },
    hideClearButton: { type: Boolean },
    onAction: { type: Function },
    suffix: { type: [String, Number, Boolean, null] },
    section: {},
    hidden: { type: Boolean }
  },
  emits: ["click", "remove"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const breakpoints2 = useBreakpoints();
    const {
      value: focused2,
      setTrue: setFocusedTrue,
      setFalse: setFocusedFalse
    } = useToggle(false);
    const popoverActive = ref(props.initialActive);
    const elementRef = ref(null);
    const buttonClasses = computed(() => classNames(
      styles$15.FilterButton,
      props.selected && styles$15.ActiveFilterButton,
      popoverActive.value && styles$15.FocusFilterButton,
      focused2.value && styles$15.FocusFilterButton
    ));
    const clearButtonClassNames = computed(() => classNames(
      styles$15.PlainButton,
      styles$15.clearButton
    ));
    const toggleButtonClassNames = computed(() => classNames(
      styles$15.PlainButton,
      styles$15.ToggleButton
    ));
    const labelVariant = computed(() => breakpoints2.value.mdDown ? "bodyLg" : "bodySm");
    const togglePopoverActive = () => {
      if (props.filter) {
        popoverActive.value = !popoverActive.value;
      }
      emits("click", props.filterKey);
    };
    const handlePopoverClose = () => {
      togglePopoverActive();
      if (!props.selected) {
        emits("remove", props.filterKey);
      }
    };
    const handleClear = () => {
      emits("remove", props.filterKey);
      popoverActive.value = false;
    };
    const handleScroll = () => {
      var _a, _b;
      const node = elementRef.value;
      if (!node || !popoverActive.value) {
        return;
      }
      const parent = (_a = node.parentElement) == null ? void 0 : _a.parentElement;
      if (!parent) {
        return;
      }
      (_b = parent.scroll) == null ? void 0 : _b.call(parent, {
        left: node.offsetLeft
      });
    };
    onMounted(() => {
      handleScroll();
    });
    watch(
      () => popoverActive.value,
      () => {
        handleScroll();
      }
    );
    return (_ctx, _cache) => {
      return !_ctx.disabled ? (openBlock(), createElementBlock("div", {
        key: 0,
        ref_key: "elementRef",
        ref: elementRef
      }, [
        (openBlock(), createBlock(unref(_sfc_main$P), {
          active: popoverActive.value,
          key: _ctx.filterKey,
          "prevent-close-on-child-overlay-click": !_ctx.closeOnChildOverlayClick,
          "preferred-alignment": "left",
          onClose: handlePopoverClose
        }, {
          activator: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(buttonClasses.value)
            }, [
              createVNode(unref(_sfc_main$1r), {
                gap: "0",
                wrap: false
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$2u), {
                    type: "button",
                    class: normalizeClass(toggleButtonClassNames.value),
                    onClick: togglePopoverActive,
                    onFocus: unref(setFocusedTrue),
                    onBlur: unref(setFocusedFalse)
                  }, {
                    default: withCtx(() => [
                      createVNode(unref(_sfc_main$1r), {
                        align: "center",
                        "block-align": "center",
                        gap: "0",
                        wrap: false
                      }, {
                        default: withCtx(() => [
                          createBaseVNode("div", {
                            class: normalizeClass(unref(styles$15).Label)
                          }, [
                            createVNode(unref(_sfc_main$f), {
                              variant: labelVariant.value,
                              as: "span"
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(_ctx.label), 1)
                              ]),
                              _: 1
                            }, 8, ["variant"])
                          ], 2),
                          !_ctx.selected ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            class: normalizeClass(unref(styles$15).IconWrapper)
                          }, [
                            createVNode(unref(_sfc_main$1K), {
                              source: unref(ChevronDownIcon),
                              tone: "base"
                            }, null, 8, ["source"])
                          ], 2)) : createCommentVNode("", true)
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  }, 8, ["class", "onFocus", "onBlur"]),
                  _ctx.selected ? (openBlock(), createBlock(unref(_sfc_main$2u), {
                    key: 0,
                    type: "button",
                    className: clearButtonClassNames.value,
                    "aria-label": unref(i18n).translate("Polaris.FilterPill.clear"),
                    onClick: handleClear
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", {
                        class: normalizeClass(unref(styles$15).IconWrapper)
                      }, [
                        createVNode(unref(_sfc_main$1K), {
                          source: unref(XSmallIcon),
                          tone: "base"
                        }, null, 8, ["source"])
                      ], 2)
                    ]),
                    _: 1
                  }, 8, ["className", "aria-label"])) : createCommentVNode("", true)
                ]),
                _: 1
              })
            ], 2)
          ]),
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$15).PopoverWrapper)
            }, [
              createVNode(unref(_sfc_main$O), null, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$2C), { gap: "100" }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.filter))),
                      !_ctx.hideClearButton ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(unref(styles$15).ClearButtonWrapper)
                      }, [
                        createVNode(unref(_sfc_main$2t), {
                          variant: "plain",
                          disabled: !_ctx.selected,
                          textAlign: "left",
                          onClick: handleClear
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(i18n).translate("Polaris.FilterPill.clear")), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"])
                      ], 2)) : createCommentVNode("", true)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ], 2)
          ]),
          _: 1
        }, 8, ["active", "prevent-close-on-child-overlay-click"]))
      ], 512)) : createCommentVNode("", true);
    };
  }
});
const _sfc_main$1W = /* @__PURE__ */ defineComponent({
  __name: "SearchField",
  props: /* @__PURE__ */ mergeModels({
    focused: { type: Boolean },
    placeholder: {},
    disabled: { type: Boolean },
    borderlessQueryField: { type: Boolean },
    loading: { type: Boolean },
    selectedViewName: {}
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "clear", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const i18n = useI18n();
    const id = useId();
    const breakpoints2 = useBreakpoints();
    const showSuffix = computed(() => {
      return model.value && props.selectedViewName && breakpoints2.value.mdUp;
    });
    function handleChange(value) {
      emits("change", value);
    }
    function handleClear() {
      emits("clear");
      emits("change", "");
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$9), {
        id: String(unref(id)),
        modelValue: model.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
        "label-hidden": "",
        "clear-button": "",
        size: "slim",
        "auto-complete": "off",
        placeholder: _ctx.placeholder,
        disabled: _ctx.disabled,
        variant: _ctx.borderlessQueryField ? "borderless" : "inherit",
        focused: _ctx.focused,
        label: _ctx.placeholder,
        "auto-size": Boolean(showSuffix.value),
        loading: _ctx.loading,
        onChange: _cache[1] || (_cache[1] = (eventValue) => handleChange(eventValue ?? model.value)),
        onClearButtonClick: handleClear,
        onFocus: _cache[2] || (_cache[2] = ($event) => emits("focus")),
        onBlur: _cache[3] || (_cache[3] = ($event) => emits("blur"))
      }, createSlots({ _: 2 }, [
        unref(breakpoints2).mdUp ? {
          name: "prefix",
          fn: withCtx(() => [
            createVNode(unref(_sfc_main$1K), { source: unref(SearchIcon) }, null, 8, ["source"])
          ]),
          key: "0"
        } : void 0,
        showSuffix.value ? {
          name: "suffix",
          fn: withCtx(() => [
            createVNode(unref(_sfc_main$f), {
              as: "span",
              variant: "bodyMd",
              tone: "subdued"
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Filters.searchInView", { viewName: _ctx.selectedViewName || "" })), 1)
              ]),
              _: 1
            })
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["id", "modelValue", "placeholder", "disabled", "variant", "focused", "label", "auto-size", "loading"]);
    };
  }
});
function useOnValueChange(value, onChange) {
  watch(
    () => value,
    (oldValue, newValue) => {
      if (newValue !== oldValue) {
        onChange(newValue, oldValue);
      }
    }
  );
}
const _hoisted_1$O = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$u = /* @__PURE__ */ createBaseVNode("path", { d: "M10.75 6.75a.75.75 0 0 0-1.5 0v2.5h-2.5a.75.75 0 0 0 0 1.5h2.5v2.5a.75.75 0 0 0 1.5 0v-2.5h2.5a.75.75 0 0 0 0-1.5h-2.5z" }, null, -1);
const _hoisted_3$m = [
  _hoisted_2$u
];
function render$e(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$O, [..._hoisted_3$m]);
}
const PlusIcon = { render: render$e };
const Container$2 = "Polaris-Filters__Container";
const SearchField = "Polaris-Filters__SearchField";
const FiltersWrapper$1 = "Polaris-Filters__FiltersWrapper";
const hideQueryField = "Polaris-Filters--hideQueryField";
const FiltersInner = "Polaris-Filters__FiltersInner";
const AddFilter = "Polaris-Filters__AddFilter";
const FiltersWrapperWithAddButton = "Polaris-Filters__FiltersWrapperWithAddButton";
const AddFilterActivatorMultiple = "Polaris-Filters__AddFilterActivatorMultiple";
const FiltersStickyArea = "Polaris-Filters__FiltersStickyArea";
const ClearAll = "Polaris-Filters__ClearAll";
const MultiplePinnedFilterClearAll = "Polaris-Filters__MultiplePinnedFilterClearAll";
const styles$14 = {
  Container: Container$2,
  SearchField,
  FiltersWrapper: FiltersWrapper$1,
  hideQueryField,
  FiltersInner,
  AddFilter,
  FiltersWrapperWithAddButton,
  AddFilterActivatorMultiple,
  FiltersStickyArea,
  ClearAll,
  MultiplePinnedFilterClearAll
};
const _sfc_main$1V = /* @__PURE__ */ defineComponent({
  __name: "FiltersBar",
  props: {
    queryValue: {},
    queryPlaceholder: {},
    focused: { type: Boolean },
    filters: {},
    appliedFilters: {},
    disabled: { type: Boolean },
    hideQueryField: { type: Boolean },
    disableFilters: { type: Boolean },
    closeOnChildOverlayClick: { type: Boolean },
    mountedStateStyles: {}
  },
  emits: ["clear-all", "add-filter-click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const breakpoints2 = useBreakpoints();
    const popoverActive = ref(false);
    const hasMounted = ref(false);
    const togglePopoverActive = () => {
      popoverActive.value = !popoverActive.value;
    };
    const handleAddFilterClick = () => {
      emits("add-filter-click");
      togglePopoverActive();
    };
    const activatorButtonDisabled = computed(() => {
      return props.disabled || unsectionedFilters.value.length === 0 && sectionedFilters.value.length === 0 || props.disableFilters;
    });
    const appliedFilterKeys = computed(() => {
      var _a;
      return ((_a = props.appliedFilters) == null ? void 0 : _a.map((filter) => filter.name)) || [];
    });
    const pinnedFiltersFromPropsAndAppliedFilters = computed(() => {
      return props.filters.filter((filter) => {
        const isPinnedOrApplied = Boolean(filter.pinned || appliedFilterKeys.value.includes(filter.name));
        return isPinnedOrApplied;
      });
    });
    const localPinnedFilters = ref(
      pinnedFiltersFromPropsAndAppliedFilters.value.map((filter) => filter.name)
    );
    useOnValueChange(props.filters.length, () => {
      localPinnedFilters.value = pinnedFiltersFromPropsAndAppliedFilters.value.map((filter) => filter.name);
    });
    const pinnedFilters = computed(() => {
      return localPinnedFilters.value.map((key) => props.filters.find((filter) => filter.name === key)).reduce(
        (acc, filter) => filter ? [...acc, filter] : acc,
        []
      );
    });
    const onFilterClick = (filter) => {
      setTimeout(() => {
        var _a;
        localPinnedFilters.value = [
          .../* @__PURE__ */ new Set([...localPinnedFilters.value, filter.name])
        ];
        (_a = filter.onAction) == null ? void 0 : _a.call(filter);
        togglePopoverActive();
      }, 0);
    };
    const filterToActionItem = (filter) => {
      const serialFilters = {
        disabled: filter.disabled,
        suffix: filter.suffix
      };
      return {
        ...serialFilters,
        content: filter.label,
        onAction: () => {
          onFilterClick(filter);
        }
      };
    };
    const unpinnedFilters = computed(() => props.filters.filter(
      (filter) => !pinnedFilters.value.some(({ name }) => name === filter.name)
    ));
    const unsectionedFilters = computed(() => unpinnedFilters.value.filter((filter) => !filter.section && !filter.hidden).map(filterToActionItem));
    const sectionedFilters = computed(() => unpinnedFilters.value.filter((filter) => filter.section).reduce(
      (acc, filter) => {
        const filterActionItem = filterToActionItem(filter);
        const sectionIndex = acc.findIndex(
          (section) => section.title === filter.section
        );
        if (sectionIndex === -1) {
          acc.push({
            title: filter.section,
            items: [filterActionItem]
          });
        } else {
          acc[sectionIndex].items.push(filterActionItem);
        }
        return acc;
      },
      []
    ));
    const hasOneOrMorePinnedFilters = computed(() => pinnedFilters.value.length >= 1);
    const labelVariant = computed(() => breakpoints2.value.mdDown ? "bodyLg" : "bodySm");
    const shouldShowAddButton = computed(() => props.filters.some((filter) => !filter.pinned) || props.filters.length !== localPinnedFilters.value.length);
    const filterWrapperClass = computed(() => classNames(
      styles$14.FiltersWrapper,
      shouldShowAddButton.value && hasOneOrMorePinnedFilters.value && styles$14.FilterWrapperWithAddButton
    ));
    const addButtonClassName = computed(() => classNames(
      styles$14.AddFilterActivator,
      hasOneOrMorePinnedFilters.value && styles$14.AddFilterActivatorMultiple
    ));
    const clearAllClassName = computed(() => classNames(
      styles$14.ClearAll,
      hasOneOrMorePinnedFilters.value && shouldShowAddButton.value && styles$14.MultiplePinnedFilterClearAll
    ));
    const pinnedFromPropsKeys = computed(() => props.filters.filter(({ pinned }) => pinned).map(({ name }) => name));
    const appliedFilter = (filterKey) => {
      var _a;
      return (_a = props.appliedFilters) == null ? void 0 : _a.find((filter) => filter.name === filterKey);
    };
    const handleFilterPillRemove = (filterKey) => {
      const appliedFiltered = appliedFilter(filterKey);
      localPinnedFilters.value = localPinnedFilters.value.filter((name) => name !== filterKey);
      localPinnedFilters.value.filter((name) => {
        const isMatchedFilters = name === filterKey;
        const isPinnedFilterFromProps = pinnedFromPropsKeys.value.includes(name);
        return !isMatchedFilters || isPinnedFilterFromProps;
      }), appliedFiltered == null ? void 0 : appliedFiltered.onRemove(filterKey);
    };
    const handleClearAllFilters = () => {
      localPinnedFilters.value = [];
      emits("clear-all");
    };
    onMounted(() => {
      hasMounted.value = true;
    });
    return (_ctx, _cache) => {
      var _a;
      return openBlock(), createElementBlock("div", {
        "aria-live": "polite",
        class: normalizeClass(filterWrapperClass.value),
        style: normalizeStyle(_ctx.mountedStateStyles)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(classNames)(unref(styles$14).FiltersInner))
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(classNames)(unref(styles$14).FiltersStickyArea))
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(pinnedFilters.value, (filter) => {
              var _a2, _b;
              return openBlock(), createBlock(_sfc_main$1X, mergeProps({
                key: filter.key
              }, filter, {
                "initial-active": hasMounted.value && !filter.pinned && !appliedFilter(filter.name),
                label: ((_a2 = appliedFilter(filter.name)) == null ? void 0 : _a2.label) || filter.label,
                "filter-key": filter.name,
                disabled: filter.disabled || _ctx.disableFilters,
                "close-on-child-overlay-click": _ctx.closeOnChildOverlayClick,
                selected: (_b = appliedFilterKeys.value) == null ? void 0 : _b.includes(filter.name),
                onRemove: ($event) => handleFilterPillRemove(filter.name)
              }), null, 16, ["initial-active", "label", "filter-key", "disabled", "close-on-child-overlay-click", "selected", "onRemove"]);
            }), 128)),
            shouldShowAddButton.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(addButtonClassName.value)
            }, [
              createVNode(unref(_sfc_main$P), {
                active: popoverActive.value && !_ctx.disabled,
                onClose: togglePopoverActive
              }, {
                activator: withCtx(() => [
                  createBaseVNode("div", null, [
                    createVNode(unref(_sfc_main$2u), {
                      type: "button",
                      class: normalizeClass(unref(styles$14).AddFilter),
                      "aria-label": unref(i18n).translate("Polaris.Filters.addFilter"),
                      disabled: activatorButtonDisabled.value,
                      "aria-disabled": activatorButtonDisabled.value,
                      onClick: handleAddFilterClick
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$f), {
                          variant: labelVariant.value,
                          as: "span"
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Filters.addFilter")) + toDisplayString(" "), 1)
                          ]),
                          _: 1
                        }, 8, ["variant"]),
                        createVNode(unref(PlusIcon))
                      ]),
                      _: 1
                    }, 8, ["class", "aria-label", "disabled", "aria-disabled"])
                  ])
                ]),
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$2Z), {
                    "action-role": "menuitem",
                    items: unsectionedFilters.value,
                    sections: sectionedFilters.value
                  }, null, 8, ["items", "sections"])
                ]),
                _: 1
              }, 8, ["active"])
            ], 2)) : createCommentVNode("", true),
            ((_a = _ctx.appliedFilters) == null ? void 0 : _a.length) ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(clearAllClassName.value)
            }, [
              createVNode(unref(_sfc_main$2t), {
                size: "micro",
                "remove-underline": "",
                variant: "monochromePlain",
                onClick: handleClearAllFilters
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Filters.clearFilters")), 1)
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true)
          ], 2)
        ], 2),
        _ctx.hideQueryField ? (openBlock(), createBlock(unref(_sfc_main$2B), {
          key: 0,
          "padding-inline-end": "300",
          "padding-block-end": "200",
          "padding-block-start": "200"
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$1r), {
              align: "start",
              "block-align": "center",
              gap: { xs: "400", md: "300" }
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })
          ]),
          _: 3
        })) : createCommentVNode("", true)
      ], 6);
    };
  }
});
const TRANSITION_DURATION$1 = "var(--p-motion-duration-150)";
const TRANSITION_MARGIN = "-36px";
const _sfc_main$1U = /* @__PURE__ */ defineComponent({
  __name: "Filters",
  props: {
    queryValue: {},
    queryPlaceholder: {},
    focused: { type: Boolean },
    filters: {},
    appliedFilters: {},
    disabled: { type: Boolean },
    hideFilters: { type: Boolean },
    hideQueryField: { type: Boolean },
    disableQueryField: { type: Boolean },
    disableFilters: { type: Boolean },
    borderlessQueryField: { type: Boolean },
    loading: { type: Boolean },
    mountedState: {},
    closeOnChildOverlayClick: { type: Boolean },
    selectedViewName: {}
  },
  emits: ["query-change", "query-clear", "clear-all", "query-blur", "query-focus", "add-filter-click"],
  setup(__props, { emit: __emit }) {
    const defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION$1} var(--p-motion-ease)`,
      opacity: 0
    };
    const transitionStyles = {
      entering: { opacity: 1 },
      entered: { opacity: 1 },
      exiting: { opacity: 0 },
      exited: { opacity: 0 },
      unmounted: { opacity: 0 }
    };
    const defaultFilterStyles = {
      transition: `opacity ${TRANSITION_DURATION$1} var(--p-motion-ease), margin ${TRANSITION_DURATION$1} var(--p-motion-ease)`,
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    };
    const transitionFilterStyles = {
      entering: {
        opacity: 1,
        marginTop: 0
      },
      entered: {
        opacity: 1,
        marginTop: 0
      },
      exiting: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      exited: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      },
      unmounted: {
        opacity: 0,
        marginTop: TRANSITION_MARGIN
      }
    };
    const props = __props;
    const emits = __emit;
    useSlots();
    const modelValue = computed({
      get: () => props.queryValue || "",
      set: (value) => emits("query-change", value)
    });
    const filtersClassName = computed(() => classNames(
      styles$14.Filters,
      props.hideQueryField && styles$14.hideQueryField
    ));
    const searchFieldStyle = computed(() => {
      return props.mountedState && !props.hideQueryField ? {
        ...defaultStyle,
        ...transitionStyles[props.mountedState]
      } : void 0;
    });
    const mountedStateStyles = computed(() => {
      return props.mountedState && !props.hideQueryField ? {
        ...defaultFilterStyles,
        ...transitionFilterStyles[props.mountedState]
      } : void 0;
    });
    const hideFilterBar = computed(() => props.hideFilters || props.filters.length === 0);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(filtersClassName.value)
      }, [
        !_ctx.hideQueryField ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(styles$14).Container)
        }, [
          createVNode(unref(_sfc_main$2B), { padding: "200" }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1r), {
                align: "start",
                "block-align": "center",
                gap: { xs: "400", md: "300" }
              }, {
                default: withCtx(() => [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(styles$14).SearchField),
                    style: normalizeStyle(searchFieldStyle.value)
                  }, [
                    createVNode(unref(_sfc_main$1W), {
                      modelValue: modelValue.value,
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => modelValue.value = $event),
                      placeholder: _ctx.queryPlaceholder,
                      focused: _ctx.focused,
                      loading: _ctx.loading,
                      disabled: _ctx.disabled || _ctx.disableQueryField,
                      "borderless-query-field": _ctx.borderlessQueryField,
                      "selected-view-name": _ctx.selectedViewName,
                      onClear: _cache[1] || (_cache[1] = ($event) => emits("query-clear")),
                      onFocus: _cache[2] || (_cache[2] = ($event) => emits("query-focus")),
                      onBlur: _cache[3] || (_cache[3] = ($event) => emits("query-blur"))
                    }, null, 8, ["modelValue", "placeholder", "focused", "loading", "disabled", "borderless-query-field", "selected-view-name"])
                  ], 6),
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              })
            ]),
            _: 3
          })
        ], 2)) : createCommentVNode("", true),
        !hideFilterBar.value ? (openBlock(), createBlock(unref(_sfc_main$1V), {
          key: 1,
          "applied-filters": _ctx.appliedFilters,
          filters: _ctx.filters,
          disabled: _ctx.disabled,
          "hide-query-field": _ctx.hideQueryField,
          "disable-filters": _ctx.disableFilters,
          "close-on-child-overlay-click": _ctx.closeOnChildOverlayClick,
          "mounted-state-styles": mountedStateStyles.value,
          onAddFilterClick: _cache[4] || (_cache[4] = ($event) => emits("add-filter-click")),
          onClearAll: _cache[5] || (_cache[5] = ($event) => emits("clear-all"))
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["applied-filters", "filters", "disabled", "hide-query-field", "disable-filters", "close-on-child-overlay-click", "mounted-state-styles"])) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const _sfc_main$1T = /* @__PURE__ */ defineComponent({
  __name: "Focus",
  props: {
    disabled: { type: Boolean },
    root: {}
  },
  setup(__props) {
    const props = __props;
    const focusNode = () => {
      if (props.disabled || !props.root)
        return;
      if (!props.root || props.root.querySelector("[autofocus]"))
        return;
      focusFirstFocusableNode(props.root, false);
    };
    watch(
      [
        () => props.disabled,
        () => props.root
      ],
      () => focusNode()
    );
    onMounted(() => {
      focusNode();
    });
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default");
    };
  }
});
const FooterHelp = "Polaris-FooterHelp";
const Text$1 = "Polaris-FooterHelp__Text";
const styles$13 = {
  FooterHelp,
  Text: Text$1
};
const _sfc_main$1S = /* @__PURE__ */ defineComponent({
  __name: "FooterHelp",
  setup(__props) {
    useSlots();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$13).FooterHelp)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$13).Text)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2)
      ], 2);
    };
  }
});
const _hoisted_1$N = ["acceptCharset", "action", "autoComplete", "encType", "method", "name", "noValidate", "target"];
const _hoisted_2$t = {
  type: "submit",
  "aria-hidden": "true",
  tabindex: "-1"
};
const _sfc_main$1R = /* @__PURE__ */ defineComponent({
  __name: "Form",
  props: {
    acceptCharset: {},
    action: {},
    autoComplete: { type: Boolean },
    encType: {},
    implicitSubmit: { type: Boolean, default: true },
    method: { default: "post" },
    name: {},
    noValidate: { type: Boolean },
    preventDefault: { type: Boolean, default: true },
    target: {}
  },
  emits: ["submit"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const autoCompleteInputs = computed(() => {
      if (props.autoComplete == null) {
        return props.autoComplete;
      }
      return props.autoComplete ? "on" : "off";
    });
    const handleSubmit = (e) => {
      if (!props.preventDefault) {
        return;
      }
      e.preventDefault();
      emits("submit", e);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("form", {
        acceptCharset: _ctx.acceptCharset,
        action: _ctx.action,
        autoComplete: autoCompleteInputs.value,
        encType: _ctx.encType,
        method: _ctx.method,
        name: _ctx.name,
        noValidate: _ctx.noValidate,
        target: _ctx.target,
        onSubmit: handleSubmit
      }, [
        _ctx.implicitSubmit ? (openBlock(), createBlock(unref(_sfc_main$f), {
          key: 0,
          as: "span",
          "visually-hidden": ""
        }, {
          default: withCtx(() => [
            createBaseVNode("button", _hoisted_2$t, toDisplayString(unref(i18n).translate("Polaris.Common.submit")), 1)
          ]),
          _: 1
        })) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "default")
      ], 40, _hoisted_1$N);
    };
  }
});
const Item$4 = "Polaris-FormLayout__Item";
const grouped = "Polaris-FormLayout--grouped";
const condensed = "Polaris-FormLayout--condensed";
const styles$12 = {
  Item: Item$4,
  grouped,
  condensed
};
const _sfc_main$1Q = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    condensed: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles$12.Item,
      props.condensed ? styles$12.condensed : styles$12.grouped
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const __default__$1 = {
  name: "FormLayoutGroup"
};
const _sfc_main$1P = /* @__PURE__ */ defineComponent({
  ...__default__$1,
  props: {
    condensed: { type: Boolean },
    title: {},
    helpText: {}
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const id = useId();
    const { hasSlot } = useHasSlot();
    const { slotsElms } = useExtractFragment(slots.default);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const titleId = computed(() => props.title && `${id}Title`);
    const helpTextId = computed(() => hasHelpText.value && `${id}HelpText`);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2C), {
        role: "group",
        gap: "200",
        "aria-labelled": titleId.value,
        "aria-describedby": helpTextId.value
      }, {
        default: withCtx(() => [
          _ctx.title ? (openBlock(), createBlock(unref(_sfc_main$f), {
            key: 0,
            id: titleId.value,
            as: "p"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ]),
            _: 1
          }, 8, ["id"])) : createCommentVNode("", true),
          createVNode(unref(_sfc_main$1r), { gap: "300" }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(slotsElms), (item, index) => {
                return openBlock(), createBlock(unref(_sfc_main$1Q), {
                  key: index,
                  condensed: _ctx.condensed
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(item)))
                  ]),
                  _: 2
                }, 1032, ["condensed"]);
              }), 128))
            ]),
            _: 1
          }),
          hasHelpText.value ? (openBlock(), createBlock(unref(_sfc_main$2B), {
            key: 1,
            id: helpTextId.value,
            color: "text-secondary"
          }, {
            default: withCtx(() => [
              unref(slots).helpText ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.helpText), 1)
              ], 64))
            ]),
            _: 3
          }, 8, ["id"])) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["aria-labelled", "aria-describedby"]);
    };
  }
});
const _sfc_main$1O = /* @__PURE__ */ defineComponent({
  __name: "FormLayout",
  props: {
    noItemWrap: { type: Boolean }
  },
  setup(__props) {
    const slots = useSlots();
    const { slotsElms } = useExtractFragment(slots.default);
    const itemRefs = ref([]);
    const isGroup = (child) => {
      return typeof child.type !== "string" && (child.type.name === "FormLayoutGroup" || child.type.__name === "FormLayoutGroup");
    };
    return (_ctx, _cache) => {
      const _component_BlockStack = resolveComponent("BlockStack");
      return openBlock(), createBlock(_component_BlockStack, { gap: "400" }, {
        default: withCtx(() => [
          !_ctx.noItemWrap ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(unref(slotsElms), (child, index) => {
            return openBlock(), createElementBlock(Fragment, { key: index }, [
              !isGroup(child) ? (openBlock(), createBlock(unref(_sfc_main$1Q), { key: 0 }, {
                default: withCtx(() => [
                  (openBlock(), createBlock(resolveDynamicComponent(child), {
                    ref_for: true,
                    ref: (el) => {
                      itemRefs.value[index] = el;
                    }
                  }, null, 512))
                ]),
                _: 2
              }, 1024)) : (openBlock(), createBlock(resolveDynamicComponent(child), {
                key: 1,
                ref_for: true,
                ref: (el) => {
                  itemRefs.value[index] = el;
                }
              }, null, 512))
            ], 64);
          }), 128)) : renderSlot(_ctx.$slots, "default", { key: 1 })
        ]),
        _: 3
      });
    };
  }
});
const _hoisted_1$M = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$s = /* @__PURE__ */ createBaseVNode("path", { d: "M9.75 3A2.25 2.25 0 0 0 7.5 5.25a.75.75 0 0 0 1.5 0 .75.75 0 0 1 .75-.75h3.5c.69 0 1.25.56 1.25 1.25v8.5c0 .69-.56 1.25-1.25 1.25h-3.5c-.414 0-.75-.336-.75-.75a.75.75 0 0 0-1.5 0A2.25 2.25 0 0 0 9.75 17h3.5A2.75 2.75 0 0 0 16 14.25v-8.5A2.75 2.75 0 0 0 13.25 3z" }, null, -1);
const _hoisted_3$l = /* @__PURE__ */ createBaseVNode("path", { d: "M12.25 10.75a.75.75 0 0 0 0-1.5H6.56l.97-.97a.749.749 0 1 0-1.06-1.06L4.22 9.47a.747.747 0 0 0 0 1.06l2.25 2.25a.749.749 0 1 0 1.06-1.06l-.97-.97z" }, null, -1);
const _hoisted_4$b = [
  _hoisted_2$s,
  _hoisted_3$l
];
function render$d(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$M, [..._hoisted_4$b]);
}
const ExitIcon = { render: render$d };
const FullscreenBar = "Polaris-FullscreenBar";
const BackAction = "Polaris-FullscreenBar__BackAction";
const styles$11 = {
  FullscreenBar,
  BackAction
};
const _hoisted_1$L = ["aria-label"];
const _sfc_main$1N = /* @__PURE__ */ defineComponent({
  __name: "FullscreenBar",
  emits: ["action"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    useSlots();
    const i18n = useI18n();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$11).FullscreenBar)
      }, [
        createBaseVNode("button", {
          class: normalizeClass(unref(styles$11).BackAction),
          "aria-label": unref(i18n).translate("Polaris.FullscreenBar.accessibilityLabel"),
          onClick: _cache[0] || (_cache[0] = ($event) => emits("action"))
        }, [
          createVNode(unref(_sfc_main$1K), { source: unref(ExitIcon) }, null, 8, ["source"]),
          createVNode(unref(_sfc_main$f), {
            as: "span",
            variant: "bodyLg"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.FullscreenBar.accessibilityLabel")), 1)
            ]),
            _: 1
          })
        ], 10, _hoisted_1$L),
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const Grid = "Polaris-Grid";
const styles$10 = {
  Grid
};
const _sfc_main$1M = /* @__PURE__ */ defineComponent({
  __name: "Grid",
  props: {
    areas: {},
    columns: {},
    gap: {}
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
      return {
        "--pc-grid-gap-xs": (_a = props.gap) == null ? void 0 : _a.xs,
        "--pc-grid-gap-sm": (_b = props.gap) == null ? void 0 : _b.sm,
        "--pc-grid-gap-md": (_c = props.gap) == null ? void 0 : _c.md,
        "--pc-grid-gap-lg": (_d = props.gap) == null ? void 0 : _d.lg,
        "--pc-grid-gap-xl": (_e = props.gap) == null ? void 0 : _e.xl,
        "--pc-grid-columns-xs": (_f = props.columns) == null ? void 0 : _f.xs,
        "--pc-grid-columns-sm": (_g = props.columns) == null ? void 0 : _g.sm,
        "--pc-grid-columns-md": (_h = props.columns) == null ? void 0 : _h.md,
        "--pc-grid-columns-lg": (_i = props.columns) == null ? void 0 : _i.lg,
        "--pc-grid-columns-xl": (_j = props.columns) == null ? void 0 : _j.xl,
        "--pc-grid-areas-xs": formatAreas((_k = props.areas) == null ? void 0 : _k.xs),
        "--pc-grid-areas-sm": formatAreas((_l = props.areas) == null ? void 0 : _l.sm),
        "--pc-grid-areas-md": formatAreas((_m = props.areas) == null ? void 0 : _m.md),
        "--pc-grid-areas-lg": formatAreas((_n = props.areas) == null ? void 0 : _n.lg),
        "--pc-grid-areas-xl": formatAreas((_o = props.areas) == null ? void 0 : _o.xl)
      };
    });
    function formatAreas(areas) {
      if (!areas)
        return;
      return `'${areas == null ? void 0 : areas.join(`' '`)}'`;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$10).Grid),
        style: normalizeStyle(style.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 6);
    };
  }
});
const Cell = "Polaris-Grid-Cell";
const styles$$ = {
  Cell,
  "Cell-1-column-xs": "Polaris-Grid-Cell--cell_1ColumnXs",
  "Cell-2-column-xs": "Polaris-Grid-Cell--cell_2ColumnXs",
  "Cell-3-column-xs": "Polaris-Grid-Cell--cell_3ColumnXs",
  "Cell-4-column-xs": "Polaris-Grid-Cell--cell_4ColumnXs",
  "Cell-5-column-xs": "Polaris-Grid-Cell--cell_5ColumnXs",
  "Cell-6-column-xs": "Polaris-Grid-Cell--cell_6ColumnXs",
  "Cell-1-column-sm": "Polaris-Grid-Cell--cell_1ColumnSm",
  "Cell-2-column-sm": "Polaris-Grid-Cell--cell_2ColumnSm",
  "Cell-3-column-sm": "Polaris-Grid-Cell--cell_3ColumnSm",
  "Cell-4-column-sm": "Polaris-Grid-Cell--cell_4ColumnSm",
  "Cell-5-column-sm": "Polaris-Grid-Cell--cell_5ColumnSm",
  "Cell-6-column-sm": "Polaris-Grid-Cell--cell_6ColumnSm",
  "Cell-1-column-md": "Polaris-Grid-Cell--cell_1ColumnMd",
  "Cell-2-column-md": "Polaris-Grid-Cell--cell_2ColumnMd",
  "Cell-3-column-md": "Polaris-Grid-Cell--cell_3ColumnMd",
  "Cell-4-column-md": "Polaris-Grid-Cell--cell_4ColumnMd",
  "Cell-5-column-md": "Polaris-Grid-Cell--cell_5ColumnMd",
  "Cell-6-column-md": "Polaris-Grid-Cell--cell_6ColumnMd",
  "Cell-1-column-lg": "Polaris-Grid-Cell--cell_1ColumnLg",
  "Cell-2-column-lg": "Polaris-Grid-Cell--cell_2ColumnLg",
  "Cell-3-column-lg": "Polaris-Grid-Cell--cell_3ColumnLg",
  "Cell-4-column-lg": "Polaris-Grid-Cell--cell_4ColumnLg",
  "Cell-5-column-lg": "Polaris-Grid-Cell--cell_5ColumnLg",
  "Cell-6-column-lg": "Polaris-Grid-Cell--cell_6ColumnLg",
  "Cell-7-column-lg": "Polaris-Grid-Cell--cell_7ColumnLg",
  "Cell-8-column-lg": "Polaris-Grid-Cell--cell_8ColumnLg",
  "Cell-9-column-lg": "Polaris-Grid-Cell--cell_9ColumnLg",
  "Cell-10-column-lg": "Polaris-Grid-Cell--cell_10ColumnLg",
  "Cell-11-column-lg": "Polaris-Grid-Cell--cell_11ColumnLg",
  "Cell-12-column-lg": "Polaris-Grid-Cell--cell_12ColumnLg",
  "Cell-1-column-xl": "Polaris-Grid-Cell--cell_1ColumnXl",
  "Cell-2-column-xl": "Polaris-Grid-Cell--cell_2ColumnXl",
  "Cell-3-column-xl": "Polaris-Grid-Cell--cell_3ColumnXl",
  "Cell-4-column-xl": "Polaris-Grid-Cell--cell_4ColumnXl",
  "Cell-5-column-xl": "Polaris-Grid-Cell--cell_5ColumnXl",
  "Cell-6-column-xl": "Polaris-Grid-Cell--cell_6ColumnXl",
  "Cell-7-column-xl": "Polaris-Grid-Cell--cell_7ColumnXl",
  "Cell-8-column-xl": "Polaris-Grid-Cell--cell_8ColumnXl",
  "Cell-9-column-xl": "Polaris-Grid-Cell--cell_9ColumnXl",
  "Cell-10-column-xl": "Polaris-Grid-Cell--cell_10ColumnXl",
  "Cell-11-column-xl": "Polaris-Grid-Cell--cell_11ColumnXl",
  "Cell-12-column-xl": "Polaris-Grid-Cell--cell_12ColumnXl"
};
const _sfc_main$1L = /* @__PURE__ */ defineComponent({
  __name: "Cell",
  props: {
    area: {},
    column: {},
    columnSpan: {},
    row: {}
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => {
      var _a, _b, _c, _d, _e;
      return classNames(
        styles$$.Cell,
        ((_a = props.columnSpan) == null ? void 0 : _a.xs) && styles$$[`Cell-${props.columnSpan.xs}-column-xs`],
        ((_b = props.columnSpan) == null ? void 0 : _b.sm) && styles$$[`Cell-${props.columnSpan.sm}-column-sm`],
        ((_c = props.columnSpan) == null ? void 0 : _c.md) && styles$$[`Cell-${props.columnSpan.md}-column-md`],
        ((_d = props.columnSpan) == null ? void 0 : _d.lg) && styles$$[`Cell-${props.columnSpan.lg}-column-lg`],
        ((_e = props.columnSpan) == null ? void 0 : _e.xl) && styles$$[`Cell-${props.columnSpan.xl}-column-xl`]
      );
    });
    const style = computed(() => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
      return {
        "gridArea": props.area,
        "--pc-column-xs": (_a = props.column) == null ? void 0 : _a.xs,
        "--pc-column-sm": (_b = props.column) == null ? void 0 : _b.sm,
        "--pc-column-md": (_c = props.column) == null ? void 0 : _c.md,
        "--pc-column-lg": (_d = props.column) == null ? void 0 : _d.lg,
        "--pc-column-xl": (_e = props.column) == null ? void 0 : _e.xl,
        "--pc-row-xs": (_f = props.row) == null ? void 0 : _f.xs,
        "--pc-row-sm": (_g = props.row) == null ? void 0 : _g.sm,
        "--pc-row-md": (_h = props.row) == null ? void 0 : _h.md,
        "--pc-row-lg": (_i = props.row) == null ? void 0 : _i.lg,
        "--pc-row-xl": (_j = props.row) == null ? void 0 : _j.xl
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        style: normalizeStyle(style.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 6);
    };
  }
});
const Icon$3 = "Polaris-Icon";
const toneInherit = "Polaris-Icon--toneInherit";
const toneBase = "Polaris-Icon--toneBase";
const toneSubdued$1 = "Polaris-Icon--toneSubdued";
const toneCaution = "Polaris-Icon--toneCaution";
const toneWarning$1 = "Polaris-Icon--toneWarning";
const toneCritical$2 = "Polaris-Icon--toneCritical";
const toneInteractive = "Polaris-Icon--toneInteractive";
const toneInfo = "Polaris-Icon--toneInfo";
const toneSuccess$2 = "Polaris-Icon--toneSuccess";
const tonePrimary$1 = "Polaris-Icon--tonePrimary";
const toneEmphasis = "Polaris-Icon--toneEmphasis";
const toneMagic$3 = "Polaris-Icon--toneMagic";
const toneTextCaution = "Polaris-Icon--toneTextCaution";
const toneTextWarning = "Polaris-Icon--toneTextWarning";
const toneTextCritical = "Polaris-Icon--toneTextCritical";
const toneTextInfo = "Polaris-Icon--toneTextInfo";
const toneTextPrimary = "Polaris-Icon--toneTextPrimary";
const toneTextSuccess = "Polaris-Icon--toneTextSuccess";
const toneTextMagic = "Polaris-Icon--toneTextMagic";
const Svg = "Polaris-Icon__Svg";
const Img = "Polaris-Icon__Img";
const Placeholder = "Polaris-Icon__Placeholder";
const styles$_ = {
  Icon: Icon$3,
  toneInherit,
  toneBase,
  toneSubdued: toneSubdued$1,
  toneCaution,
  toneWarning: toneWarning$1,
  toneCritical: toneCritical$2,
  toneInteractive,
  toneInfo,
  toneSuccess: toneSuccess$2,
  tonePrimary: tonePrimary$1,
  toneEmphasis,
  toneMagic: toneMagic$3,
  toneTextCaution,
  toneTextWarning,
  toneTextCritical,
  toneTextInfo,
  toneTextPrimary,
  toneTextSuccess,
  toneTextMagic,
  Svg,
  Img,
  Placeholder
};
const _hoisted_1$K = ["src"];
const _sfc_main$1K = /* @__PURE__ */ defineComponent({
  __name: "Icon",
  props: {
    source: {},
    tone: {},
    accessibilityLabel: {}
  },
  setup(__props) {
    const props = __props;
    const sourceType = computed(() => {
      const functionTypes = ["function", "object"];
      if (functionTypes.includes(typeof props.source)) {
        return "function";
      }
      return props.source === "placeholder" ? "placeholder" : "external";
    });
    const className = computed(() => classNames(
      styles$_.Icon,
      props.tone && styles$_[variationName("tone", props.tone)],
      props.tone && styles$_.applyColor
    ));
    if (props.tone && sourceType.value === "external") {
      console.warn("Recoloring external SVGs is not supported. Set the intended color on your SVG instead.");
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(className.value)
      }, [
        createVNode(unref(_sfc_main$f), {
          as: "span",
          "visually-hidden": ""
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(_ctx.accessibilityLabel), 1)
          ]),
          _: 1
        }),
        sourceType.value === "function" ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.source), {
          key: 0,
          class: normalizeClass(unref(styles$_).Svg),
          focusable: false,
          "aria-hidden": true
        }, null, 8, ["class"])) : createCommentVNode("", true),
        sourceType.value === "placeholder" ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(styles$_).Placeholder)
        }, null, 2)) : createCommentVNode("", true),
        sourceType.value === "external" ? (openBlock(), createElementBlock("img", {
          key: 2,
          alt: "",
          class: normalizeClass(unref(styles$_).Img),
          src: `data:image/svg+xml;utf8,${_ctx.source}`,
          "aria-hidden": true
        }, null, 10, _hoisted_1$K)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const _hoisted_1$J = ["alt", "src", "crossOrigin", "src-set"];
const _sfc_main$1J = /* @__PURE__ */ defineComponent({
  __name: "Image",
  props: {
    alt: {},
    source: {},
    crossOrigin: {},
    sourceSet: {}
  },
  emits: ["load"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const finalSourceSet = computed(
      () => props.sourceSet ? props.sourceSet.map(({ source: subSource, descriptor }) => `${subSource} ${descriptor}`).join(",") : null
    );
    const handleLoad = () => {
      emits("load");
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("img", {
        alt: _ctx.alt,
        src: _ctx.source,
        crossOrigin: _ctx.crossOrigin,
        "src-set": finalSourceSet.value ? finalSourceSet.value : void 0,
        onLoad: handleLoad
      }, null, 40, _hoisted_1$J);
    };
  }
});
const DEBOUNCE_PERIOD = 250;
function useIsSticky(mode, disabled2, isFlushWhenSticky) {
  const hasIOSupport = typeof window !== "undefined" && Boolean(window.IntersectionObserver);
  const indexFilteringHeight = ref(0);
  const isSticky = ref(false);
  const measurerRef = ref(null);
  const intersectionRef = ref(null);
  const handleIntersect = (entries) => {
    entries.forEach((entry) => {
      isSticky.value = !entry.isIntersecting;
    });
  };
  const options = {
    root: null,
    rootMargin: `${isFlushWhenSticky ? "0px" : "-56px"} 0px 0px 0px`,
    threshold: 0
  };
  const observerRef = ref(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null);
  const box = computed(() => {
    var _a;
    return (_a = measurerRef.value) == null ? void 0 : _a.getBoundingClientRect();
  });
  const computeTableDimensions = () => {
    if (!measurerRef.value) {
      return {
        height: 0
      };
    }
    if (!box.value) {
      return;
    }
    const height2 = box.value.height;
    indexFilteringHeight.value = height2;
  };
  const debouncedComputeDimensions = debounce(
    computeTableDimensions,
    DEBOUNCE_PERIOD,
    {
      trailing: true
    }
  );
  onMounted(() => {
    window.addEventListener("resize", debouncedComputeDimensions);
    if (!observerRef.value) {
      return;
    }
    if (intersectionRef.value) {
      observerRef.value.observe(intersectionRef.value);
    }
  });
  onBeforeUnmount(() => {
    var _a;
    window.removeEventListener("resize", debouncedComputeDimensions);
    (_a = observerRef.value) == null ? void 0 : _a.disconnect();
  });
  watch(
    () => mode,
    () => {
      computeTableDimensions();
    },
    { flush: "post" }
  );
  return {
    intersectionRef,
    measurerRef,
    isSticky: isSticky.value && !disabled2,
    indexFilteringHeight
  };
}
const Container$1 = "Polaris-IndexFilters-Container";
const styles$Z = {
  Container: Container$1
};
const _sfc_main$1I = /* @__PURE__ */ defineComponent({
  __name: "Container",
  setup(__props) {
    useSlots();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$Z).Container)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _hoisted_1$I = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$r = /* @__PURE__ */ createBaseVNode("path", { d: "M3 6a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5H3.75A.75.75 0 0 1 3 6M6.75 14a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75M5.5 9.25a.75.75 0 0 0 0 1.5h9a.75.75 0 0 0 0-1.5z" }, null, -1);
const _hoisted_3$k = [
  _hoisted_2$r
];
function render$c(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$I, [..._hoisted_3$k]);
}
const FilterIcon = { render: render$c };
const _sfc_main$1H = /* @__PURE__ */ defineComponent({
  __name: "SearchFilterButton",
  props: {
    label: {},
    disabled: { type: Boolean },
    tooltipContent: {},
    hideFilters: { type: Boolean },
    hideQueryField: { type: Boolean },
    style: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$4), {
        "preferred-position": "above",
        "hover-delay": 400
      }, {
        content: withCtx(() => [
          createVNode(unref(_sfc_main$f), {
            as: "span",
            variant: "bodyMd",
            alignment: "center"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.tooltipContent), 1)
            ]),
            _: 1
          })
        ]),
        default: withCtx(() => [
          createBaseVNode("div", {
            style: normalizeStyle(_ctx.style)
          }, [
            createVNode(unref(_sfc_main$2t), {
              size: "slim",
              disabled: _ctx.disabled,
              "accessibility-label": _ctx.label,
              onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
            }, {
              icon: withCtx(() => [
                createVNode(unref(_sfc_main$1r), { gap: "0" }, {
                  default: withCtx(() => [
                    !_ctx.hideQueryField ? (openBlock(), createBlock(unref(_sfc_main$1K), {
                      key: 0,
                      source: unref(SearchIcon),
                      tone: "base"
                    }, null, 8, ["source"])) : createCommentVNode("", true),
                    !_ctx.hideFilters ? (openBlock(), createBlock(unref(_sfc_main$1K), {
                      key: 1,
                      source: unref(FilterIcon),
                      tone: "base"
                    }, null, 8, ["source"])) : createCommentVNode("", true)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["disabled", "accessibility-label"])
          ], 4)
        ]),
        _: 1
      });
    };
  }
});
const _hoisted_1$H = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$q = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M3 6.75A3.75 3.75 0 0 1 6.75 3h6.5A3.75 3.75 0 0 1 17 6.75v6.5A3.75 3.75 0 0 1 13.25 17h-6.5A3.75 3.75 0 0 1 3 13.25zM6.75 4.5A2.25 2.25 0 0 0 4.5 6.75v6.5a2.25 2.25 0 0 0 2.25 2.25h.5v-11zm4.5 11h-2.5v-11h2.5zm1.5 0h.5a2.25 2.25 0 0 0 2.25-2.25v-6.5a2.25 2.25 0 0 0-2.25-2.25h-.5z"
}, null, -1);
const _hoisted_3$j = [
  _hoisted_2$q
];
function render$b(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$H, [..._hoisted_3$j]);
}
const LayoutColumns3Icon = { render: render$b };
const _sfc_main$1G = /* @__PURE__ */ defineComponent({
  __name: "EditColumnsButton",
  props: {
    disabled: { type: Boolean }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const i18n = useI18n();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$4), {
        "preferred-position": "above",
        "hover-delay": 400
      }, {
        content: withCtx(() => [
          createVNode(unref(_sfc_main$f), {
            as: "span",
            variant: "bodyMd",
            alignment: "center"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.IndexFilters.EditColumnsButton.tooltip")), 1)
            ]),
            _: 1
          })
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2t), {
            size: "slim",
            disabled: _ctx.disabled,
            icon: unref(LayoutColumns3Icon),
            "accessibility-label": unref(i18n).translate("Polaris.IndexFilters.EditColumnsButton.accessibilityLabel"),
            onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
          }, null, 8, ["disabled", "icon", "accessibility-label"])
        ]),
        _: 1
      });
    };
  }
});
const _hoisted_1$G = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$p = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M10 3.5a.75.75 0 0 1 .75.75v9.69l2.72-2.72a.75.75 0 0 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 1.06-1.06l2.72 2.72V4.25A.75.75 0 0 1 10 3.5"
}, null, -1);
const _hoisted_3$i = [
  _hoisted_2$p
];
function render$a(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$G, [..._hoisted_3$i]);
}
const ArrowDownIcon = { render: render$a };
const _hoisted_1$F = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$o = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M10 16.5a.75.75 0 0 1-.75-.75V6.06L6.53 8.78a.75.75 0 1 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 1 1-1.06 1.06l-2.72-2.72v9.69a.75.75 0 0 1-.75.75"
}, null, -1);
const _hoisted_3$h = [
  _hoisted_2$o
];
function render$9(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$F, [..._hoisted_3$h]);
}
const ArrowUpIcon = { render: render$9 };
const DirectionButton = "Polaris-SortButton-DirectionButton";
const Label$4 = "Polaris-SortButton-DirectionButton__Label";
const styles$Y = {
  DirectionButton,
  "DirectionButton-active": "Polaris-SortButton-DirectionButton__DirectionButton--active",
  Label: Label$4
};
const _sfc_main$1F = /* @__PURE__ */ defineComponent({
  __name: "DirectionButton",
  props: {
    active: { type: Boolean },
    direction: {},
    value: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const classes = computed(() => classNames(
      styles$Y.DirectionButton,
      !!props.active && styles$Y["DirectionButton-active"]
    ));
    const iconSource = computed(() => props.direction === "asc" ? ArrowUpIcon : ArrowDownIcon);
    const handleClick = () => {
      emits("click", [props.value]);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2u), {
        "class-name": classes.value,
        onClick: handleClick
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$1K), {
            tone: "base",
            source: iconSource.value
          }, null, 8, ["source"]),
          createBaseVNode("span", {
            class: normalizeClass(unref(styles$Y).Label)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)
        ]),
        _: 3
      }, 8, ["class-name"]);
    };
  }
});
const _hoisted_1$E = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$n = /* @__PURE__ */ createBaseVNode("path", { d: "M7.75 6.06v7.69a.75.75 0 0 1-1.5 0V6.06L4.53 7.78a.75.75 0 0 1-1.06-1.06l3-3a.75.75 0 0 1 1.06 0l3 3a.75.75 0 1 1-1.06 1.06zM13.75 6.25a.75.75 0 0 0-1.5 0v7.69l-1.72-1.72a.75.75 0 1 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l3-3a.75.75 0 1 0-1.06-1.06l-1.72 1.72z" }, null, -1);
const _hoisted_3$g = [
  _hoisted_2$n
];
function render$8(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$E, [..._hoisted_3$g]);
}
const SortIcon = { render: render$8 };
const _sfc_main$1E = /* @__PURE__ */ defineComponent({
  __name: "SortButton",
  props: /* @__PURE__ */ mergeModels({
    choices: {},
    selected: {},
    disabled: { type: Boolean }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "change-key", "change-direction"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    onMounted(() => {
      model.value = props.selected;
    });
    watch(
      () => props.selected,
      (newVal) => {
        model.value = newVal;
      },
      { immediate: true }
    );
    const i18n = useI18n();
    const currentInstance = getCurrentInstance();
    const active2 = ref(false);
    const selectedValue = computed(() => props.selected[0].split(" "));
    const selectedValueKey = computed(() => selectedValue.value[0]);
    const selectedDirection = computed(() => selectedValue.value[1]);
    const choiceListChoices = computed(() => {
      const choiceCategories = props.choices.reduce(
        (acc, curr) => {
          const alreadyExists = acc.some((option) => option.label === curr.label);
          const [, currentValueDirection] = curr.value.split(" ");
          const isSameDirection = currentValueDirection === selectedDirection.value;
          if (!alreadyExists) {
            return [...acc, curr];
          }
          if (isSameDirection) {
            return acc.map((option) => {
              if (option.label === curr.label) {
                return curr;
              }
              return option;
            });
          }
          return acc;
        },
        []
      );
      return choiceCategories;
    });
    const selectedChoices = computed(() => {
      return props.choices.filter((choice) => {
        const [currentKey] = choice.value.split(" ");
        return currentKey === selectedValueKey.value;
      });
    });
    function handleClick() {
      active2.value = !active2.value;
    }
    function handleClose() {
      active2.value = false;
    }
    function handleChangeChoiceList(value, _name) {
      var _a;
      if ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onChangeKey) {
        const [key] = value[0].split(" ");
        emits("change-key", key);
      } else {
        emits("change", value);
      }
    }
    function handleChangeDirection($el) {
      var _a;
      if ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onChangeDirection) {
        const [, direction] = $el[0].split(" ");
        emits("change-direction", direction);
      } else {
        emits("change", $el);
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$P), {
        "fluid-content": "",
        "autofocus-target": "first-node",
        "preferred-alignment": "right",
        active: active2.value && !_ctx.disabled,
        onClose: handleClose
      }, {
        activator: withCtx(() => [
          createVNode(unref(_sfc_main$4), {
            "preferred-position": "above",
            content: unref(i18n).translate("Polaris.IndexFilters.SortButton.tooltip"),
            "hover-delay": 400
          }, null, 8, ["content"]),
          createVNode(unref(_sfc_main$2t), {
            size: "slim",
            icon: unref(SortIcon),
            disabled: _ctx.disabled,
            "accessibility-label": unref(i18n).translate("Polaris.IndexFilters.SortButton.ariaLabel"),
            onClick: handleClick
          }, null, 8, ["icon", "disabled", "accessibility-label"])
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2B), {
            "min-width": "148px",
            "padding-inline-start": "300",
            "padding-inline-end": "300",
            "padding-block-start": "200",
            "padding-block-end": "200",
            "border-block-end-width": "025",
            "border-color": "border-secondary"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$2j), {
                modelValue: model.value,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                title: unref(i18n).translate("Polaris.IndexFilters.SortButton.title"),
                choices: choiceListChoices.value,
                onChange: handleChangeChoiceList
              }, null, 8, ["modelValue", "title", "choices"])
            ]),
            _: 1
          }),
          createVNode(unref(_sfc_main$2B), {
            "padding-inline-start": "300",
            "padding-inline-end": "150",
            "padding-block-start": "200",
            "padding-block-end": "200"
          }, {
            default: withCtx(() => {
              var _a, _b, _c, _d;
              return [
                createVNode(unref(_sfc_main$1F), {
                  direction: "asc",
                  active: selectedDirection.value === "asc",
                  value: (_b = (_a = selectedChoices.value) == null ? void 0 : _a[0]) == null ? void 0 : _b.value,
                  onClick: handleChangeDirection
                }, {
                  default: withCtx(() => {
                    var _a2, _b2;
                    return [
                      createTextVNode(toDisplayString((_b2 = (_a2 = selectedChoices.value) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.directionLabel), 1)
                    ];
                  }),
                  _: 1
                }, 8, ["active", "value"]),
                createVNode(unref(_sfc_main$1F), {
                  direction: "desc",
                  active: selectedDirection.value === "desc",
                  value: (_d = (_c = selectedChoices.value) == null ? void 0 : _c[1]) == null ? void 0 : _d.value,
                  onClick: handleChangeDirection
                }, {
                  default: withCtx(() => {
                    var _a2, _b2;
                    return [
                      createTextVNode(toDisplayString((_b2 = (_a2 = selectedChoices.value) == null ? void 0 : _a2[1]) == null ? void 0 : _b2.directionLabel), 1)
                    ];
                  }),
                  _: 1
                }, 8, ["active", "value"])
              ];
            }),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["active"]);
    };
  }
});
function useIsTouchDevice() {
  const isTouchDevice = ref(false);
  const handleTouchStart = () => isTouchDevice.value = true;
  useEventListener("touchstart", handleTouchStart);
  return isTouchDevice;
}
const MAX_VIEW_NAME_LENGTH$3 = 40;
const _sfc_main$1D = /* @__PURE__ */ defineComponent({
  __name: "UpdateButtons",
  props: {
    primaryAction: {},
    cancelAction: {},
    viewNames: {},
    disabled: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const isTouchDevice = useIsTouchDevice();
    const savedViewName = ref("");
    const savedViewModalOpen = ref(false);
    const container = ref(null);
    const hasSameNameError = computed(() => props.viewNames.some(
      (name) => name.trim().toLowerCase() === savedViewName.value.trim().toLowerCase()
    ));
    const isPrimaryActionDisabled = computed(() => {
      var _a;
      return hasSameNameError.value || !savedViewName.value || ((_a = props.primaryAction) == null ? void 0 : _a.loading) || savedViewName.value.length > MAX_VIEW_NAME_LENGTH$3;
    });
    const primaryModalAction = computed(() => {
      return {
        content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.save"),
        onAction: handlePrimaryAction,
        disabled: isPrimaryActionDisabled.value
      };
    });
    const secondaryModalActions = computed(() => {
      return [
        {
          onAction: handleCloseModal,
          content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.cancel")
        }
      ];
    });
    const buttonText = computed(() => {
      var _a;
      switch ((_a = props.primaryAction) == null ? void 0 : _a.type) {
        case "save":
          return i18n.translate("Polaris.IndexFilters.UpdateButtons.save");
        case "save-as":
        default:
          return i18n.translate("Polaris.IndexFilters.UpdateButtons.saveAs");
      }
    });
    async function handleClickSaveButton() {
      var _a, _b;
      if (((_a = props.primaryAction) == null ? void 0 : _a.type) === "save-as") {
        handleOpenModal();
      } else {
        await ((_b = props.primaryAction) == null ? void 0 : _b.onAction(""));
      }
    }
    function handleOpenModal() {
      savedViewModalOpen.value = true;
    }
    function handleCloseModal() {
      savedViewModalOpen.value = false;
    }
    function handleChange(value) {
      savedViewName.value = value;
    }
    async function handlePrimaryAction() {
      var _a;
      if (isPrimaryActionDisabled.value)
        return;
      await ((_a = props.primaryAction) == null ? void 0 : _a.onAction(savedViewName.value));
      handleCloseModal();
    }
    watch(
      () => [savedViewModalOpen.value, isTouchDevice.value],
      () => {
        if (!container.value || isTouchDevice.value)
          return;
        if (savedViewModalOpen.value) {
          focusFirstFocusableNode(container.value);
        }
      },
      { flush: "post" }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1r), {
        align: "start",
        "block-align": "center",
        gap: "100"
      }, {
        default: withCtx(() => {
          var _a, _b;
          return [
            _ctx.cancelAction ? (openBlock(), createBlock(unref(_sfc_main$2t), {
              key: 0,
              size: "micro",
              variant: "tertiary",
              disabled: _ctx.disabled,
              onClick: _ctx.cancelAction.onAction
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.cancel")), 1)
              ]),
              _: 1
            }, 8, ["disabled", "onClick"])) : createCommentVNode("", true),
            ((_a = _ctx.primaryAction) == null ? void 0 : _a.type) === "save-as" ? (openBlock(), createBlock(unref(_sfc_main$14), {
              key: 1,
              open: savedViewModalOpen.value,
              primaryAction: primaryModalAction.value,
              secondaryActions: secondaryModalActions.value
            }, {
              title: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.modal.title")), 1)
              ]),
              activator: withCtx(() => [
                createVNode(unref(_sfc_main$1r), null, {
                  default: withCtx(() => {
                    var _a2;
                    return [
                      createVNode(unref(_sfc_main$2t), {
                        size: "micro",
                        disabled: ((_a2 = _ctx.primaryAction) == null ? void 0 : _a2.disabled) || _ctx.disabled,
                        onClick: handleClickSaveButton
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(buttonText.value), 1)
                        ]),
                        _: 1
                      }, 8, ["disabled"])
                    ];
                  }),
                  _: 1
                })
              ]),
              default: withCtx(() => [
                createVNode(unref(_sfc_main$15), null, {
                  default: withCtx(() => [
                    createVNode(unref(_sfc_main$1R), { onSubmit: handlePrimaryAction }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$1O), null, {
                          default: withCtx(() => [
                            createBaseVNode("div", {
                              ref_key: "container",
                              ref: container
                            }, [
                              createVNode(unref(_sfc_main$9), {
                                modelValue: savedViewName.value,
                                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => savedViewName.value = $event),
                                "show-character-count": "",
                                "auto-complete": "off",
                                disabled: _ctx.disabled,
                                "max-length": MAX_VIEW_NAME_LENGTH$3,
                                label: unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.modal.label"),
                                error: hasSameNameError.value ? unref(i18n).translate("Polaris.IndexFilters.UpdateButtons.modal.sameName", { name: savedViewName.value }) : void 0,
                                onChange: handleChange
                              }, null, 8, ["modelValue", "disabled", "label", "error"])
                            ], 512)
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["open", "primaryAction", "secondaryActions"])) : (openBlock(), createBlock(unref(_sfc_main$2t), {
              key: 2,
              size: "micro",
              disabled: ((_b = _ctx.primaryAction) == null ? void 0 : _b.disabled) || _ctx.disabled,
              onClick: handleClickSaveButton
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(buttonText.value), 1)
              ]),
              _: 1
            }, 8, ["disabled"]))
          ];
        }),
        _: 1
      });
    };
  }
});
var IndexFiltersMode = /* @__PURE__ */ ((IndexFiltersMode2) => {
  IndexFiltersMode2["Default"] = "DEFAULT";
  IndexFiltersMode2["Filtering"] = "FILTERING";
  IndexFiltersMode2["EditingColumns"] = "EDITING_COLUMNS";
  return IndexFiltersMode2;
})(IndexFiltersMode || {});
const IndexFiltersWrapper = "Polaris-IndexFilters__IndexFiltersWrapper";
const IndexFilters = "Polaris-IndexFilters";
const IndexFiltersSticky = "Polaris-IndexFilters__IndexFiltersSticky";
const IndexFiltersStickyFlush = "Polaris-IndexFilters__IndexFiltersStickyFlush";
const TabsWrapper = "Polaris-IndexFilters__TabsWrapper";
const SmallScreenTabsWrapper = "Polaris-IndexFilters__SmallScreenTabsWrapper";
const TabsWrapperLoading = "Polaris-IndexFilters__TabsWrapperLoading";
const DesktopLoading = "Polaris-IndexFilters__DesktopLoading";
const TabsLoading = "Polaris-IndexFilters__TabsLoading";
const ActionWrap = "Polaris-IndexFilters__ActionWrap";
const Spinner$2 = "Polaris-IndexFilters__Spinner";
const ButtonWrap = "Polaris-IndexFilters__ButtonWrap";
const styles$X = {
  IndexFiltersWrapper,
  IndexFilters,
  IndexFiltersSticky,
  IndexFiltersStickyFlush,
  TabsWrapper,
  SmallScreenTabsWrapper,
  TabsWrapperLoading,
  DesktopLoading,
  TabsLoading,
  ActionWrap,
  Spinner: Spinner$2,
  ButtonWrap
};
const TRANSITION_DURATION = 150;
const _sfc_main$1C = /* @__PURE__ */ defineComponent({
  __name: "IndexFilters",
  props: {
    sortOptions: {},
    sortSelected: {},
    primaryAction: {},
    cancelAction: {},
    mode: {},
    disabled: { type: Boolean },
    disableQueryField: { type: Boolean },
    disableStickyMode: { type: Boolean },
    isFlushWhenSticky: { type: Boolean, default: false },
    canCreateNewView: { type: Boolean, default: true },
    filteringAccessibilityLabel: {},
    filteringAccessibilityTooltip: {},
    closeOnChildOverlayClick: { type: Boolean },
    disableKeyboardShortcuts: { type: Boolean },
    showEditColumnsButton: { type: Boolean },
    autoFocusSearchField: { type: Boolean },
    queryValue: { default: "" },
    queryPlaceholder: {},
    filters: {},
    appliedFilters: {},
    hideFilters: { type: Boolean },
    hideQueryField: { type: Boolean },
    borderlessQueryField: { type: Boolean },
    loading: { type: Boolean },
    mountedState: {},
    selectedViewName: {},
    tabs: {},
    selected: {}
  },
  emits: ["sort", "sort-key-change", "sort-direction-change", "filter-click", "set-mode", "create-new-view", "edit-start", "query-change", "query-clear", "clear-all", "query-blur", "query-focus", "add-filter-click", "select"],
  setup(__props, { emit: __emit }) {
    var _a;
    const DEFAULT_IGNORED_TAGS = ["INPUT", "SELECT", "TEXTAREA"];
    const defaultStyle = {
      transition: `opacity ${TRANSITION_DURATION}ms var(--p-motion-ease)`,
      opacity: 0
    };
    const transitionStyles = {
      entering: { opacity: 1 },
      entered: { opacity: 1 },
      exiting: { opacity: 0 },
      exited: { opacity: 0 },
      unmounted: { opacity: 0 }
    };
    const props = __props;
    const emits = __emit;
    const currentInstance = getCurrentInstance();
    const i18n = useI18n();
    const breakpoints2 = useBreakpoints();
    const {
      value: filtersFocused,
      setFalse: setFiltersUnFocused,
      setTrue: setFiltersFocused
    } = useToggle(props.mode === IndexFiltersMode.Filtering && props.autoFocusSearchField);
    const { intersectionRef, measurerRef, indexFilteringHeight, isSticky } = useIsSticky(props.mode, Boolean(props.disableStickyMode), props.isFlushWhenSticky);
    const defaultRef = ref(null);
    const filteringRef = ref(null);
    const isActionLoading = computed(() => {
      var _a2, _b;
      return ((_a2 = props.primaryAction) == null ? void 0 : _a2.loading) || ((_b = props.cancelAction) == null ? void 0 : _b.loading);
    });
    const searchFilterTooltipLabelId = computed(() => {
      return props.disableKeyboardShortcuts ? "Polaris.IndexFilters.searchFilterTooltip" : "Polaris.IndexFilters.searchFilterTooltipWithShortcut";
    });
    const searchFilterTooltip = computed(() => {
      return props.filteringAccessibilityTooltip || i18n.translate(searchFilterTooltipLabelId.value);
    });
    const searchFilterAriaLabel = computed(() => {
      return props.filteringAccessibilityLabel || i18n.translate("Polaris.IndexFilters.searchFilterAccessibilityLabel");
    });
    const isLoading = computed(() => isActionLoading.value || props.loading);
    const enhancedPrimaryAction = computed(() => {
      if (!props.primaryAction)
        return void 0;
      return {
        ...props.primaryAction,
        onAction: onExecutedPrimaryAction
      };
    });
    const enhancedCancelAction = computed(() => {
      if (!props.cancelAction)
        return void 0;
      return {
        ...props.cancelAction,
        onAction: onExecutedCancelAction
      };
    });
    const viewNames = computed(() => props.tabs.map(({ content }) => content));
    const tabsWrapperClassName = computed(() => classNames(
      styles$X.TabsWrapper,
      breakpoints2.value.mdDown && styles$X.SmallScreenTabsWrapper,
      isLoading.value && styles$X.TabsWrapperLoading
    ));
    const indexFiltersClassName = computed(() => classNames(
      styles$X.IndexFilters,
      isSticky && styles$X.IndexFiltersSticky,
      isSticky && props.isFlushWhenSticky && styles$X.IndexFiltersStickyFlush
    ));
    const sortButtonEvents = computed(() => {
      var _a2, _b;
      let events = {
        onChange: (value) => emits("sort", value)
      };
      if ((_a2 = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a2.onSortKeyChange) {
        events = {
          ...events,
          onChangeKey: (key) => emits("sort-key-change", key)
        };
      }
      if ((_b = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _b.onSortDirectionChange) {
        events = {
          ...events,
          onChangeDirection: (direction) => emits("sort-direction-change", direction)
        };
      }
      return events;
    });
    const useExecutedCallback = (action, afterEffect) => {
      return async (name) => {
        if (!action)
          return;
        const executed = await (action == null ? void 0 : action(name));
        if (executed) {
          emits("set-mode", IndexFiltersMode.Default);
          afterEffect == null ? void 0 : afterEffect();
        }
      };
    };
    const onExecutedPrimaryAction = useExecutedCallback((_a = props.primaryAction) == null ? void 0 : _a.onAction);
    const onExecutedCancelAction = () => {
      var _a2;
      (_a2 = props.cancelAction) == null ? void 0 : _a2.onAction();
      emits("set-mode", IndexFiltersMode.Default);
    };
    const handleModeChange = (newMode) => {
      if (newMode === IndexFiltersMode.Filtering && props.autoFocusSearchField) {
        setFiltersFocused();
      } else {
        setFiltersUnFocused();
      }
    };
    useOnValueChange(props.mode, handleModeChange);
    useEventListener("keydown", (event) => {
      var _a2;
      if (props.disableKeyboardShortcuts)
        return;
      const { key } = event;
      const tag = (_a2 = document == null ? void 0 : document.activeElement) == null ? void 0 : _a2.tagName;
      if (props.mode !== IndexFiltersMode.Default && event.key === "Escape") {
        onPressEscape();
      }
      if (key === "f" && props.mode === IndexFiltersMode.Default) {
        if (tag && DEFAULT_IGNORED_TAGS.includes(tag)) {
          return;
        }
        onPressF();
        event.preventDefault();
      }
    });
    const beginEdit = (mode) => {
      emits("set-mode", mode);
      emits("edit-start", mode);
    };
    function handleClickEditColumnsButton() {
      beginEdit(IndexFiltersMode.EditingColumns);
    }
    function handleClickFilterButton() {
      beginEdit(IndexFiltersMode.Filtering);
    }
    function onPressEscape() {
      var _a2;
      (_a2 = props.cancelAction) == null ? void 0 : _a2.onAction();
      emits("set-mode", IndexFiltersMode.Default);
    }
    function handleChangeSearch(value) {
      emits("query-change", value);
    }
    function handleClearSearch() {
      emits("query-clear");
    }
    function handleQueryBlur() {
      setFiltersUnFocused();
    }
    function handleQueryFocus() {
      setFiltersFocused();
      emits("query-focus");
    }
    function onPressF() {
      if (props.mode !== IndexFiltersMode.Default) {
        return;
      }
      beginEdit(IndexFiltersMode.Filtering);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$X).IndexFiltersWrapper),
        style: normalizeStyle({ height: `${unref(indexFilteringHeight)}px` })
      }, [
        createBaseVNode("div", {
          ref_key: "intersectionRef",
          ref: intersectionRef
        }, null, 512),
        createBaseVNode("div", {
          ref_key: "measurerRef",
          ref: measurerRef,
          class: normalizeClass(indexFiltersClassName.value)
        }, [
          createBaseVNode("div", {
            ref_key: "defaultRef",
            ref: defaultRef
          }, [
            _ctx.mode !== unref(IndexFiltersMode).Filtering ? (openBlock(), createBlock(unref(_sfc_main$1I), { key: 0 }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$1r), {
                  align: "start",
                  "block-align": "center",
                  gap: { xs: "0", md: "200" },
                  wrap: false
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", {
                      class: normalizeClass(tabsWrapperClassName.value)
                    }, [
                      createBaseVNode("div", {
                        class: normalizeClass(unref(styles$X).TabsInner),
                        style: normalizeStyle({ ...defaultStyle, ...transitionStyles[unref(isSticky) ? "exited" : "entered"] })
                      }, [
                        createVNode(unref(_sfc_main$h), {
                          tabs: _ctx.tabs,
                          selected: _ctx.selected,
                          disabled: Boolean(_ctx.mode !== unref(IndexFiltersMode).Default || _ctx.disabled),
                          "can-create-new-view": _ctx.canCreateNewView,
                          onSelect: _cache[0] || (_cache[0] = ($event) => emits("select", $event)),
                          onCreateNewView: _cache[1] || (_cache[1] = ($event) => emits("create-new-view", $event))
                        }, null, 8, ["tabs", "selected", "disabled", "can-create-new-view"])
                      ], 6),
                      isLoading.value && unref(breakpoints2).mdDown ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(unref(styles$X).TabsLoading)
                      }, [
                        createVNode(unref(_sfc_main$r), { size: "small" })
                      ], 2)) : createCommentVNode("", true)
                    ], 2),
                    createBaseVNode("div", {
                      class: normalizeClass(unref(styles$X).ActionWrap)
                    }, [
                      isLoading.value && !unref(breakpoints2).mdDown ? (openBlock(), createElementBlock("div", {
                        key: 0,
                        class: normalizeClass(unref(styles$X).DesktopLoading)
                      }, [
                        createVNode(unref(_sfc_main$r), { size: "small" })
                      ], 2)) : createCommentVNode("", true),
                      _ctx.mode === unref(IndexFiltersMode).Default ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        !(_ctx.hideFilters && _ctx.hideQueryField) ? (openBlock(), createBlock(unref(_sfc_main$1H), {
                          key: 0,
                          label: searchFilterAriaLabel.value,
                          "tooltip-content": searchFilterTooltip.value,
                          disabled: _ctx.disabled,
                          "hide-query-field": _ctx.hideQueryField,
                          "hide-filters": _ctx.hideFilters,
                          style: normalizeStyle({ ...defaultStyle, ...transitionStyles[unref(isSticky) ? "exited" : "entered"] }),
                          onClick: handleClickFilterButton
                        }, null, 8, ["label", "tooltip-content", "disabled", "hide-query-field", "hide-filters", "style"])) : createCommentVNode("", true),
                        _ctx.showEditColumnsButton ? (openBlock(), createBlock(unref(_sfc_main$1G), {
                          key: 1,
                          disabled: _ctx.disabled,
                          onClick: handleClickEditColumnsButton
                        }, null, 8, ["disabled"])) : createCommentVNode("", true),
                        _ctx.sortOptions && _ctx.sortOptions.length ? (openBlock(), createBlock(unref(_sfc_main$1E), mergeProps({
                          key: 2,
                          choices: _ctx.sortOptions,
                          selected: _ctx.sortSelected || [""],
                          disabled: _ctx.disabled
                        }, sortButtonEvents.value), null, 16, ["choices", "selected", "disabled"])) : createCommentVNode("", true)
                      ], 64)) : createCommentVNode("", true),
                      _ctx.mode === unref(IndexFiltersMode).EditingColumns ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                        enhancedCancelAction.value || enhancedPrimaryAction.value ? (openBlock(), createBlock(unref(_sfc_main$1D), {
                          key: 0,
                          primaryAction: enhancedPrimaryAction.value,
                          cancelAction: enhancedCancelAction.value,
                          disabled: _ctx.disabled,
                          "view-names": viewNames.value
                        }, null, 8, ["primaryAction", "cancelAction", "disabled", "view-names"])) : createCommentVNode("", true)
                      ], 64)) : createCommentVNode("", true)
                    ], 2)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })) : createCommentVNode("", true)
          ], 512),
          createBaseVNode("div", {
            ref_key: "filteringRef",
            ref: filteringRef
          }, [
            _ctx.mode === unref(IndexFiltersMode).Filtering ? (openBlock(), createBlock(unref(_sfc_main$1U), {
              key: 0,
              "borderless-query-field": "",
              "close-on-child-overlay-click": _ctx.closeOnChildOverlayClick,
              "query-value": _ctx.queryValue,
              "query-placeholder": _ctx.queryPlaceholder,
              filters: _ctx.filters,
              "applied-filters": _ctx.appliedFilters,
              "hide-filters": _ctx.hideFilters,
              "hide-query-field": _ctx.hideQueryField,
              "disable-query-field": _ctx.disableQueryField,
              focused: unref(filtersFocused),
              loading: _ctx.loading || isActionLoading.value,
              "mounted-state": unref(breakpoints2).mdDown ? void 0 : "entered",
              onQueryChange: handleChangeSearch,
              onQueryClear: handleClearSearch,
              onQueryBlur: handleQueryBlur,
              onQueryFocus: handleQueryFocus,
              onAddFilterClick: _cache[2] || (_cache[2] = ($event) => emits("filter-click")),
              onClearAll: _cache[3] || (_cache[3] = ($event) => emits("clear-all"))
            }, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$X).ButtonWrap)
                }, [
                  createVNode(unref(_sfc_main$1r), {
                    gap: "200",
                    align: "start",
                    "block-align": "center"
                  }, {
                    default: withCtx(() => [
                      createBaseVNode("div", {
                        style: normalizeStyle({ ...defaultStyle, ...transitionStyles[unref(isSticky) ? "exited" : "entered"] })
                      }, [
                        enhancedCancelAction.value || enhancedPrimaryAction.value ? (openBlock(), createBlock(unref(_sfc_main$1D), {
                          key: 0,
                          primaryAction: enhancedPrimaryAction.value,
                          cancelAction: enhancedCancelAction.value,
                          disabled: _ctx.disabled,
                          "view-names": viewNames.value
                        }, null, 8, ["primaryAction", "cancelAction", "disabled", "view-names"])) : createCommentVNode("", true)
                      ], 4),
                      _ctx.sortOptions && _ctx.sortOptions.length ? (openBlock(), createBlock(unref(_sfc_main$1E), mergeProps({
                        key: 0,
                        choices: _ctx.sortOptions,
                        selected: _ctx.sortSelected || [""],
                        disabled: _ctx.disabled
                      }, sortButtonEvents.value), null, 16, ["choices", "selected", "disabled"])) : createCommentVNode("", true)
                    ]),
                    _: 1
                  })
                ], 2)
              ]),
              _: 1
            }, 8, ["close-on-child-overlay-click", "query-value", "query-placeholder", "filters", "applied-filters", "hide-filters", "hide-query-field", "disable-query-field", "focused", "loading", "mounted-state"])) : createCommentVNode("", true)
          ], 512)
        ], 2)
      ], 6);
    };
  }
});
const SELECT_ALL_ITEMS$2 = "All";
var SelectionType = /* @__PURE__ */ ((SelectionType2) => {
  SelectionType2["All"] = "all";
  SelectionType2["Page"] = "page";
  SelectionType2["Multi"] = "multi";
  SelectionType2["Single"] = "single";
  SelectionType2["Range"] = "range";
  return SelectionType2;
})(SelectionType || {});
const useIndexContext = () => {
  const context = inject("indexContext");
  if (!context) {
    throw new Error(`useIndexContext: Missing IndexProvider context`);
  }
  return context;
};
const useIndexSelectionChangeContext = () => {
  const context = inject("indexSelectionChangeContext");
  if (!context) {
    throw new Error(`Missing IndexProvider context`);
  }
  return context;
};
const useIndexRowContext = () => {
  const context = inject("indexRowContext");
  if (!context) {
    throw new Error(`Missing IndexProvider context`);
  }
  return context;
};
function useBulkSelectionData({
  selectedItemsCount,
  itemCount,
  hasMoreItems,
  resourceName: passedResourceName
}) {
  const i18n = useI18n();
  const selectable2 = computed(() => Boolean(selectedItemsCount));
  const selectMode = computed(() => selectedItemsCount.value === "All" || selectedItemsCount.value > 0);
  const defaultResourceName = {
    singular: i18n.translate("Polaris.IndexProvider.defaultItemSingular"),
    plural: i18n.translate("Polaris.IndexProvider.defaultItemPlural")
  };
  const resourceName = passedResourceName ? passedResourceName : defaultResourceName;
  const paginatedSelectAllText = computed(() => {
    if (!selectable2 || !hasMoreItems) {
      return;
    }
    if (selectedItemsCount.value === SELECT_ALL_ITEMS$2) {
      return i18n.translate("Polaris.IndexProvider.allItemsSelected", {
        itemsLength: itemCount.value,
        resourceNamePlural: resourceName.plural.toLocaleLowerCase()
      });
    }
    return;
  });
  const bulkActionsLabel = computed(() => {
    const selectedItemsCountLabel = selectedItemsCount.value === SELECT_ALL_ITEMS$2 ? `${itemCount.value}+` : selectedItemsCount.value;
    return i18n.translate("Polaris.IndexProvider.selected", {
      selectedItemsCount: selectedItemsCountLabel
    });
  });
  const bulkActionsAccessibilityLabel = computed(() => {
    const totalItemsCount = itemCount.value;
    const allSelected = selectedItemsCount.value === totalItemsCount;
    if (totalItemsCount === 1 && allSelected) {
      return i18n.translate(
        "Polaris.IndexProvider.a11yCheckboxDeselectAllSingle",
        {
          resourceNameSingular: resourceName.singular
        }
      );
    }
    if (totalItemsCount === 1) {
      return i18n.translate(
        "Polaris.IndexProvider.a11yCheckboxSelectAllSingle",
        {
          resourceNameSingular: resourceName.singular
        }
      );
    }
    if (allSelected) {
      return i18n.translate(
        "Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple",
        {
          itemsLength: itemCount.value,
          resourceNamePlural: resourceName.plural
        }
      );
    }
    return i18n.translate(
      "Polaris.IndexProvider.a11yCheckboxSelectAllMultiple",
      {
        itemsLength: itemCount.value,
        resourceNamePlural: resourceName.plural
      }
    );
  });
  const bulkSelectState = computed(() => {
    if (!selectedItemsCount.value || selectedItemsCount.value === 0) {
      return void 0;
    } else if (selectedItemsCount.value === SELECT_ALL_ITEMS$2 || selectedItemsCount.value === itemCount.value) {
      return true;
    }
    return "indeterminate";
  });
  return {
    paginatedSelectAllText,
    bulkActionsLabel,
    bulkActionsAccessibilityLabel,
    resourceName,
    selectMode,
    bulkSelectState,
    selectable: selectable2
  };
}
function useHandleBulkSelection({
  onSelectionChange = () => {
  }
}) {
  const lastSelected = ref(null);
  const handleSelectionChange = (selectionType, toggleType, selection, sortOrder) => {
    const prevSelected = lastSelected.value;
    if (typeof sortOrder === "number") {
      lastSelected.value = sortOrder;
    }
    if (selectionType === SelectionType.Single || selectionType === SelectionType.Multi && (typeof prevSelected !== "number" || typeof sortOrder !== "number")) {
      onSelectionChange(SelectionType.Single, toggleType, selection);
    } else if (selectionType === SelectionType.Multi) {
      const min = Math.min(prevSelected, sortOrder);
      const max = Math.max(prevSelected, sortOrder);
      onSelectionChange(selectionType, toggleType, [min, max]);
    } else if (selectionType === SelectionType.Page || selectionType === SelectionType.All) {
      onSelectionChange(selectionType, toggleType);
    } else if (selectionType === SelectionType.Range) {
      onSelectionChange(SelectionType.Range, toggleType, selection);
    }
  };
  return handleSelectionChange;
}
const _sfc_main$1B = /* @__PURE__ */ defineComponent({
  __name: "IndexProvider",
  props: {
    selectable: { type: Boolean, default: true },
    itemCount: {},
    selectedItemsCount: { default: 0 },
    resourceName: {},
    loading: { type: Boolean },
    hasMoreItems: { type: Boolean },
    condensed: { type: Boolean },
    onSelectionChange: {}
  },
  setup(__props) {
    const props = __props;
    const {
      paginatedSelectAllText,
      bulkActionsLabel,
      bulkActionsAccessibilityLabel,
      resourceName,
      selectMode,
      bulkSelectState
    } = useBulkSelectionData({
      selectedItemsCount: toRef(props, "selectedItemsCount"),
      itemCount: toRef(props, "itemCount"),
      hasMoreItems: toRef(props, "hasMoreItems"),
      resourceName: props.resourceName
    });
    const handleSelectionChange = useHandleBulkSelection({
      onSelectionChange: props.onSelectionChange
    });
    const selectModeRef = computed(() => selectMode.value && props.selectable);
    const contextValue = {
      itemCount: toRef(props, "itemCount"),
      selectMode: selectModeRef,
      selectable: toRef(props, "selectable"),
      resourceName,
      loading: toRef(props, "loading"),
      paginatedSelectAllText,
      hasMoreItems: toRef(props, "hasMoreItems"),
      bulkActionsLabel,
      bulkActionsAccessibilityLabel,
      bulkSelectState,
      selectedItemsCount: toRef(props, "selectedItemsCount"),
      condensed: toRef(props, "condensed")
    };
    provide("indexContext", contextValue);
    provide("indexRowContext", {
      selectable: toRef(props, "selectable"),
      selectMode: selectModeRef,
      condensed: toRef(props, "condensed")
    });
    provide("indexSelectionChangeContext", handleSelectionChange);
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default");
    };
  }
});
function getTableHeadingsBySelector(wrapperElement, selector) {
  return wrapperElement ? Array.from(wrapperElement.querySelectorAll(selector)) : [];
}
const IndexTable = "Polaris-IndexTable";
const IndexTableWrapper = "Polaris-IndexTable__IndexTableWrapper";
const IndexTableWrapperWithSelectAllActions = "Polaris-IndexTable__IndexTableWrapperWithSelectAllActions";
const LoadingPanel = "Polaris-IndexTable__LoadingPanel";
const LoadingPanelRow = "Polaris-IndexTable__LoadingPanelRow";
const LoadingPanelText = "Polaris-IndexTable__LoadingPanelText";
const Table = "Polaris-IndexTable__Table";
const TableCell = "Polaris-IndexTable__TableCell";
const TableRow = "Polaris-IndexTable__TableRow";
const toneSuccess$1 = "Polaris-IndexTable--toneSuccess";
const toneWarning = "Polaris-IndexTable--toneWarning";
const toneCritical$1 = "Polaris-IndexTable--toneCritical";
const toneSubdued = "Polaris-IndexTable--toneSubdued";
const ZebraStriping = "Polaris-IndexTable__ZebraStriping";
const TableHeading = "Polaris-IndexTable__TableHeading";
const TableHeadingSortButton = "Polaris-IndexTable__TableHeadingSortButton";
const TableHeadingSortIcon = "Polaris-IndexTable__TableHeadingSortIcon";
const TableHeadingUnderline = "Polaris-IndexTable__TableHeadingUnderline";
const TableHeadingTooltipUnderlinePlaceholder = "Polaris-IndexTable__TableHeadingTooltipUnderlinePlaceholder";
const TableHeadingSortSvg = "Polaris-IndexTable__TableHeadingSortSvg";
const SortableTableHeadingWithCustomMarkup = "Polaris-IndexTable__SortableTableHeadingWithCustomMarkup";
const SortableTableHeaderWrapper = "Polaris-IndexTable__SortableTableHeaderWrapper";
const ColumnHeaderCheckboxWrapper = "Polaris-IndexTable__ColumnHeaderCheckboxWrapper";
const FirstStickyHeaderElement = "Polaris-IndexTable__FirstStickyHeaderElement";
const StickyTable = "Polaris-IndexTable__StickyTable";
const StickyTableHeader = "Polaris-IndexTable__StickyTableHeader";
const StickyTableColumnHeader = "Polaris-IndexTable__StickyTableColumnHeader";
const StickyTableHeadings = "Polaris-IndexTable__StickyTableHeadings";
const unselectable = "Polaris-IndexTable--unselectable";
const ScrollLeft = "Polaris-IndexTable__ScrollLeft";
const ScrollRight = "Polaris-IndexTable__ScrollRight";
const SelectAllActionsWrapper$1 = "Polaris-IndexTable__SelectAllActionsWrapper";
const SelectAllActionsWrapperWithPagination = "Polaris-IndexTable__SelectAllActionsWrapperWithPagination";
const SelectAllActionsWrapperSticky$1 = "Polaris-IndexTable__SelectAllActionsWrapperSticky";
const SelectAllActionsWrapperAtEnd$1 = "Polaris-IndexTable__SelectAllActionsWrapperAtEnd";
const SelectAllActionsWrapperAtEndAppear$1 = "Polaris-IndexTable__SelectAllActionsWrapperAtEndAppear";
const BulkActionsWrapper$1 = "Polaris-IndexTable__BulkActionsWrapper";
const BulkActionsWrapperVisible$1 = "Polaris-IndexTable__BulkActionsWrapperVisible";
const PaginationWrapper$2 = "Polaris-IndexTable__PaginationWrapper";
const PaginationWrapperScrolledPastTop = "Polaris-IndexTable__PaginationWrapperScrolledPastTop";
const ScrollBarContainer = "Polaris-IndexTable__ScrollBarContainer";
const ScrollBarContainerWithPagination = "Polaris-IndexTable__ScrollBarContainerWithPagination";
const ScrollBarContainerScrolledPastTop = "Polaris-IndexTable__ScrollBarContainerScrolledPastTop";
const ScrollBarContainerWithSelectAllActions = "Polaris-IndexTable__ScrollBarContainerWithSelectAllActions";
const ScrollBarContainerSelectAllActionsSticky = "Polaris-IndexTable__ScrollBarContainerSelectAllActionsSticky";
const scrollBarContainerCondensed = "Polaris-IndexTable--scrollBarContainerCondensed";
const scrollBarContainerHidden = "Polaris-IndexTable--scrollBarContainerHidden";
const ScrollBar = "Polaris-IndexTable__ScrollBar";
const disableTextSelection$1 = "Polaris-IndexTable--disableTextSelection";
const EmptySearchResultWrapper$1 = "Polaris-IndexTable__EmptySearchResultWrapper";
const condensedRow = "Polaris-IndexTable--condensedRow";
const CondensedList = "Polaris-IndexTable__CondensedList";
const HeaderWrapper$1 = "Polaris-IndexTable__HeaderWrapper";
const ScrollBarContent = "Polaris-IndexTable__ScrollBarContent";
const styles$W = {
  IndexTable,
  IndexTableWrapper,
  "IndexTableWrapper-scrollBarHidden": "Polaris-IndexTable__IndexTableWrapper--scrollBarHidden",
  IndexTableWrapperWithSelectAllActions,
  "LoadingContainer-enter": "Polaris-IndexTable__LoadingContainer--enter",
  "LoadingContainer-enter-active": "Polaris-IndexTable--loadingContainerEnterActive",
  "LoadingContainer-exit": "Polaris-IndexTable__LoadingContainer--exit",
  "LoadingContainer-exit-active": "Polaris-IndexTable--loadingContainerExitActive",
  LoadingPanel,
  LoadingPanelRow,
  LoadingPanelText,
  Table,
  "Table-scrolling": "Polaris-IndexTable__Table--scrolling",
  "TableCell-first": "Polaris-IndexTable__TableCell--first",
  TableCell,
  "TableHeading-first": "Polaris-IndexTable__TableHeading--first",
  "TableHeading-second": "Polaris-IndexTable__TableHeading--second",
  "Table-sticky": "Polaris-IndexTable__Table--sticky",
  "Table-unselectable": "Polaris-IndexTable__Table--unselectable",
  TableRow,
  "TableRow-unclickable": "Polaris-IndexTable__TableRow--unclickable",
  toneSuccess: toneSuccess$1,
  "TableRow-child": "Polaris-IndexTable__TableRow--child",
  toneWarning,
  toneCritical: toneCritical$1,
  toneSubdued,
  "TableRow-subheader": "Polaris-IndexTable__TableRow--subheader",
  "TableRow-selected": "Polaris-IndexTable__TableRow--selected",
  "TableRow-hovered": "Polaris-IndexTable__TableRow--hovered",
  "TableRow-disabled": "Polaris-IndexTable__TableRow--disabled",
  ZebraStriping,
  TableHeading,
  "TableHeading-flush": "Polaris-IndexTable__TableHeading--flush",
  "TableHeading-align-center": "Polaris-IndexTable--tableHeadingAlignCenter",
  "TableHeading-align-end": "Polaris-IndexTable--tableHeadingAlignEnd",
  "TableHeading-extra-padding-right": "Polaris-IndexTable--tableHeadingExtraPaddingRight",
  "TableHeading-sortable": "Polaris-IndexTable__TableHeading--sortable",
  TableHeadingSortButton,
  TableHeadingSortIcon,
  "TableHeadingSortButton-heading-align-end": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEnd",
  "TableHeadingSortButton-heading-align-end-currently-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndCurrentlySorted",
  "TableHeadingSortIcon-heading-align-end": "Polaris-IndexTable--tableHeadingSortIconHeadingAlignEnd",
  "TableHeadingSortButton-heading-align-end-previously-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndPreviouslySorted",
  "right-aligned-sort-button-slide-out": "Polaris-IndexTable--rightAlignedSortButtonSlideOut",
  "reveal-right-aligned-sort-button-icon": "Polaris-IndexTable--revealRightAlignedSortButtonIcon",
  TableHeadingUnderline,
  TableHeadingTooltipUnderlinePlaceholder,
  "TableHeadingSortIcon-visible": "Polaris-IndexTable__TableHeadingSortIcon--visible",
  TableHeadingSortSvg,
  SortableTableHeadingWithCustomMarkup,
  SortableTableHeaderWrapper,
  ColumnHeaderCheckboxWrapper,
  FirstStickyHeaderElement,
  "TableHeading-unselectable": "Polaris-IndexTable__TableHeading--unselectable",
  "TableCell-flush": "Polaris-IndexTable__TableCell--flush",
  "Table-sticky-scrolling": "Polaris-IndexTable--tableStickyScrolling",
  "TableHeading-last": "Polaris-IndexTable__TableHeading--last",
  "Table-sticky-last": "Polaris-IndexTable--tableStickyLast",
  "Table-sortable": "Polaris-IndexTable__Table--sortable",
  StickyTable,
  StickyTableHeader,
  "StickyTableHeader-isSticky": "Polaris-IndexTable__StickyTableHeader--isSticky",
  StickyTableColumnHeader,
  StickyTableHeadings,
  "StickyTableHeading-second": "Polaris-IndexTable__StickyTableHeading--second",
  unselectable,
  "StickyTableHeading-second-scrolling": "Polaris-IndexTable--stickyTableHeadingSecondScrolling",
  ScrollLeft,
  ScrollRight,
  "ScrollRight-onboarding": "Polaris-IndexTable__ScrollRight--onboarding",
  SelectAllActionsWrapper: SelectAllActionsWrapper$1,
  SelectAllActionsWrapperWithPagination,
  SelectAllActionsWrapperSticky: SelectAllActionsWrapperSticky$1,
  SelectAllActionsWrapperAtEnd: SelectAllActionsWrapperAtEnd$1,
  SelectAllActionsWrapperAtEndAppear: SelectAllActionsWrapperAtEndAppear$1,
  BulkActionsWrapper: BulkActionsWrapper$1,
  BulkActionsWrapperVisible: BulkActionsWrapperVisible$1,
  PaginationWrapper: PaginationWrapper$2,
  PaginationWrapperScrolledPastTop,
  ScrollBarContainer,
  ScrollBarContainerWithPagination,
  ScrollBarContainerScrolledPastTop,
  ScrollBarContainerWithSelectAllActions,
  ScrollBarContainerSelectAllActionsSticky,
  scrollBarContainerCondensed,
  scrollBarContainerHidden,
  ScrollBar,
  disableTextSelection: disableTextSelection$1,
  EmptySearchResultWrapper: EmptySearchResultWrapper$1,
  condensedRow,
  CondensedList,
  HeaderWrapper: HeaderWrapper$1,
  "StickyTable-condensed": "Polaris-IndexTable__StickyTable--condensed",
  "StickyTableHeader-condensed": "Polaris-IndexTable__StickyTableHeader--condensed",
  ScrollBarContent
};
const _sfc_main$1A = /* @__PURE__ */ defineComponent({
  __name: "Cell",
  props: {
    as: { default: "td" },
    id: {},
    className: {},
    flush: { type: Boolean },
    colSpan: {},
    scope: {},
    headers: {}
  },
  setup(__props) {
    const props = __props;
    useSlots();
    const customClassName = computed(() => classNames(
      props.className,
      styles$W.TableCell,
      props.flush && styles$W["TableCell-flush"]
    ));
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        id: _ctx.id,
        class: normalizeClass(customClassName.value),
        colspan: _ctx.colSpan,
        scope: _ctx.scope,
        headers: _ctx.headers
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "class", "colspan", "scope", "headers"]);
    };
  }
});
function setRootProperty(name, value, node) {
  if (!document)
    return;
  const element = node || document.documentElement;
  element.style.setProperty(name, value);
}
function useRowContext() {
  const context = inject("rowContext", {});
  return context;
}
const scrollDefaultContext = {
  scrollableContainer: null,
  canScrollLeft: false,
  canScrollRight: false
};
const TableCellContentContainer = "Polaris-IndexTable-Checkbox__TableCellContentContainer";
const Wrapper$1 = "Polaris-IndexTable-Checkbox__Wrapper";
const styles$V = {
  TableCellContentContainer,
  Wrapper: Wrapper$1
};
const _sfc_main$1z = /* @__PURE__ */ defineComponent({
  __name: "Checkbox",
  props: {
    accessibilityLabel: {}
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const indexContext = useIndexContext();
    const { resourceName } = indexContext;
    const { itemId, selected: selected2, disabled: disabled2, position, onInteraction } = useRowContext();
    const checkboxNode = ref(null);
    const wrapperClassName = classNames(styles$V.Wrapper);
    const label = computed(() => props.accessibilityLabel || i18n.translate("Polaris.IndexTable.selectItem", {
      resourceName: resourceName == null ? void 0 : resourceName.singular
    }));
    const checkboxClassName = classNames(
      styles$W.TableCell,
      styles$W["TableCell-first"]
    );
    const handleResize = debounce(() => {
      if ((position == null ? void 0 : position.value) !== 0 || !checkboxNode.value)
        return;
      const { width: width2 } = checkboxNode.value.getBoundingClientRect();
      setRootProperty("--pc-checkbox-offset", `${width2}px`);
    });
    onMounted(() => {
      handleResize();
      if (!checkboxNode.value)
        return;
      window.addEventListener("resize", handleResize);
    });
    onBeforeUnmount(() => {
      window.removeEventListener("resize", handleResize);
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("td", {
        ref_key: "checkboxNode",
        ref: checkboxNode,
        class: normalizeClass(unref(checkboxClassName))
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$V).TableCellContentContainer)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(wrapperClassName)),
            onClick: _cache[0] || (_cache[0] = //@ts-ignore
            (...args) => unref(onInteraction) && unref(onInteraction)(...args)),
            onKeyup: () => {
            }
          }, [
            createVNode(unref(_sfc_main$2l), {
              id: `Select-${unref(itemId)}`,
              "label-hidden": "",
              checked: unref(selected2),
              disabled: unref(disabled2)
            }, {
              label: withCtx(() => [
                createTextVNode(toDisplayString(label.value), 1)
              ]),
              _: 1
            }, 8, ["id", "checked", "disabled"])
          ], 34)
        ], 2)
      ], 2);
    };
  }
});
const _sfc_main$1y = /* @__PURE__ */ defineComponent({
  __name: "Row",
  props: {
    id: {},
    selected: { type: [Boolean, String] },
    position: {},
    tone: {},
    disabled: { type: Boolean },
    selectionRange: {},
    rowType: { default: "data" },
    accessibilityLabel: {}
  },
  emits: ["navigation", "click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    useSlots();
    const emits = __emit;
    const { selectable: selectable2, selectMode, condensed: condensed2 } = useIndexRowContext();
    const onSelectionChange = useIndexSelectionChangeContext();
    const {
      value: hovered,
      setTrue: setHoverIn,
      setFalse: setHoverOut
    } = useToggle(false);
    const primaryLinkElement = ref(null);
    const isNavigating = ref(false);
    const tableRowRef = ref(null);
    const rowClassName = computed(() => classNames(
      styles$W.TableRow,
      props.rowType === "subheader" && styles$W["TableRow-subheader"],
      props.rowType === "child" && styles$W["TableRow-child"],
      selectable2.value && (condensed2 == null ? void 0 : condensed2.value) && styles$W.condensedRow,
      props.selected && styles$W["TableRow-selected"],
      hovered.value && !(condensed2 == null ? void 0 : condensed2.value) && styles$W["TableRow-hovered"],
      props.disabled && styles$W["TableRow-disabled"],
      props.tone && styles$W[variationName("tone", props.tone)],
      !selectable2.value && !primaryLinkElement.value && styles$W["TableRow-unclickable"]
    ));
    const handleInteraction = (event) => {
      event.stopPropagation();
      let selectionType = SelectionType.Single;
      if ("key" in event && event.key !== " " || !onSelectionChange)
        return;
      if (event.shiftKey) {
        selectionType = SelectionType.Multi;
      } else if (props.selectionRange) {
        selectionType = SelectionType.Range;
      }
      const selection = props.selectionRange ?? props.id;
      onSelectionChange(selectionType, !props.selected, selection, props.position);
    };
    const handleRowClick = (event) => {
      if ((props.disabled || !selectable2.value) && !primaryLinkElement.value) {
        return;
      }
      if (props.rowType === "subheader") {
        return;
      }
      if (!tableRowRef.value || isNavigating.value) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      emits("click");
      if (primaryLinkElement.value && !selectMode.value) {
        isNavigating.value = true;
        const { ctrlKey, metaKey } = event;
        emits("navigation", props.id);
        if ((ctrlKey || metaKey) && primaryLinkElement.value instanceof HTMLAnchorElement) {
          isNavigating.value = false;
          window.open(primaryLinkElement.value.href, "_blank");
          return;
        }
        primaryLinkElement.value.dispatchEvent(
          new MouseEvent(event.type, event)
        );
      } else {
        isNavigating.value = false;
        handleInteraction(event);
      }
    };
    onMounted(() => {
      var _a;
      const el = (_a = tableRowRef.value) == null ? void 0 : _a.querySelector("[data-primary-link]");
      if (el) {
        primaryLinkElement.value = el;
      }
    });
    const contextValue = {
      itemId: toRef(props, "id"),
      selected: toRef(props, "selected"),
      disabled: toRef(props, "disabled"),
      position: toRef(props, "position"),
      onInteraction: handleInteraction
    };
    provide("rowContext", contextValue);
    provide("rowHoveredContext", hovered);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(condensed2) ? "li" : "tr"), {
        key: _ctx.id,
        id: _ctx.id,
        class: normalizeClass(rowClassName.value),
        ref_key: "tableRowRef",
        ref: tableRowRef,
        onClick: handleRowClick,
        onMouseenter: unref(setHoverIn),
        onMouseleave: unref(setHoverOut)
      }, {
        default: withCtx(() => [
          unref(selectable2) ? (openBlock(), createBlock(unref(_sfc_main$1z), {
            key: 0,
            accessibilityLabel: _ctx.accessibilityLabel
          }, null, 8, ["accessibilityLabel"])) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 40, ["id", "class", "onMouseenter", "onMouseleave"]);
    };
  }
});
const ScrollContainer = "Polaris-IndexTable-ScrollContainer";
const styles$U = {
  ScrollContainer
};
const _sfc_main$1x = /* @__PURE__ */ defineComponent({
  __name: "ScrollContainer",
  emits: ["scroll"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const emits = __emit;
    const scrollableContainerRef = ref(null);
    const containerScroll = ref(scrollDefaultContext);
    onMounted(() => {
      if (scrollableContainerRef.value) {
        scrollableContainerRef.value.dispatchEvent(new Event("scroll"));
      }
    });
    const handleScroll = debounce(
      () => {
        if (!scrollableContainerRef.value) {
          return;
        }
        const availableScrollAmount = scrollableContainerRef.value.scrollWidth - scrollableContainerRef.value.offsetWidth;
        const canScrollLeft = scrollableContainerRef.value.scrollLeft > 0;
        const canScrollRight = scrollableContainerRef.value.scrollLeft < availableScrollAmount;
        emits("scroll", canScrollLeft, canScrollRight);
        containerScroll.value = {
          scrollableContainer: scrollableContainerRef.value,
          canScrollLeft,
          canScrollRight
        };
      },
      40,
      { trailing: true, leading: true, maxWait: 40 }
    );
    provide("scrollContext", containerScroll);
    __expose({ scrollableContainerRef });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "scrollableContainerRef",
        ref: scrollableContainerRef,
        class: normalizeClass(unref(styles$U).ScrollContainer),
        onScroll: _cache[0] || (_cache[0] = //@ts-ignore
        (...args) => unref(handleScroll) && unref(handleScroll)(...args))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 34);
    };
  }
});
const _hoisted_1$D = ["data-selectmode"];
const SCROLL_BAR_PADDING = 4;
const SCROLL_BAR_DEBOUNCE_PERIOD = 300;
const _sfc_main$1w = /* @__PURE__ */ defineComponent({
  __name: "IndexTableBase",
  props: {
    headings: {},
    promotedBulkActions: { default: () => [] },
    bulkActions: { default: () => [] },
    paginatedSelectAllActionText: {},
    lastColumnSticky: { type: Boolean, default: false },
    selectable: { type: Boolean },
    sortable: {},
    defaultSortDirection: { default: "descending" },
    sortDirection: {},
    sortColumnIndex: {},
    sortToggleLabels: {},
    hasZebraStriping: { type: Boolean },
    pagination: {}
  },
  emits: ["sort"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const theme = useTheme();
    const { hasSlot } = useHasSlot();
    const {
      loading: loading2,
      bulkSelectState,
      resourceName: contextResourceName,
      bulkActionsAccessibilityLabel,
      selectMode,
      selectable: selectable2 = toRef(props, "selectable"),
      paginatedSelectAllText,
      itemCount,
      hasMoreItems,
      selectedItemsCount,
      condensed: condensed2
    } = useIndexContext();
    const handleSelectionChange = useIndexSelectionChangeContext();
    const {
      value: hasMoreLeftColumns,
      toggle: toggleHasMoreLeftColumns
    } = useToggle(false);
    const tablePosition = ref({ top: 0, left: 0 });
    const tableHeadingRects = ref([]);
    const scrollableContainerElement = ref(null);
    const scrollableContainerElementRef = ref(null);
    const tableElement = ref(null);
    const tableBodyElement = ref(null);
    const condensedListElement = ref(null);
    const loadingElement = ref(null);
    const tableInitialized = ref(false);
    const stickyWrapper = ref(null);
    const hideScrollContainer = ref(false);
    const canFitStickyColumn = ref(true);
    const tableHeadings = ref([]);
    const stickyTableHeadings = ref([]);
    const stickyHeaderWrapperElement = ref(null);
    const firstStickyHeaderElement = ref(null);
    const stickyHeaderElement = ref(null);
    const scrollBarElement = ref(null);
    const scrollContainerElement = ref(null);
    const scrollingWithBar = ref(false);
    const scrollingContainer = ref(false);
    const canScrollRight = ref(true);
    const isMounted = ref(false);
    const lastSortedColumnIndex = ref(props.sortColumnIndex);
    const renderAfterSelectEvent = ref(false);
    const lastSelectedItemsCount = ref(0);
    const hasSelected = ref(false);
    const hasBulkActions2 = computed(() => Boolean(
      props.promotedBulkActions && props.promotedBulkActions.length > 0 || props.bulkActions && props.bulkActions.length > 0
    ));
    const selectedItemsCountValue = computed(() => {
      if (selectedItemsCount.value === SELECT_ALL_ITEMS$2 || selectedItemsCount.value > 0) {
        return selectedItemsCount.value === SELECT_ALL_ITEMS$2 ? `${itemCount.value}+` : selectedItemsCount.value;
      }
    });
    const selectAllActionsLabel = computed(() => i18n.translate("Polaris.IndexTable.selected", {
      selectedItemsCount: `${selectedItemsCountValue.value}`
    }));
    const stickyColumnHeaderStyle = computed(() => tableHeadingRects.value && tableHeadingRects.value.length > 0 ? { minWidth: `${calculateFirstHeaderOffset.value}px` } : void 0);
    const paginatedSelectAllAction = computed(() => {
      if (!(selectable2 == null ? void 0 : selectable2.value) || !hasBulkActions2.value || !(hasMoreItems == null ? void 0 : hasMoreItems.value)) {
        return;
      }
      const customActionText = props.paginatedSelectAllActionText ?? i18n.translate("Polaris.IndexTable.selectAllItems", {
        itemsLength: itemCount.value,
        resourceNamePlural: contextResourceName.plural.toLocaleLowerCase()
      });
      const actionText = selectedItemsCount.value === SELECT_ALL_ITEMS$2 ? i18n.translate("Polaris.IndexTable.undo") : customActionText;
      return {
        content: actionText,
        onAction: handleSelectAllItemsInStore
      };
    });
    const stickyTableClassNames = computed(() => classNames(
      styles$W.StickyTable,
      (condensed2 == null ? void 0 : condensed2.value) && styles$W["StickyTable-condensed"]
    ));
    const scrollBarWrapperClassNames = computed(() => classNames(
      styles$W.ScrollBarContainer,
      props.pagination && styles$W.ScrollBarContainerWithPagination,
      (condensed2 == null ? void 0 : condensed2.value) && styles$W.scrollBarContainerCondensed,
      hideScrollContainer.value && styles$W.scrollBarContainerHidden
    ));
    const scrollBarClassNames = computed(() => classNames(
      tableElement.value && tableInitialized.value && styles$W.ScrollBarContent
    ));
    const shouldShowActions = computed(
      () => !(condensed2 == null ? void 0 : condensed2.value) || selectedItemsCount.value
    );
    const promotedActions = computed(
      () => shouldShowActions.value ? props.promotedBulkActions : []
    );
    const actions = computed(() => shouldShowActions.value ? props.bulkActions : []);
    const calculateFirstHeaderOffset = computed(() => {
      if (!selectable2.value) {
        return tableHeadingRects.value[0].offsetWidth;
      }
      return (condensed2 == null ? void 0 : condensed2.value) ? tableHeadingRects.value[0].offsetWidth : tableHeadingRects.value[0].offsetWidth + tableHeadingRects.value[1].offsetWidth;
    });
    const headerWrapperClassNames = computed(() => classNames(
      styles$W.HeaderWrapper,
      (!selectable2.value || (condensed2 == null ? void 0 : condensed2.value)) && styles$W.unselectable
    ));
    const stickyColumnHeaderClassNames = computed(() => classNames(
      styles$W.TableHeading,
      selectable2.value && styles$W["TableHeading-first"],
      props.headings[0].flush && styles$W["TableHeading-flush"]
    ));
    const stickyHeaderClassNames = computed(() => classNames(
      styles$W.StickyTableHeader,
      isSticky.value && styles$W["StickyTableHeader-isSticky"]
    ));
    const condensedClassNames = computed(() => classNames(
      styles$W.CondensedList,
      props.hasZebraStriping && styles$W.ZebraStriping
    ));
    const isSortable = computed(() => {
      var _a;
      return (_a = props.sortable) == null ? void 0 : _a.some((v) => v);
    });
    const tableClassNames = computed(() => classNames(
      styles$W.Table,
      hasMoreLeftColumns.value && styles$W["Table-scrolling"],
      selectMode.value && styles$W.disableTextSelection,
      !selectable2.value && styles$W["Table-unselectable"],
      canFitStickyColumn.value && styles$W["Table-sticky"],
      isSortable.value && styles$W["Table-sortable"],
      canFitStickyColumn.value && props.lastColumnSticky && styles$W["Table-sticky-last"],
      canFitStickyColumn.value && props.lastColumnSticky && canScrollRight.value && styles$W["Table-sticky-scrolling"],
      props.hasZebraStriping && styles$W.ZebraStriping
    ));
    const bulkActionsClassName = computed(() => classNames(
      styles$W.BulkActionsWrapper,
      selectMode.value && styles$W.BulkActionsWrapperVisible,
      (condensed2 == null ? void 0 : condensed2.value) && styles$W["StickyTableHeader-condensed"],
      isSticky.value && styles$W["StickyTableHeader-isSticky"]
    ));
    const isSticky = ref(false);
    const onStickyChange = (value) => {
      isSticky.value = value;
    };
    const resizeTableHeadings = debounce(() => {
      if (!tableElement.value || !scrollableContainerElement.value) {
        return;
      }
      const boundingRect = scrollableContainerElement.value.getBoundingClientRect();
      tablePosition.value = {
        top: boundingRect.top,
        left: boundingRect.left
      };
      tableHeadingRects.value = tableHeadings.value.map((heading) => ({
        offsetWidth: heading.offsetWidth || 0,
        offsetLeft: heading.offsetLeft || 0
      }));
      if (tableHeadings.value.length === 0) {
        return;
      }
      if ((selectable2 == null ? void 0 : selectable2.value) && tableHeadings.value.length > 1) {
        tableHeadings.value[1].style.left = `${tableHeadingRects.value[0].offsetWidth}px`;
      }
      stickyTableHeadings.value.forEach((heading, index) => {
        var _a, _b;
        let minWidth = 0;
        if (index === 0 && (!isBreakpointsXS() || !(selectable2 == null ? void 0 : selectable2.value))) {
          minWidth = calculateFirstHeaderOffset.value;
        } else if ((selectable2 == null ? void 0 : selectable2.value) && tableHeadingRects.value.length > index) {
          minWidth = ((_a = tableHeadingRects.value[index]) == null ? void 0 : _a.offsetWidth) || 0;
        } else if (!(selectable2 == null ? void 0 : selectable2.value) && tableHeadingRects.value.length >= index) {
          minWidth = ((_b = tableHeadingRects.value[index - 1]) == null ? void 0 : _b.offsetWidth) || 0;
        }
        heading.style.minWidth = `${minWidth}px`;
      });
    });
    onMounted(() => {
      isMounted.value = true;
      handleCanScrollRight();
      if (selectedItemsCount.value !== lastSelectedItemsCount.value) {
        renderAfterSelectEvent.value = true;
        lastSelectedItemsCount.value = selectedItemsCount.value;
      }
      if (!hasSelected.value && selectedItemsCount.value !== 0) {
        hasSelected.value = true;
      }
      if (scrollableContainerElementRef.value) {
        const { scrollableContainerRef } = scrollableContainerElementRef.value;
        scrollableContainerElement.value = scrollableContainerRef;
      }
      triggerResizeTableHeadings();
      triggerResizeTableScrollBar();
    });
    watch(
      () => [props.headings, firstStickyHeaderElement.value, tableInitialized.value],
      triggerResizeTableHeadings
    );
    watch(
      () => [tableInitialized.value, condensed2 == null ? void 0 : condensed2.value],
      triggerResizeTableScrollBar
    );
    watch(
      () => tableInitialized.value,
      () => {
        if (tableInitialized.value) {
          handleCanFitStickyColumn();
        }
      }
    );
    const tableBodyRef = (node) => {
      if (node !== null && !tableInitialized.value) {
        tableInitialized.value = true;
      }
      tableBodyElement.value = node;
    };
    const handleSelectAllItemsInStore = () => {
      handleSelectionChange(
        selectedItemsCount.value === SELECT_ALL_ITEMS$2 ? SelectionType.Page : SelectionType.All,
        true
      );
    };
    const debounceResizeTableScrollbar = () => debounce(
      resizeTableScrollBar,
      SCROLL_BAR_DEBOUNCE_PERIOD,
      {
        trailing: true
      }
    );
    const handleCanScrollRight = debounce(() => {
      if (!props.lastColumnSticky || !tableElement.value || !scrollableContainerElement.value) {
        return;
      }
      const tableRect = tableElement.value.getBoundingClientRect();
      const scrollableRect = scrollableContainerElement.value.getBoundingClientRect();
      canScrollRight.value = tableRect.width > scrollableRect.width;
    });
    const handleCanFitStickyColumn = () => {
      var _a;
      if (!scrollableContainerElement.value || !tableHeadings.value.length) {
        return;
      }
      const scrollableRect = (_a = scrollableContainerElement.value) == null ? void 0 : _a.getBoundingClientRect();
      const checkboxColumnWidth = selectable2.value ? tableHeadings.value[0].getBoundingClientRect().width : 0;
      const firstStickyColumnWidth = tableHeadings.value[selectable2.value ? 1 : 0].getBoundingClientRect().width;
      const lastColumnIsNotTheFirst = selectable2.value ? tableHeadings.value.length > 2 : 1;
      const lastStickyColumnWidth = props.lastColumnSticky && lastColumnIsNotTheFirst ? tableHeadings.value[tableHeadings.value.length - 1].getBoundingClientRect().width : 0;
      const restOfContentMinWidth = 100;
      canFitStickyColumn.value = ((scrollableRect == null ? void 0 : scrollableRect.width) || 0) > firstStickyColumnWidth + checkboxColumnWidth + lastStickyColumnWidth + restOfContentMinWidth;
    };
    const handleResize = () => {
      var _a;
      (_a = scrollBarElement.value) == null ? void 0 : _a.style.setProperty(
        "--pc-index-table-scroll-bar-content-width",
        `0px`
      );
      resizeTableHeadings();
      debounceResizeTableScrollbar();
      handleCanScrollRight();
      handleCanFitStickyColumn();
    };
    const handleScrollContainerScroll = (tmpCanScrollLeft, tmpCanScrollRight) => {
      if (!scrollableContainerElement.value || !scrollBarElement.value) {
        return;
      }
      if (!scrollingWithBar.value) {
        scrollingContainer.value = true;
        scrollBarElement.value.scrollLeft = scrollableContainerElement.value.scrollLeft;
      }
      scrollingWithBar.value = false;
      if (stickyHeaderElement.value) {
        stickyHeaderElement.value.scrollLeft = scrollableContainerElement.value.scrollLeft;
      }
      if (tmpCanScrollLeft && !hasMoreLeftColumns.value || !tmpCanScrollLeft && hasMoreLeftColumns.value) {
        toggleHasMoreLeftColumns();
      }
      canScrollRight.value = tmpCanScrollRight;
    };
    const handleScrollBarScroll = () => {
      if (!scrollableContainerElement.value || !scrollBarElement.value) {
        return;
      }
      if (!scrollingContainer.value) {
        scrollingWithBar.value = true;
        scrollableContainerElement.value.scrollLeft = scrollBarElement.value.scrollLeft;
      }
      scrollingContainer.value = false;
    };
    const handleTogglePage = () => {
      handleSelectionChange(
        SelectionType.Page,
        Boolean(!(bulkSelectState == null ? void 0 : bulkSelectState.value) || (bulkSelectState == null ? void 0 : bulkSelectState.value) === "indeterminate")
      );
    };
    const getHeadingKey = (heading) => {
      if (heading.id) {
        return heading.id;
      }
      if (typeof heading.title === "string") {
        return heading.title;
      }
      return "";
    };
    function triggerResizeTableHeadings() {
      tableHeadings.value = getTableHeadingsBySelector(
        tableElement.value,
        "[data-index-table-heading]"
      );
      stickyTableHeadings.value = getTableHeadingsBySelector(
        stickyHeaderWrapperElement.value,
        "[data-index-table-sticky-heading]"
      );
      resizeTableHeadings();
    }
    function resizeTableScrollBar() {
      var _a, _b;
      if (scrollBarElement.value && tableElement.value && tableInitialized.value) {
        scrollBarElement.value.style.setProperty(
          "--pc-index-table-scroll-bar-content-width",
          `${tableElement.value.offsetWidth - SCROLL_BAR_PADDING}px`
        );
        hideScrollContainer.value = ((_a = scrollContainerElement.value) == null ? void 0 : _a.offsetWidth) === ((_b = tableElement.value) == null ? void 0 : _b.offsetWidth);
      }
    }
    function triggerResizeTableScrollBar() {
      resizeTableScrollBar();
      stickyWrapper.value = (condensed2 == null ? void 0 : condensed2.value) ? condensedListElement.value : tableElement.value;
    }
    function isBreakpointsXS() {
      return typeof window === "undefined" ? false : window.innerWidth < parseFloat(toPx(themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    }
    function handleSelectModeToggle() {
      handleSelectionChange(SelectionType.All, false);
    }
    function handleSelectPage(checked2) {
      handleSelectionChange(SelectionType.Page, checked2);
    }
    function handleSortHeadingClick(index, direction) {
      renderAfterSelectEvent.value = false;
      hasSelected.value = false;
      lastSortedColumnIndex.value = props.sortColumnIndex;
      emits("sort", index, direction);
    }
    function stickyColumnHeader() {
      return h(
        "div",
        {
          class: stickyColumnHeaderClassNames.value,
          key: getHeadingKey(props.headings[0]),
          style: stickyColumnHeaderStyle.value,
          "data-index-table-sticky-heading": true
        },
        h(
          _sfc_main$1e,
          {
            spacing: "none",
            wrap: false,
            alignment: "center"
          },
          () => [
            selectable2.value && h(
              "div",
              { class: styles$W.FirstStickyHeaderElement, ref: firstStickyHeaderElement },
              renderCheckboxContent()
            ),
            selectable2.value && h(
              "div",
              { class: styles$W["StickyTableHeading-second-scrolling"] },
              renderHeadingContent(props.headings[0], 0)
            )
          ]
        )
      );
    }
    const loadingMarkup = computed(() => {
      return h(
        Transition,
        {
          name: "custom-indextable-loading-transition",
          appear: true,
          onBeforeEnter: onTransitionBeforeEnter,
          onEnter: onTransitionEnter,
          onAfterEnter: onTransitionAfterEnter,
          onBeforeLeave: onTransitionBeforeLeave,
          onLeave: onTransitionLeave,
          onAfterLeave: onTransitionAfterLeave
        },
        () => (loading2 == null ? void 0 : loading2.value) && h(
          "div",
          {
            class: styles$W.LoadingPanel,
            ref: loadingElement
          },
          h(
            "div",
            { class: styles$W.LoadingPanelRow },
            [
              h(_sfc_main$r, { size: "small" }),
              h(
                "span",
                { class: styles$W.LoadingPanelText },
                i18n.translate("Polaris.IndexTable.resourceLoadingAccessibilityLabel", {
                  resourceNamePlural: contextResourceName.plural.toLocaleLowerCase()
                })
              )
            ]
          )
        )
      );
    });
    const bulkActionsMarkup = computed(() => shouldShowActions.value && !(condensed2 == null ? void 0 : condensed2.value) ? h(
      "div",
      { class: bulkActionsClassName.value },
      [
        h(
          _sfc_main$2w,
          {
            selectMode: selectMode.value,
            paginatedSelectAllText: paginatedSelectAllText == null ? void 0 : paginatedSelectAllText.value,
            paginatedSelectAllAction: paginatedSelectAllAction.value,
            accessibilityLabel: bulkActionsAccessibilityLabel == null ? void 0 : bulkActionsAccessibilityLabel.value,
            selected: bulkSelectState == null ? void 0 : bulkSelectState.value,
            promotedActions: promotedActions.value,
            actions: actions.value,
            label: selectAllActionsLabel.value,
            buttonSize: "micro",
            onToggleAll: handleTogglePage,
            onSelectModeToggle: (condensed2 == null ? void 0 : condensed2.value) && handleSelectModeToggle
          }
        ),
        loadingMarkup.value
      ]
    ) : null);
    const renderHeading = (heading, index) => {
      var _a;
      const isSecond = index === 0;
      const isLast = index === props.headings.length - 1;
      const hasSortable = (_a = props.sortable) == null ? void 0 : _a.some((value) => value === true);
      const headingAlignment = heading.alignment || "start";
      const headingContentClassName = classNames(
        styles$W.TableHeading,
        headingAlignment === "center" && styles$W["TableHeading-align-center"],
        headingAlignment === "end" && styles$W["TableHeading-align-end"],
        hasSortable && styles$W["TableHeading-sortable"],
        isSecond && styles$W["TableHeading-second"],
        isLast && !heading.hidden && styles$W["TableHeading-last"],
        !selectable2.value && styles$W["TableHeading-unselectable"],
        heading.flush && styles$W["TableHeading-flush"]
      );
      const stickyPositioningStyle = selectable2.value !== false && isSecond && tableHeadingRects.value && tableHeadingRects.value.length > 0 ? { left: `${tableHeadingRects.value[0].offsetWidth}px` } : void 0;
      const headingContent = h(
        "th",
        {
          id: heading.id,
          class: headingContentClassName,
          key: getHeadingKey(heading),
          style: stickyPositioningStyle,
          "data-index-table-heading": true
        },
        renderHeadingContent(heading, index)
      );
      if (index !== 0 || !selectable2.value) {
        return [headingContent];
      }
      const checkboxClassName = classNames(
        styles$W.TableHeading,
        hasSortable && styles$W["TableHeading-sortable"],
        index === 0 && styles$W["TableHeading-first"]
      );
      const checkboxContent = h(
        "th",
        {
          class: checkboxClassName,
          key: `${heading}-${index}`,
          "data-index-table-heading": true
        },
        renderCheckboxContent()
      );
      return [checkboxContent, headingContent];
    };
    function renderCheckboxContent() {
      return h(
        "div",
        { class: styles$W.ColumnHeaderCheckboxWrapper },
        h(
          _sfc_main$2l,
          {
            label: i18n.translate("Polaris.IndexTable.selectAllLabel", {
              resourceNamePlural: contextResourceName.plural
            }),
            labelHidden: true,
            checked: bulkSelectState == null ? void 0 : bulkSelectState.value,
            onChange: handleSelectPage
          }
        )
      );
    }
    function renderHeadingContent(heading, index) {
      var _a;
      let headingContent;
      const defaultTooltipProps = {
        width: heading.tooltipWidth ?? "default",
        activatorWrapper: "div",
        dismissOnMouseOut: true,
        persistOnClick: heading.tooltipPersistsOnClick
      };
      const defaultHeaderTooltipProps = {
        ...defaultTooltipProps,
        padding: "400",
        borderRadius: "200",
        preferredPosition: "above"
      };
      if (heading.new) {
        headingContent = h(
          _sfc_main$1e,
          { wrap: false, alignment: "center" },
          () => [
            h("span", () => heading.title),
            h(_sfc_main$2J, { tone: "new" }, i18n.translate("Polaris.IndexTable.onboardingBadgeText"))
          ]
        );
      } else if (heading.hidden) {
        headingContent = h(
          _sfc_main$f,
          { as: "span", visuallyHidden: true },
          () => heading.title
        );
      } else {
        headingContent = heading.title;
      }
      const style = {
        "--pc-index-table-heading-extra-padding-right": heading.paddingBlockEnd ? `var(--p-space-${heading.paddingBlockEnd})` : "0"
      };
      if ((_a = props.sortable) == null ? void 0 : _a[index]) {
        const isCurrentlySorted = index === props.sortColumnIndex;
        const isPreviouslySorted = !isCurrentlySorted && index === lastSortedColumnIndex.value;
        const isRenderAfterSelectEvent = renderAfterSelectEvent.value || !hasSelected.value && selectedItemsCount.value !== 0;
        const isAscending = props.sortDirection === "ascending";
        let newDirection = heading.defaultSortDirection ?? props.defaultSortDirection;
        let SourceComponent = newDirection === "ascending" ? SortAscendingIcon : SortDescendingIcon;
        if (isCurrentlySorted) {
          newDirection = isAscending ? "descending" : "ascending";
          SourceComponent = props.sortDirection === "ascending" ? SortAscendingIcon : SortDescendingIcon;
        }
        const iconMarkup = h(
          "span",
          {
            class: classNames(
              styles$W.TableHeadingSortIcon,
              (heading == null ? void 0 : heading.alignment) === "end" && styles$W["TableHeadingSortIcon-heading-align-end"],
              isCurrentlySorted && styles$W["TableHeadingSortIcon-visible"]
            )
          },
          () => h(SourceComponent, { className: styles$W.TableHeadingSortSvg, ariaHidden: true, focusable: false })
        );
        const defaultSortButtonProps = {
          onClick: () => handleSortHeadingClick(index, newDirection),
          class: classNames(
            styles$W.TableHeadingSortButton,
            !isCurrentlySorted && (heading == null ? void 0 : heading.alignment) === "end" && styles$W["TableHeadingSortButton-heading-align-end"],
            isCurrentlySorted && (heading == null ? void 0 : heading.alignment) === "end" && styles$W["TableHeadingSortButton-heading-align-end-currently-sorted"],
            isPreviouslySorted && !isRenderAfterSelectEvent && (heading == null ? void 0 : heading.alignment) === "end" && styles$W["TableHeadingSortButton-heading-align-end-previously-sorted"]
          ),
          tabIndex: selectMode.value ? -1 : 0
        };
        const sortMarkup = h(
          _sfc_main$2u,
          defaultSortButtonProps,
          () => [
            iconMarkup,
            h(
              "span",
              {
                class: classNames(
                  props.sortToggleLabels && selectMode.value && heading.tooltipContent && styles$W.TableHeadingTooltipUnderlinePlaceholder
                )
              },
              () => headingContent
            )
          ]
        );
        if (!props.sortToggleLabels || selectMode.value) {
          return h(
            "div",
            { class: styles$W.SortableTableHeadingWithCustomMarkup },
            () => sortMarkup
          );
        }
        const tooltipDirection = isCurrentlySorted ? props.sortDirection : newDirection;
        const sortTooltipContent = props.sortToggleLabels[index][tooltipDirection];
        if (!heading.tooltipContent) {
          return h(
            "div",
            {
              style,
              class: classNames(
                heading.paddingBlockEnd && styles$W["TableHeading-extra-padding-right"]
              )
            },
            h(
              _sfc_main$4,
              {
                ...defaultTooltipProps,
                preferredPosition: "above"
              },
              {
                content: () => sortTooltipContent,
                default: () => sortMarkup
              }
            )
          );
        }
        if (heading.tooltipContent) {
          return h(
            "div",
            {
              style,
              class: classNames(
                styles$W.SortableTableHeadingWithCustomMarkup,
                heading.paddingBlockEnd && styles$W["TableHeading-extra-padding-right"]
              )
            },
            h(
              _sfc_main$2u,
              { ...defaultSortButtonProps },
              () => [
                h(
                  _sfc_main$4,
                  { ...defaultHeaderTooltipProps },
                  {
                    content: () => heading.tooltipContent,
                    default: () => h(
                      "span",
                      { class: styles$W.TableHeadingUnderline },
                      headingContent
                    )
                  }
                ),
                h(
                  _sfc_main$4,
                  { ...defaultTooltipProps, preferredPosition: "above" },
                  () => iconMarkup
                )
              ]
            )
          );
        }
      }
      if (heading.tooltipContent) {
        return h(
          "div",
          {
            style,
            class: classNames(heading.paddingBlockEnd && styles$W["TableHeading-extra-padding-right"])
          },
          h(
            _sfc_main$4,
            { ...defaultHeaderTooltipProps, activatorWrapper: "span" },
            {
              content: () => heading.tooltipContent,
              default: () => h(
                "span",
                { class: classNames(styles$W.TableHeadingUnderline, styles$W.SortableTableHeaderWrapper) },
                headingContent
              )
            }
          )
        );
      }
      return h(
        "div",
        {
          style,
          class: classNames(heading.paddingBlockEnd && styles$W["TableHeading-extra-padding-right"])
        },
        headingContent
      );
    }
    function renderStickyHeading(heading, index) {
      const position = selectable2.value ? index + 1 : index;
      const headingStyle = tableHeadingRects.value && tableHeadingRects.value.length > position && { minWidth: `${tableHeadingRects.value[position].offsetWidth}px` };
      const headingAlignment = heading.alignment || "start";
      const headingContent = renderHeadingContent(heading, index);
      const stickyHeadingClassName = classNames(
        styles$W.TableHeading,
        heading.flush && styles$W["TableHeading-flush"],
        headingAlignment === "center" && styles$W["TableHeading-align-center"],
        headingAlignment === "end" && styles$W["TableHeading-align-end"],
        index === 0 && styles$W["StickyTableHeading-second"],
        index === 0 && !selectable2.value && styles$W.unselectable
      );
      return h(
        "div",
        {
          class: stickyHeadingClassName,
          style: headingStyle,
          "data-index-table-sticky-heading": true
        },
        headingContent
      );
    }
    const loadingTransitionClassNames = {
      enter: styles$W["LoadingContainer-enter"],
      enterActive: styles$W["LoadingContainer-enter-active"],
      exit: styles$W["LoadingContainer-exit"],
      exitActive: styles$W["LoadingContainer-exit-active"]
    };
    const onTransitionBeforeEnter = (el) => {
      el.classList.add(loadingTransitionClassNames.enter);
    };
    const onTransitionEnter = (el, done) => {
      setTimeout(() => {
        el.classList.add(loadingTransitionClassNames.enterActive);
        done();
      }, 1);
    };
    const onTransitionAfterEnter = (el) => {
      el.classList.remove(loadingTransitionClassNames.enter);
    };
    const onTransitionBeforeLeave = (el) => {
      el.classList.remove(loadingTransitionClassNames.enterActive);
      el.classList.add(loadingTransitionClassNames.exit);
    };
    const onTransitionLeave = (el, done) => {
      el.classList.add(loadingTransitionClassNames.exitActive);
      setTimeout(() => {
        done();
      }, parseInt(theme.motion["motion-duration-100"], 10));
    };
    const onTransitionAfterLeave = (el) => {
      el.classList.remove(loadingTransitionClassNames.exit);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$W).IndexTable)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$W).IndexTableWrapper)
        }, [
          !unref(condensed2) && unref(loading2) ? (openBlock(), createBlock(resolveDynamicComponent(loadingMarkup.value), { key: 0 })) : createCommentVNode("", true),
          unref(itemCount) > 0 ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createVNode(unref(_sfc_main$1Z), {
              event: "resize",
              handler: handleResize
            }),
            isMounted.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(stickyTableClassNames.value),
              role: "presentation"
            }, [
              createVNode(unref(_sfc_main$q), {
                boundingElement: stickyWrapper.value,
                onStickyChange
              }, {
                default: withCtx(() => [
                  unref(condensed2) ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(headerWrapperClassNames.value)
                  }, [
                    (openBlock(), createBlock(resolveDynamicComponent(loadingMarkup.value))),
                    renderSlot(_ctx.$slots, "sort")
                  ], 2)) : (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(stickyHeaderClassNames.value),
                    ref_key: "stickyHeaderWrapperElement",
                    ref: stickyHeaderWrapperElement
                  }, [
                    (openBlock(), createBlock(resolveDynamicComponent(loadingMarkup.value))),
                    createBaseVNode("div", {
                      class: normalizeClass(unref(styles$W).StickyTableColumnHeader)
                    }, [
                      (openBlock(), createBlock(resolveDynamicComponent(stickyColumnHeader)))
                    ], 2),
                    createBaseVNode("div", {
                      class: normalizeClass(unref(styles$W).StickyTableHeadings),
                      ref_key: "stickyHeaderElement",
                      ref: stickyHeaderElement
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.headings, (heading, index) => {
                        return openBlock(), createBlock(resolveDynamicComponent(renderStickyHeading(heading, index)), {
                          key: getHeadingKey(heading)
                        });
                      }), 128))
                    ], 2)
                  ], 2)),
                  !unref(condensed2) ? (openBlock(), createBlock(resolveDynamicComponent(bulkActionsMarkup.value), { key: 2 })) : createCommentVNode("", true)
                ]),
                _: 3
              }, 8, ["boundingElement"])
            ], 2)) : createCommentVNode("", true),
            unref(condensed2) ? (openBlock(), createElementBlock("ul", {
              key: 1,
              ref_key: "condensedListElement",
              ref: condensedListElement,
              class: normalizeClass(condensedClassNames.value),
              "data-selectmode": Boolean(unref(selectMode))
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 10, _hoisted_1$D)) : (openBlock(), createBlock(unref(_sfc_main$1x), {
              key: 2,
              ref_key: "scrollableContainerElementRef",
              ref: scrollableContainerElementRef,
              onScroll: handleScrollContainerScroll
            }, {
              default: withCtx(() => [
                createBaseVNode("table", {
                  ref_key: "tableElement",
                  ref: tableElement,
                  class: normalizeClass(tableClassNames.value)
                }, [
                  createBaseVNode("thead", null, [
                    createBaseVNode("tr", {
                      class: normalizeClass(unref(styles$W).HeadingRow)
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.headings, (heading, index) => {
                        return openBlock(), createElementBlock(Fragment, null, [
                          (openBlock(true), createElementBlock(Fragment, null, renderList(renderHeading(heading, index), (headingEl) => {
                            return openBlock(), createBlock(resolveDynamicComponent(headingEl));
                          }), 256))
                        ], 64);
                      }), 256))
                    ], 2)
                  ]),
                  createBaseVNode("tbody", { ref: tableBodyRef }, [
                    renderSlot(_ctx.$slots, "default")
                  ])
                ], 2)
              ]),
              _: 3
            }, 512))
          ], 64)) : (openBlock(), createElementBlock("div", {
            key: 2,
            class: normalizeClass(unref(styles$W).EmptySearchResultWrapper)
          }, [
            unref(hasSlot)(unref(slots).emptyState) ? renderSlot(_ctx.$slots, "emptyState", { key: 0 }) : (openBlock(), createBlock(unref(_sfc_main$1$), {
              key: 1,
              "with-illustration": "",
              title: unref(i18n).translate("Polaris.IndexTable.emptySearchTitle", { resourceNamePlural: unref(contextResourceName).plural }),
              description: unref(i18n).translate("Polaris.IndexTable.emptySearchDescription")
            }, null, 8, ["title", "description"]))
          ], 2)),
          unref(itemCount) > 0 ? (openBlock(), createElementBlock("div", {
            key: 3,
            ref_key: "scrollContainerElement",
            ref: scrollContainerElement,
            class: normalizeClass(scrollBarWrapperClassNames.value)
          }, [
            createBaseVNode("div", {
              ref_key: "scrollBarElement",
              ref: scrollBarElement,
              class: normalizeClass(unref(styles$W).ScrollBar),
              onScroll: handleScrollBarScroll
            }, [
              createBaseVNode("div", {
                class: normalizeClass(scrollBarClassNames.value)
              }, null, 2)
            ], 34)
          ], 2)) : createCommentVNode("", true),
          _ctx.pagination ? (openBlock(), createElementBlock("div", {
            key: 4,
            class: normalizeClass(unref(styles$W).PaginationWrapper)
          }, [
            createVNode(unref(_sfc_main$Q), mergeProps({ type: "table" }, _ctx.pagination), null, 16)
          ], 2)) : createCommentVNode("", true)
        ], 2)
      ], 2);
    };
  }
});
const _sfc_main$1v = /* @__PURE__ */ defineComponent({
  __name: "IndexTable",
  props: {
    headings: {},
    promotedBulkActions: {},
    bulkActions: {},
    paginatedSelectAllActionText: {},
    lastColumnSticky: { type: Boolean },
    selectable: { type: Boolean, default: true },
    sortable: {},
    defaultSortDirection: {},
    sortDirection: {},
    sortColumnIndex: {},
    sortToggleLabels: {},
    hasZebraStriping: { type: Boolean },
    pagination: {},
    itemCount: {},
    selectedItemsCount: { default: 0 },
    resourceName: {},
    loading: { type: Boolean },
    hasMoreItems: { type: Boolean },
    condensed: { type: Boolean },
    onSelectionChange: {}
  },
  emits: ["sort", "selection-change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const indexTableBaseProps = computed(() => {
      const {
        selectable: selectable2,
        itemCount,
        selectedItemsCount,
        resourceName,
        loading: loading2,
        hasMoreItems,
        condensed: condensed2,
        onSelectionChange: onSelectionChange2,
        ...rest
      } = props;
      return rest;
    });
    const onSelectionChange = (selectionType, toggleType, selection) => {
      emits("selection-change", selectionType, toggleType, selection);
    };
    const onSort = (index, direction) => {
      emits("sort", index, direction);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1B), {
        selectable: _ctx.selectable && !_ctx.condensed,
        itemCount: _ctx.itemCount,
        selectedItemsCount: _ctx.selectedItemsCount,
        resourceName: _ctx.resourceName,
        loading: _ctx.loading,
        hasMoreItems: _ctx.hasMoreItems,
        condensed: _ctx.condensed,
        onSelectionChange
      }, {
        default: withCtx(() => [
          createVNode(_sfc_main$1w, mergeProps(indexTableBaseProps.value, { onSort }), createSlots({
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 2
          }, [
            unref(hasSlot)(unref(slots).emptyState) ? {
              name: "emptyState",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "emptyState")
              ]),
              key: "0"
            } : void 0,
            unref(hasSlot)(unref(slots).sort) ? {
              name: "sort",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "sort")
              ]),
              key: "1"
            } : void 0
          ]), 1040)
        ]),
        _: 3
      }, 8, ["selectable", "itemCount", "selectedItemsCount", "resourceName", "loading", "hasMoreItems", "condensed"]);
    };
  }
});
const Indicator$2 = "Polaris-Indicator";
const pulseIndicator = "Polaris-Indicator--pulseIndicator";
const styles$T = {
  Indicator: Indicator$2,
  pulseIndicator
};
const _sfc_main$1u = /* @__PURE__ */ defineComponent({
  __name: "Indicator",
  props: {
    pulse: { type: Boolean, default: false }
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles$T.Indicator,
      props.pulse && styles$T.pulseIndicator
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(className.value)
      }, null, 2);
    };
  }
});
const InlineError = "Polaris-InlineError";
const Icon$2 = "Polaris-InlineError__Icon";
const styles$S = {
  InlineError,
  Icon: Icon$2
};
const _hoisted_1$C = ["id"];
const _hoisted_2$m = { key: 0 };
const _sfc_main$1t = /* @__PURE__ */ defineComponent({
  __name: "InlineError",
  props: {
    message: {},
    fieldId: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return _ctx.message ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(unref(styles$S).InlineError),
        id: unref(errorTextID)(_ctx.fieldId)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$S).Icon)
        }, [
          createVNode(unref(_sfc_main$1K), { source: unref(AlertCircleIcon) }, null, 8, ["source"])
        ], 2),
        typeof _ctx.message === "string" ? (openBlock(), createElementBlock("span", _hoisted_2$m, toDisplayString(_ctx.message), 1)) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.message), { key: 1 }))
      ], 10, _hoisted_1$C)) : createCommentVNode("", true);
    };
  }
});
const InlineGrid = "Polaris-InlineGrid";
const styles$R = {
  InlineGrid
};
const _sfc_main$1s = /* @__PURE__ */ defineComponent({
  __name: "InlineGrid",
  props: {
    columns: {},
    gap: {},
    alignItems: {}
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => {
      return {
        ...getResponsiveValue(
          "inline-grid",
          "grid-template-columns",
          formatInlineGrid(props.columns)
        ),
        ...getResponsiveProps("inline-grid", "gap", "space", props.gap),
        "--pc-inline-grid-align-items": props.alignItems
      };
    });
    function formatInlineGrid(columns) {
      if (typeof columns === "object" && columns !== null && !Array.isArray(columns)) {
        return Object.fromEntries(
          Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [
            breakpointAlias,
            getColumnValue(breakpointInlineGrid)
          ])
        );
      }
      return getColumnValue(columns);
    }
    function getColumnValue(columns) {
      if (!columns)
        return void 0;
      if (typeof columns === "number" || !isNaN(Number(columns))) {
        return `repeat(${Number(columns)}, minmax(0, 1fr))`;
      }
      if (typeof columns === "string")
        return columns;
      return columns.map((column) => {
        switch (column) {
          case "oneThird":
            return "minmax(0, 1fr)";
          case "oneHalf":
            return "minmax(0, 1fr)";
          case "twoThirds":
            return "minmax(0, 2fr)";
        }
      }).join(" ");
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$R).InlineGrid),
        style: normalizeStyle(unref(sanitizeCustomProperties)(style.value))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 6);
    };
  }
});
const InlineStack = "Polaris-InlineStack";
const styles$Q = {
  InlineStack
};
const _sfc_main$1r = /* @__PURE__ */ defineComponent({
  __name: "InlineStack",
  props: {
    as: { default: "div" },
    align: {},
    direction: { default: "row" },
    blockAlign: {},
    gap: {},
    wrap: { type: Boolean, default: true }
  },
  setup(__props) {
    const props = __props;
    const style = computed(() => {
      return {
        "--pc-inline-stack-align": props.align,
        "--pc-inline-stack-block-align": props.blockAlign,
        "--pc-inline-stack-wrap": props.wrap ? "wrap" : "nowrap",
        ...getResponsiveProps("inline-stack", "gap", "space", props.gap),
        ...getResponsiveValue("inline-stack", "flex-direction", props.direction)
      };
    });
    const className = computed(() => {
      return classNames(
        styles$Q.InlineStack
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.as), {
        class: normalizeClass(className.value),
        style: normalizeStyle(style.value)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "style"]);
    };
  }
});
const KeyboardKey = "Polaris-KeyboardKey";
const small = "Polaris-KeyboardKey--small";
const styles$P = {
  KeyboardKey,
  small
};
const _sfc_main$1q = /* @__PURE__ */ defineComponent({
  __name: "KeyboardKey",
  props: {
    size: {}
  },
  setup(__props) {
    const props = __props;
    useSlots();
    const className = computed(
      () => classNames(styles$P.KeyboardKey, props.size && styles$P[props.size])
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("kbd", {
        class: normalizeClass(className.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$1p = /* @__PURE__ */ defineComponent({
  __name: "KeypressListener",
  props: {
    keyCode: {},
    handler: {},
    keyEvent: { default: "keyup" },
    useCapture: { type: Boolean },
    options: {}
  },
  setup(__props) {
    const props = __props;
    const tracked = ref({
      handler: props.handler,
      keyCode: props.keyCode
    });
    onMounted(() => {
      document.addEventListener(
        props.keyEvent || "keyup",
        handleKeyEvent,
        props.useCapture || props.options
      );
    });
    onBeforeUnmount(() => {
      document.removeEventListener(
        props.keyEvent || "keyup",
        handleKeyEvent,
        props.useCapture || props.options
      );
    });
    const handleKeyEvent = (event) => {
      const { handler, keyCode } = tracked.value;
      if (event.keyCode === keyCode) {
        handler(event);
      }
    };
    return (_ctx, _cache) => {
      return null;
    };
  }
});
const Label$3 = "Polaris-Label";
const hidden$1 = "Polaris-Label--hidden";
const Text = "Polaris-Label__Text";
const RequiredIndicator = "Polaris-Label__RequiredIndicator";
const styles$O = {
  Label: Label$3,
  hidden: hidden$1,
  Text,
  RequiredIndicator
};
const _hoisted_1$B = ["id", "for"];
const _sfc_main$1o = /* @__PURE__ */ defineComponent({
  __name: "Label",
  props: {
    id: {},
    hidden: { type: Boolean },
    requiredIndicator: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    useSlots();
    const className = computed(() => {
      return classNames(
        styles$O.Label,
        props.hidden && styles$O.hidden
      );
    });
    const requiredIndicator = computed(() => classNames(
      styles$O.Text,
      props.requiredIndicator && styles$O.requiredIndicator
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createBaseVNode("label", {
          id: unref(labelId)(_ctx.id),
          for: _ctx.id,
          class: normalizeClass(requiredIndicator.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 10, _hoisted_1$B)
      ], 2);
    };
  }
});
function helpTextID(id) {
  return `${id}HelpText`;
}
const hidden = "Polaris-Labelled--hidden";
const LabelWrapper = "Polaris-Labelled__LabelWrapper";
const disabled$7 = "Polaris-Labelled--disabled";
const HelpText = "Polaris-Labelled__HelpText";
const readOnly$1 = "Polaris-Labelled--readOnly";
const Action$1 = "Polaris-Labelled__Action";
const styles$N = {
  hidden,
  LabelWrapper,
  disabled: disabled$7,
  HelpText,
  readOnly: readOnly$1,
  "Error": "Polaris-Labelled__Error",
  Action: Action$1
};
const _hoisted_1$A = ["id", "aria-disabled"];
const _sfc_main$1n = /* @__PURE__ */ defineComponent({
  __name: "Labelled",
  props: {
    id: {},
    error: { type: [String, Array, Boolean] },
    action: {},
    labelHidden: { type: Boolean },
    requiredIndicator: { type: Boolean },
    disabled: { type: Boolean },
    readOnly: { type: Boolean }
  },
  setup(__props) {
    const { hasSlot } = useHasSlot();
    const props = __props;
    const slots = useSlots();
    const className = computed(() => {
      return classNames(
        props.labelHidden && styles$N.hidden,
        props.disabled && styles$N.disabled,
        props.readOnly && styles$N.readOnly
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        unref(hasSlot)(unref(slots).label) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(styles$N).LabelWrapper)
        }, [
          createVNode(unref(_sfc_main$1o), mergeProps(props, {
            id: _ctx.id,
            "required-indicator": _ctx.requiredIndicator,
            hidden: false
          }), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "label")
            ]),
            _: 3
          }, 16, ["id", "required-indicator"]),
          _ctx.action ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles$N).Action)
          }, [
            createVNode(unref(_sfc_main$2s), {
              action: _ctx.action,
              overrides: { variant: "plain" }
            }, null, 8, ["action"])
          ], 2)) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "default"),
        _ctx.error && typeof _ctx.error !== "boolean" ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(styles$N).Error)
        }, [
          createVNode(unref(_sfc_main$1t), {
            message: _ctx.error,
            "field-id": _ctx.id
          }, null, 8, ["message", "field-id"])
        ], 2)) : createCommentVNode("", true),
        unref(hasSlot)(unref(slots).helpText) ? (openBlock(), createElementBlock("div", {
          key: 2,
          class: normalizeClass(unref(styles$N).HelpText),
          id: unref(helpTextID)(_ctx.id),
          "aria-disabled": _ctx.disabled
        }, [
          createVNode(unref(_sfc_main$f), {
            "break-word": "",
            as: "span",
            tone: "subdued"
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "helpText")
            ]),
            _: 3
          })
        ], 10, _hoisted_1$A)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const Layout = "Polaris-Layout";
const Section$3 = "Polaris-Layout__Section";
const AnnotatedSection = "Polaris-Layout__AnnotatedSection";
const AnnotationWrapper = "Polaris-Layout__AnnotationWrapper";
const AnnotationContent = "Polaris-Layout__AnnotationContent";
const Annotation = "Polaris-Layout__Annotation";
const styles$M = {
  Layout,
  Section: Section$3,
  "Section-fullWidth": "Polaris-Layout__Section--fullWidth",
  "Section-oneHalf": "Polaris-Layout__Section--oneHalf",
  "Section-oneThird": "Polaris-Layout__Section--oneThird",
  AnnotatedSection,
  AnnotationWrapper,
  AnnotationContent,
  Annotation
};
const _sfc_main$1m = /* @__PURE__ */ defineComponent({
  __name: "Section",
  props: {
    variant: {}
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(styles$M.Section, styles$M[`Section-${props.variant}`]));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$1l = /* @__PURE__ */ defineComponent({
  __name: "Layout",
  props: {
    sectioned: { type: Boolean }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$M).Layout)
      }, [
        _ctx.sectioned ? (openBlock(), createBlock(_sfc_main$1m, { key: 0 }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })) : renderSlot(_ctx.$slots, "default", { key: 1 })
      ], 2);
    };
  }
});
const _sfc_main$1k = /* @__PURE__ */ defineComponent({
  __name: "AnnotatedSection",
  props: {
    id: {},
    title: {},
    description: {}
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const hasDescription = computed(() => Boolean(slots.description || props.description));
    return (_ctx, _cache) => {
      const _component_Text = resolveComponent("Text");
      const _component_Box = resolveComponent("Box");
      const _component_TextContainer = resolveComponent("TextContainer");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$M).AnnotatedSection)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$M).AnnotationWrapper)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(styles$M).Annotation)
          }, [
            createVNode(_component_TextContainer, { spacing: "tight" }, {
              default: withCtx(() => [
                createVNode(_component_Text, {
                  id: _ctx.id,
                  variant: "headingMd",
                  as: "h2"
                }, {
                  default: withCtx(() => [
                    unref(slots).title ? renderSlot(_ctx.$slots, "title", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(_ctx.title), 1)
                    ], 64))
                  ]),
                  _: 3
                }, 8, ["id"]),
                hasDescription.value ? (openBlock(), createBlock(_component_Box, {
                  key: 0,
                  color: "text-secondary"
                }, {
                  default: withCtx(() => [
                    unref(slots).description ? renderSlot(_ctx.$slots, "description", { key: 0 }) : (openBlock(), createBlock(_component_Text, {
                      key: 1,
                      as: "p",
                      variant: "bodyMd"
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(_ctx.description), 1)
                      ]),
                      _: 1
                    }))
                  ]),
                  _: 3
                })) : createCommentVNode("", true)
              ]),
              _: 3
            })
          ], 2),
          createBaseVNode("div", {
            class: normalizeClass(unref(styles$M).AnnotationContent)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)
        ], 2)
      ], 2);
    };
  }
});
const LegacyCard = "Polaris-LegacyCard";
const Section$2 = "Polaris-LegacyCard__Section";
const subdued$1 = "Polaris-LegacyCard--subdued";
const hideOnPrint = "Polaris-LegacyCard--hideOnPrint";
const Header = "Polaris-LegacyCard__Header";
const SectionHeader = "Polaris-LegacyCard__SectionHeader";
const Subsection = "Polaris-LegacyCard__Subsection";
const Footer = "Polaris-LegacyCard__Footer";
const LeftJustified = "Polaris-LegacyCard__LeftJustified";
const FirstSectionPadding = "Polaris-LegacyCard__FirstSectionPadding";
const LastSectionPadding = "Polaris-LegacyCard__LastSectionPadding";
const styles$L = {
  LegacyCard,
  Section: Section$2,
  subdued: subdued$1,
  "Section-hideOnPrint": "Polaris-LegacyCard__Section--hideOnPrint",
  hideOnPrint,
  Header,
  "Section-fullWidth": "Polaris-LegacyCard__Section--fullWidth",
  "Section-flush": "Polaris-LegacyCard__Section--flush",
  "Section-subdued": "Polaris-LegacyCard__Section--subdued",
  SectionHeader,
  Subsection,
  Footer,
  LeftJustified,
  FirstSectionPadding,
  LastSectionPadding
};
function useLegacyCardPaddingObserverRef() {
  const legacyCard = ref(null);
  onMounted(() => {
    const legacyCardNode = legacyCard.value;
    let firstSection;
    let lastSection;
    if (legacyCardNode) {
      const updateFirstAndLastSectionPadding = () => {
        var _a, _b;
        updatePadding(firstSection, "top", false);
        updatePadding(lastSection, "bottom", false);
        const currentElements = legacyCardNode.querySelectorAll(
          `.${styles$L.Section}, .${styles$L.Header}, .${styles$L.Footer}`
        );
        if (!(currentElements == null ? void 0 : currentElements.length))
          return;
        const firstElement = currentElements[0];
        const lastElement = currentElements[currentElements.length - 1];
        if ((_a = legacyCardNode.firstElementChild) == null ? void 0 : _a.contains(firstElement)) {
          firstSection = firstElement;
          updatePadding(firstSection, "top", true);
        }
        if ((_b = legacyCardNode.lastElementChild) == null ? void 0 : _b.contains(lastElement)) {
          lastSection = lastElement;
          updatePadding(lastSection, "bottom", true);
        }
      };
      updateFirstAndLastSectionPadding();
      const observer = new MutationObserver(updateFirstAndLastSectionPadding);
      observer.observe(legacyCardNode, {
        childList: true,
        subtree: true
      });
      return () => {
        updatePadding(firstSection, "top", false);
        updatePadding(lastSection, "bottom", false);
        observer.disconnect();
      };
    }
  });
  return legacyCard;
}
function updatePadding(element, area, add) {
  if (!element || element.className.includes(styles$L["Section-flush"]))
    return;
  switch (area) {
    case "top":
      element.classList.toggle(
        styles$L.FirstSectionPadding,
        add
      );
      return;
    case "bottom":
      element.classList.toggle(
        styles$L.LastSectionPadding,
        add
      );
  }
}
const _sfc_main$1j = /* @__PURE__ */ defineComponent({
  __name: "Header",
  props: {
    title: {},
    actions: {}
  },
  setup(__props) {
    const { hasSlot } = useHasSlot();
    const slots = useSlots();
    const isTextOnlyTitle = computed(() => {
      var _a, _b, _c, _d, _e;
      if (slots.title && slots.title().length === 1) {
        if (((_a = slots.title()[0]) == null ? void 0 : _a.type.toString()) === "Symbol(v-txt)" || ((_b = slots.title()[0]) == null ? void 0 : _b.type.toString()) === "Symbol()") {
          return true;
        } else {
          return slots.title()[0].children && ((_c = slots.title()[0].children) == null ? void 0 : _c.length) === 1 && (((_d = slots.title()[0].children) == null ? void 0 : _d[0].type.toString()) === "Symbol(v-txt)" || ((_e = slots.title()[0].children) == null ? void 0 : _e[0].type.toString()) === "Symbol()");
        }
      }
      return false;
    });
    return (_ctx, _cache) => {
      const _component_Text = resolveComponent("Text");
      const _component_ButtonFrom = resolveComponent("ButtonFrom");
      const _component_ButtonGroup = resolveComponent("ButtonGroup");
      const _component_InlineStack = resolveComponent("InlineStack");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$L).Header)
      }, [
        _ctx.actions || unref(hasSlot)(unref(slots).default) ? (openBlock(), createBlock(_component_InlineStack, {
          key: 0,
          align: "space-between",
          blockAlign: "center",
          wrap: false,
          gap: 200
        }, {
          default: withCtx(() => [
            isTextOnlyTitle.value ? renderSlot(_ctx.$slots, "title", { key: 0 }) : _ctx.title ? (openBlock(), createBlock(_component_Text, {
              key: 1,
              variant: "headingSm",
              as: "h2"
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.title), 1)
              ]),
              _: 1
            })) : createCommentVNode("", true),
            createVNode(_component_InlineStack, {
              blockAlign: "center",
              wrap: false,
              gap: 400
            }, {
              default: withCtx(() => [
                _ctx.actions ? (openBlock(), createBlock(_component_ButtonGroup, { key: 0 }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actions, (action, index) => {
                      return openBlock(), createBlock(_component_ButtonFrom, {
                        key: index,
                        action,
                        overrides: { variant: "plain" }
                      }, null, 8, ["action"]);
                    }), 128))
                  ]),
                  _: 1
                })) : createCommentVNode("", true),
                unref(hasSlot)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("", true)
              ]),
              _: 3
            })
          ]),
          _: 3
        })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          isTextOnlyTitle.value ? renderSlot(_ctx.$slots, "title", { key: 0 }) : _ctx.title ? (openBlock(), createBlock(_component_Text, {
            key: 1,
            variant: "headingSm",
            as: "h2"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], 64))
      ], 2);
    };
  }
});
const _sfc_main$1i = /* @__PURE__ */ defineComponent({
  __name: "Section",
  props: {
    title: {},
    subdued: { type: Boolean },
    flush: { type: Boolean },
    fullWidth: { type: Boolean },
    hideOnPrint: { type: Boolean },
    actions: {}
  },
  setup(__props) {
    const props = __props;
    const { hasSlot } = useHasSlot();
    const slots = useSlots();
    const className = computed(
      () => classNames(
        styles$L.Section,
        props.flush && styles$L["Section-flush"],
        props.subdued && styles$L["Section-subdued"],
        props.fullWidth && styles$L["Section-fullWidth"],
        props.hideOnPrint && styles$L["Section-hideOnPrint"]
      )
    );
    return (_ctx, _cache) => {
      const _component_Text = resolveComponent("Text");
      const _component_LegacyStackItem = resolveComponent("LegacyStackItem");
      const _component_ButtonFrom = resolveComponent("ButtonFrom");
      const _component_ButtonGroup = resolveComponent("ButtonGroup");
      const _component_LegacyStack = resolveComponent("LegacyStack");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        _ctx.title || unref(hasSlot)(unref(slots).title) || _ctx.actions ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(styles$L).SectionHeader)
        }, [
          _ctx.actions ? (openBlock(), createBlock(_component_LegacyStack, {
            key: 0,
            alignment: "baseline"
          }, {
            default: withCtx(() => [
              createVNode(_component_LegacyStackItem, { fill: "" }, {
                default: withCtx(() => [
                  typeof _ctx.title === "string" ? (openBlock(), createBlock(_component_Text, {
                    key: 0,
                    variant: "headingSm",
                    as: "h3",
                    fontWeight: "medium"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.title), 1)
                    ]),
                    _: 1
                  })) : renderSlot(_ctx.$slots, "title", { key: 1 })
                ]),
                _: 3
              }),
              _ctx.actions ? (openBlock(), createBlock(_component_ButtonGroup, { key: 0 }, {
                default: withCtx(() => [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actions, (action, index) => {
                    return openBlock(), createBlock(_component_ButtonFrom, {
                      key: index,
                      action,
                      overrides: { variant: "plain" }
                    }, null, 8, ["action"]);
                  }), 128))
                ]),
                _: 1
              })) : createCommentVNode("", true)
            ]),
            _: 3
          })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            typeof _ctx.title === "string" ? (openBlock(), createBlock(_component_Text, {
              key: 0,
              variant: "headingSm",
              as: "h3",
              fontWeight: "medium"
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.title), 1)
              ]),
              _: 1
            })) : renderSlot(_ctx.$slots, "title", { key: 1 })
          ], 64))
        ], 2)) : createCommentVNode("", true),
        unref(hasSlot)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const _sfc_main$1h = /* @__PURE__ */ defineComponent({
  __name: "Subsection",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$L).Subsection)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _sfc_main$1g = /* @__PURE__ */ defineComponent({
  __name: "LegacyCard",
  props: {
    title: {},
    subdued: { type: Boolean },
    sectioned: { type: Boolean },
    actions: {},
    primaryFooterAction: {},
    secondaryFooterActions: {},
    secondaryFooterActionsDisclosureText: {},
    footerActionAlignment: { default: "right" },
    hideOnPrint: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const slots = useSlots();
    const legacyCardRef = useLegacyCardPaddingObserverRef();
    const { hasSlot } = useHasSlot();
    const {
      value: secondaryActionsPopoverOpen,
      toggle: toggleSecondaryActionsPopoverOpen
    } = useToggle(false);
    const className = computed(
      () => classNames(
        styles$L.LegacyCard,
        props.subdued && styles$L.subdued,
        props.hideOnPrint && styles$L.hideOnPrint
      )
    );
    const footerMarkupStyle = computed(
      () => classNames(
        styles$L.Footer,
        props.footerActionAlignment === "left" && styles$L.LeftJustified
      )
    );
    provide("within-content-context", true);
    return (_ctx, _cache) => {
      const _component_ButtonFrom = resolveComponent("ButtonFrom");
      const _component_ActionList = resolveComponent("ActionList");
      const _component_Popover = resolveComponent("Popover");
      const _component_ButtonGroup = resolveComponent("ButtonGroup");
      return openBlock(), createElementBlock("div", {
        ref_key: "legacyCardRef",
        ref: legacyCardRef,
        class: normalizeClass(className.value)
      }, [
        _ctx.title || unref(hasSlot)(unref(slots).title) || _ctx.actions ? (openBlock(), createBlock(unref(_sfc_main$1j), {
          key: 0,
          actions: _ctx.actions,
          title: _ctx.title
        }, {
          default: withCtx(() => [
            unref(hasSlot)(unref(slots).title) ? renderSlot(_ctx.$slots, "title", { key: 0 }) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["actions", "title"])) : createCommentVNode("", true),
        _ctx.sectioned ? (openBlock(), createBlock(unref(_sfc_main$1i), { key: 1 }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })) : renderSlot(_ctx.$slots, "default", { key: 2 }),
        _ctx.primaryFooterAction || _ctx.secondaryFooterActions && _ctx.secondaryFooterActions.length ? (openBlock(), createElementBlock("div", {
          key: 3,
          class: normalizeClass(footerMarkupStyle.value)
        }, [
          _ctx.footerActionAlignment === "right" ? (openBlock(), createBlock(_component_ButtonGroup, { key: 0 }, {
            default: withCtx(() => [
              _ctx.secondaryFooterActions && _ctx.secondaryFooterActions.length === 1 ? (openBlock(), createBlock(_component_ButtonFrom, {
                key: 0,
                action: _ctx.secondaryFooterActions[0]
              }, null, 8, ["action"])) : (openBlock(), createBlock(_component_Popover, {
                key: 1,
                active: unref(secondaryActionsPopoverOpen),
                onClose: unref(toggleSecondaryActionsPopoverOpen)
              }, {
                activator: withCtx(() => [
                  createVNode(unref(_sfc_main$2t), {
                    disclosure: true,
                    onClick: unref(toggleSecondaryActionsPopoverOpen)
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.secondaryFooterActionsDisclosureText || unref(i18n).translate("Polaris.Common.more")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ]),
                default: withCtx(() => [
                  createVNode(_component_ActionList, { items: _ctx.secondaryFooterActions }, null, 8, ["items"])
                ]),
                _: 1
              }, 8, ["active", "onClose"])),
              _ctx.primaryFooterAction ? (openBlock(), createBlock(_component_ButtonFrom, {
                key: 2,
                action: _ctx.primaryFooterAction,
                overrides: { variant: "primary" }
              }, null, 8, ["action"])) : createCommentVNode("", true)
            ]),
            _: 1
          })) : (openBlock(), createBlock(_component_ButtonGroup, { key: 1 }, {
            default: withCtx(() => [
              _ctx.primaryFooterAction ? (openBlock(), createBlock(_component_ButtonFrom, {
                key: 0,
                action: _ctx.primaryFooterAction,
                overrides: { variant: "primary" }
              }, null, 8, ["action"])) : createCommentVNode("", true),
              _ctx.secondaryFooterActions && _ctx.secondaryFooterActions.length === 1 ? (openBlock(), createBlock(_component_ButtonFrom, {
                key: 1,
                action: _ctx.secondaryFooterActions[0]
              }, null, 8, ["action"])) : (openBlock(), createBlock(_component_Popover, {
                key: 2,
                active: unref(secondaryActionsPopoverOpen),
                onClose: unref(toggleSecondaryActionsPopoverOpen)
              }, {
                activator: withCtx(() => [
                  createVNode(unref(_sfc_main$2t), {
                    disclosure: true,
                    onClick: unref(toggleSecondaryActionsPopoverOpen)
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(_ctx.secondaryFooterActionsDisclosureText || unref(i18n).translate("Polaris.Common.more")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ]),
                default: withCtx(() => [
                  createVNode(_component_ActionList, { items: _ctx.secondaryFooterActions }, null, 8, ["items"])
                ]),
                _: 1
              }, 8, ["active", "onClose"]))
            ]),
            _: 1
          }))
        ], 2)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const LegacyStack = "Polaris-LegacyStack";
const Item$3 = "Polaris-LegacyStack__Item";
const noWrap = "Polaris-LegacyStack--noWrap";
const spacingNone = "Polaris-LegacyStack--spacingNone";
const spacingExtraTight = "Polaris-LegacyStack--spacingExtraTight";
const spacingTight$1 = "Polaris-LegacyStack--spacingTight";
const spacingBaseTight = "Polaris-LegacyStack--spacingBaseTight";
const spacingLoose$2 = "Polaris-LegacyStack--spacingLoose";
const spacingExtraLoose = "Polaris-LegacyStack--spacingExtraLoose";
const distributionLeading = "Polaris-LegacyStack--distributionLeading";
const distributionTrailing = "Polaris-LegacyStack--distributionTrailing";
const distributionCenter = "Polaris-LegacyStack--distributionCenter";
const distributionEqualSpacing = "Polaris-LegacyStack--distributionEqualSpacing";
const distributionFill = "Polaris-LegacyStack--distributionFill";
const distributionFillEvenly = "Polaris-LegacyStack--distributionFillEvenly";
const alignmentLeading = "Polaris-LegacyStack--alignmentLeading";
const alignmentTrailing = "Polaris-LegacyStack--alignmentTrailing";
const alignmentCenter = "Polaris-LegacyStack--alignmentCenter";
const alignmentFill = "Polaris-LegacyStack--alignmentFill";
const alignmentBaseline = "Polaris-LegacyStack--alignmentBaseline";
const vertical$1 = "Polaris-LegacyStack--vertical";
const styles$K = {
  LegacyStack,
  Item: Item$3,
  noWrap,
  spacingNone,
  spacingExtraTight,
  spacingTight: spacingTight$1,
  spacingBaseTight,
  spacingLoose: spacingLoose$2,
  spacingExtraLoose,
  distributionLeading,
  distributionTrailing,
  distributionCenter,
  distributionEqualSpacing,
  distributionFill,
  distributionFillEvenly,
  alignmentLeading,
  alignmentTrailing,
  alignmentCenter,
  alignmentFill,
  alignmentBaseline,
  vertical: vertical$1,
  "Item-fill": "Polaris-LegacyStack__Item--fill"
};
const _sfc_main$1f = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    fill: { type: Boolean, default: false }
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => {
      return classNames(
        styles$K.Item,
        props.fill && styles$K["Item-fill"]
      );
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
function isElementOfType(element, component) {
  if (!element) {
    return false;
  }
  if (typeof element === "string" || typeof element === "number" || typeof element === "boolean") {
    return false;
  }
  const typeElement = element.type;
  if (!typeElement || !typeElement.__name) {
    return false;
  }
  const elementName = typeElement.__name;
  const componentName = component.__name;
  const elementId = typeElement.__hmrId;
  const componentId = component.__hmrId;
  return elementId === componentId && elementName === componentName;
}
const _sfc_main$1e = /* @__PURE__ */ defineComponent({
  __name: "LegacyStack",
  props: {
    wrap: { type: Boolean, default: true },
    vertical: { type: Boolean },
    spacing: {},
    alignment: {},
    distribution: {},
    noItemWrap: { type: Boolean }
  },
  setup(__props) {
    const slots = useSlots();
    const { hasContent } = useHasSlot();
    const { slotsElms } = useExtractFragment(slots.default);
    const props = __props;
    const className = computed(
      () => {
        return classNames(
          styles$K.LegacyStack,
          props.vertical && styles$K.vertical,
          props.spacing && styles$K[variationName("spacing", props.spacing)],
          props.distribution && styles$K[variationName("distribution", props.distribution)],
          props.alignment && styles$K[variationName("alignment", props.alignment)],
          props.wrap === false && styles$K.noWrap
        );
      }
    );
    const isChildContentWrappedByItem = computed(() => {
      var _a;
      const childContents = ((_a = slots.default) == null ? void 0 : _a.call(slots)) || [];
      if (!childContents.length) {
        return false;
      }
      const children = childContents[0].children && childContents[0].children.length ? childContents[0].children[0] : childContents[0];
      return isElementOfType(children, _sfc_main$1f);
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        _ctx.noItemWrap ? renderSlot(_ctx.$slots, "default", { key: 0 }) : unref(slotsElms).length ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(slotsElms), (item, _index) => {
          return openBlock(), createElementBlock(Fragment, { key: _index }, [
            isChildContentWrappedByItem.value && unref(hasContent)(item) ? (openBlock(), createBlock(resolveDynamicComponent(item), { key: 0 })) : unref(hasContent)(item) ? (openBlock(), createBlock(_sfc_main$1f, { key: 1 }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(item)))
              ]),
              _: 2
            }, 1024)) : createCommentVNode("", true)
          ], 64);
        }), 128)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const Link$2 = "Polaris-Link";
const monochrome = "Polaris-Link--monochrome";
const removeUnderline = "Polaris-Link--removeUnderline";
const styles$J = {
  Link: Link$2,
  monochrome,
  removeUnderline
};
const _hoisted_1$z = ["aria-label", "data-primary-link"];
const _sfc_main$1d = /* @__PURE__ */ defineComponent({
  __name: "Link",
  props: {
    id: {},
    url: {},
    to: {},
    external: { type: Boolean },
    target: {},
    monochrome: { type: Boolean },
    removeUnderline: { type: Boolean },
    accessibilityLabel: {},
    dataPrimaryLink: { type: Boolean }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const bannerContext = inject("banner-context", false);
    const props = __props;
    const emits = __emit;
    const shouldBeMonochrome = computed(() => Boolean(props.monochrome || bannerContext));
    const className = computed(() => classNames(
      styles$J.Link,
      shouldBeMonochrome.value && styles$J.monochrome,
      props.removeUnderline && styles$J.removeUnderline
    ));
    return (_ctx, _cache) => {
      const _component_router_link = resolveComponent("router-link");
      return _ctx.to ? (openBlock(), createBlock(_component_router_link, {
        key: 0,
        to: _ctx.to,
        class: normalizeClass(className.value),
        "aria-label": _ctx.accessibilityLabel,
        "data-primary-link": _ctx.dataPrimaryLink
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["to", "class", "aria-label", "data-primary-link"])) : _ctx.url ? (openBlock(), createBlock(unref(_sfc_main$2v), {
        key: 1,
        class: normalizeClass(className.value),
        url: _ctx.url,
        external: _ctx.external,
        target: _ctx.target,
        "aria-label": _ctx.accessibilityLabel,
        "data-primary-link": _ctx.dataPrimaryLink,
        onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "url", "external", "target", "aria-label", "data-primary-link"])) : (openBlock(), createElementBlock("button", {
        key: 2,
        type: "button",
        class: normalizeClass(className.value),
        "aria-label": _ctx.accessibilityLabel,
        "data-primary-link": _ctx.dataPrimaryLink,
        onClick: _cache[1] || (_cache[1] = ($event) => emits("click"))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1$z));
    };
  }
});
const List$1 = "Polaris-List";
const typeNumber = "Polaris-List--typeNumber";
const Item$2 = "Polaris-List__Item";
const spacingLoose$1 = "Polaris-List--spacingLoose";
const styles$I = {
  List: List$1,
  typeNumber,
  Item: Item$2,
  spacingLoose: spacingLoose$1
};
const _sfc_main$1c = /* @__PURE__ */ defineComponent({
  __name: "List",
  props: {
    gap: { default: "loose" },
    type: { default: "bullet" }
  },
  setup(__props) {
    const props = __props;
    useSlots();
    const className = computed(() => classNames(
      styles$I.List,
      props.gap && styles$I[variationName("spacing", props.gap)],
      props.type && styles$I[variationName("type", props.type)]
    ));
    const listElm = computed(() => props.type === "bullet" ? "ul" : "ol");
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(listElm.value), {
        class: normalizeClass(className.value)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"]);
    };
  }
});
const _sfc_main$1b = /* @__PURE__ */ defineComponent({
  __name: "Item",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        class: normalizeClass(unref(styles$I).Item)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const MediaCard = "Polaris-MediaCard";
const portrait = "Polaris-MediaCard--portrait";
const MediaContainer = "Polaris-MediaCard__MediaContainer";
const sizeSmall$6 = "Polaris-MediaCard--sizeSmall";
const InfoContainer = "Polaris-MediaCard__InfoContainer";
const ActionContainer = "Polaris-MediaCard__ActionContainer";
const Description = "Polaris-MediaCard__Description";
const styles$H = {
  MediaCard,
  portrait,
  MediaContainer,
  sizeSmall: sizeSmall$6,
  InfoContainer,
  ActionContainer,
  Description
};
const _sfc_main$1a = /* @__PURE__ */ defineComponent({
  __name: "MediaCard",
  props: {
    description: {},
    primaryAction: {},
    secondaryAction: {},
    popoverActions: { default: () => [] },
    portrait: { type: Boolean, default: false },
    size: { default: "medium" },
    title: {}
  },
  emits: ["dismiss"],
  setup(__props, { emit: __emit }) {
    const slots = useSlots();
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const { value: popoverActive, toggle: togglePopoverActive } = useToggle(false);
    const currentInstance = getCurrentInstance();
    const mediaCardClassName = computed(() => classNames(
      styles$H.MediaCard,
      props.portrait && styles$H.portrait
    ));
    const mediaContainerClassName = computed(() => classNames(
      styles$H.MediaContainer,
      props.portrait && styles$H.portrait,
      props.size === "small" && styles$H.sizeSmall
    ));
    const infoContainerClassName = computed(() => classNames(
      styles$H.InfoContainer,
      props.portrait && styles$H.portrait,
      props.size === "small" && styles$H.sizeSmall
    ));
    const actionClassName = computed(() => classNames(
      styles$H.ActionContainer,
      props.portrait && styles$H.portrait
    ));
    const hasDismiss2 = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onDismiss);
    });
    return (_ctx, _cache) => {
      const _component_Text = resolveComponent("Text");
      const _component_Button = resolveComponent("Button");
      const _component_InlineStack = resolveComponent("InlineStack");
      const _component_ActionList = resolveComponent("ActionList");
      const _component_Popover = resolveComponent("Popover");
      const _component_Box = resolveComponent("Box");
      const _component_ButtonGroup = resolveComponent("ButtonGroup");
      const _component_BlockStack = resolveComponent("BlockStack");
      const _component_LegacyCard = resolveComponent("LegacyCard");
      return openBlock(), createBlock(_component_LegacyCard, null, {
        default: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(mediaCardClassName.value)
          }, [
            createBaseVNode("div", {
              class: normalizeClass(mediaContainerClassName.value)
            }, [
              renderSlot(_ctx.$slots, "default")
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass(infoContainerClassName.value)
            }, [
              createVNode(_component_Box, { padding: 500 }, {
                default: withCtx(() => [
                  createVNode(_component_BlockStack, { gap: 200 }, {
                    default: withCtx(() => [
                      createVNode(_component_InlineStack, {
                        align: "space-between",
                        wrap: false,
                        gap: 200
                      }, {
                        default: withCtx(() => [
                          unref(hasSlot)(unref(slots).title) ? renderSlot(_ctx.$slots, "title", { key: 0 }) : (openBlock(), createBlock(_component_Text, {
                            key: 1,
                            variant: "headingSm",
                            as: "h2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(_ctx.title), 1)
                            ]),
                            _: 1
                          })),
                          _ctx.popoverActions.length > 0 || hasDismiss2.value ? (openBlock(), createBlock(_component_Box, {
                            key: 2,
                            position: "absolute",
                            insetInlineEnd: 500,
                            zIndex: "var(--p-z-index-2)"
                          }, {
                            default: withCtx(() => [
                              createVNode(_component_InlineStack, {
                                gap: 100,
                                wrap: false
                              }, {
                                default: withCtx(() => [
                                  _ctx.popoverActions.length > 0 ? (openBlock(), createBlock(_component_Popover, {
                                    key: 0,
                                    active: unref(popoverActive),
                                    onClose: unref(togglePopoverActive),
                                    preferredAlignment: "left",
                                    preferredPosition: "below"
                                  }, {
                                    activator: withCtx(() => [
                                      createVNode(_component_InlineStack, { blockAlign: "center" }, {
                                        default: withCtx(() => [
                                          createVNode(_component_Button, {
                                            variant: "tertiary",
                                            size: "slim",
                                            icon: unref(MenuHorizontalIcon),
                                            accessibilityLabel: unref(i18n).translate("Polaris.MediaCard.popoverButton"),
                                            onClick: unref(togglePopoverActive)
                                          }, null, 8, ["icon", "accessibilityLabel", "onClick"])
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    default: withCtx(() => [
                                      createVNode(_component_ActionList, {
                                        items: _ctx.popoverActions,
                                        onActionAnyItem: unref(togglePopoverActive)
                                      }, null, 8, ["items", "onActionAnyItem"])
                                    ]),
                                    _: 1
                                  }, 8, ["active", "onClose"])) : createCommentVNode("", true),
                                  hasDismiss2.value ? (openBlock(), createBlock(_component_Button, {
                                    key: 1,
                                    size: "slim",
                                    variant: "tertiary",
                                    icon: unref(XIcon),
                                    accessibilityLabel: unref(i18n).translate("Polaris.MediaCard.dismissButton"),
                                    onClick: _cache[0] || (_cache[0] = ($event) => emits("dismiss"))
                                  }, null, 8, ["icon", "accessibilityLabel"])) : createCommentVNode("", true)
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["zIndex"])) : createCommentVNode("", true)
                        ]),
                        _: 3
                      }),
                      createBaseVNode("p", {
                        class: normalizeClass(unref(styles$H).Description)
                      }, toDisplayString(_ctx.description), 3),
                      createBaseVNode("div", {
                        class: normalizeClass(actionClassName.value)
                      }, [
                        createVNode(_component_ButtonGroup, null, {
                          default: withCtx(() => [
                            _ctx.primaryAction ? (openBlock(), createBlock(unref(_sfc_main$2s), {
                              key: 0,
                              action: _ctx.primaryAction
                            }, null, 8, ["action"])) : createCommentVNode("", true),
                            _ctx.secondaryAction ? (openBlock(), createBlock(unref(_sfc_main$2s), {
                              key: 1,
                              action: _ctx.secondaryAction
                            }, null, 8, ["action"])) : createCommentVNode("", true)
                          ]),
                          _: 1
                        })
                      ], 2)
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              })
            ], 2)
          ], 2)
        ]),
        _: 3
      });
    };
  }
});
const Body = "Polaris-Modal__Body";
const NoScrollBody = "Polaris-Modal__NoScrollBody";
const IFrame = "Polaris-Modal__IFrame";
const styles$G = {
  Body,
  NoScrollBody,
  IFrame
};
const _sfc_main$19 = /* @__PURE__ */ defineComponent({
  __name: "CloseButton",
  props: {
    pressed: { type: Boolean }
  },
  setup(__props) {
    const i18n = useI18n();
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2t), {
        variant: "tertiary",
        icon: unref(XIcon),
        pressed: _ctx.pressed,
        "accessibility-label": unref(i18n).translate("Polaris.Common.close")
      }, null, 8, ["icon", "pressed", "accessibility-label"]);
    };
  }
});
const Container = "Polaris-Modal-Dialog__Container";
const Dialog = "Polaris-Modal-Dialog";
const Modal = "Polaris-Modal-Dialog__Modal";
const limitHeight = "Polaris-Modal-Dialog--limitHeight";
const sizeSmall$5 = "Polaris-Modal-Dialog--sizeSmall";
const sizeLarge$6 = "Polaris-Modal-Dialog--sizeLarge";
const sizeFullScreen = "Polaris-Modal-Dialog--sizeFullScreen";
const animateFadeUp = "Polaris-Modal-Dialog--animateFadeUp";
const entering = "Polaris-Modal-Dialog--entering";
const exiting = "Polaris-Modal-Dialog--exiting";
const exited = "Polaris-Modal-Dialog--exited";
const entered = "Polaris-Modal-Dialog--entered";
const styles$F = {
  Container,
  Dialog,
  Modal,
  limitHeight,
  sizeSmall: sizeSmall$5,
  sizeLarge: sizeLarge$6,
  sizeFullScreen,
  animateFadeUp,
  entering,
  exiting,
  exited,
  entered
};
const _hoisted_1$y = ["aria-label", "aria-labelledby"];
const _sfc_main$18 = /* @__PURE__ */ defineComponent({
  __name: "Dialog",
  props: {
    labelledBy: {},
    limitHeight: { type: Boolean },
    size: {},
    in: { type: Boolean },
    hasToasts: { type: Boolean }
  },
  emits: ["close", "closing", "entered", "exited"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const dialogNode = ref(null);
    const closing = ref(false);
    const classes = computed(() => {
      return classNames(
        styles$F.Modal,
        props.size && styles$F[variationName("size", props.size)],
        props.limitHeight && styles$F.limitHeight
      );
    });
    onMounted(() => {
      if (dialogNode.value && dialogNode.value.contains(document.activeElement)) {
        focusFirstFocusableNode(dialogNode.value);
      }
      emit("entered");
    });
    onBeforeUnmount(() => {
      emit("exited");
    });
    const handleKeyDown = () => {
      closing.value = true;
      emit("closing", true);
    };
    const handleKeyUp = () => {
      closing.value = false;
      emit("closing", false);
      emit("close");
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref: "containerNode",
        "data-polaris-layer": "",
        "data-polaris-overlay": "",
        class: normalizeClass(unref(styles$F).Container)
      }, [
        createVNode(unref(_sfc_main$3), null, {
          default: withCtx(() => [
            createBaseVNode("div", {
              role: "dialog",
              tabindex: "-1",
              "aria-modal": "",
              "aria-label": _ctx.labelledBy,
              "aria-labelledby": _ctx.labelledBy,
              class: normalizeClass(unref(styles$F).Dialog)
            }, [
              createBaseVNode("div", {
                class: normalizeClass(classes.value)
              }, [
                createVNode(unref(_sfc_main$1p), {
                  "key-event": "keydown",
                  "key-code": unref(Key).Escape,
                  handler: handleKeyDown
                }, null, 8, ["key-code"]),
                createVNode(unref(_sfc_main$1p), {
                  "key-code": unref(Key).Escape,
                  handler: handleKeyUp
                }, null, 8, ["key-code"]),
                renderSlot(_ctx.$slots, "default")
              ], 2)
            ], 10, _hoisted_1$y)
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
const _sfc_main$17 = /* @__PURE__ */ defineComponent({
  __name: "Footer",
  props: {
    primaryAction: {},
    secondaryActions: {}
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1r), {
        gap: "400",
        "block-align": "center"
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$2B), {
            "border-color": "border",
            "border-block-start-width": "025",
            padding: "400",
            width: "100%"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1r), {
                gap: "400",
                "block-align": "center",
                align: "space-between"
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$2B), null, {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  }),
                  _ctx.primaryAction || _ctx.secondaryActions ? (openBlock(), createBlock(unref(_sfc_main$1r), {
                    key: 0,
                    gap: "200"
                  }, {
                    default: withCtx(() => [
                      _ctx.secondaryActions ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.secondaryActions, (action, index) => {
                        return openBlock(), createBlock(unref(_sfc_main$2s), {
                          key: String(index),
                          action
                        }, null, 8, ["action"]);
                      }), 128)) : createCommentVNode("", true),
                      _ctx.primaryAction ? (openBlock(), createBlock(unref(_sfc_main$2s), {
                        key: 1,
                        action: _ctx.primaryAction,
                        overrides: { variant: "primary" }
                      }, null, 8, ["action"])) : createCommentVNode("", true)
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ]),
                _: 3
              })
            ]),
            _: 3
          })
        ]),
        _: 3
      });
    };
  }
});
const headerPaddingInline = "400";
const headerPaddingBlock = "400";
const _sfc_main$16 = /* @__PURE__ */ defineComponent({
  __name: "Header",
  props: {
    id: {},
    titleHidden: { type: Boolean },
    closing: { type: Boolean }
  },
  emits: ["close"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const isDefaultSlotUsed = computed(() => hasSlot(slots.default));
    return (_ctx, _cache) => {
      return _ctx.titleHidden || !isDefaultSlotUsed.value ? (openBlock(), createBlock(unref(_sfc_main$2B), {
        key: 0,
        position: "absolute",
        "inset-inline-end": headerPaddingInline,
        "inset-block-start": headerPaddingBlock,
        "z-index": "1"
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$19), {
            onClick: _cache[0] || (_cache[0] = ($event) => emits("close"))
          })
        ]),
        _: 1
      })) : (openBlock(), createBlock(unref(_sfc_main$2B), {
        key: 1,
        "padding-block-start": "400",
        "padding-block-end": "400",
        "padding-inline-start": headerPaddingInline,
        "padding-inline-end": headerPaddingBlock,
        "border-block-end-width": "025",
        "border-color": "border",
        background: "bg-surface-tertiary"
      }, {
        default: withCtx(() => [
          createVNode(unref(_sfc_main$1s), {
            gap: "400",
            columns: { xs: "1fr auto" }
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1r), {
                gap: "400",
                "block-align": "center"
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$f), {
                    "break-word": "",
                    as: "h2",
                    variant: "headingMd",
                    id: _ctx.id
                  }, {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  }, 8, ["id"])
                ]),
                _: 3
              }),
              createVNode(unref(_sfc_main$19), {
                pressed: _ctx.closing,
                onClick: _cache[1] || (_cache[1] = ($event) => emits("close"))
              }, null, 8, ["pressed"])
            ]),
            _: 3
          })
        ]),
        _: 3
      }));
    };
  }
});
const Section$1 = "Polaris-Modal-Section";
const titleHidden = "Polaris-Modal-Section--titleHidden";
const styles$E = {
  Section: Section$1,
  titleHidden
};
const _sfc_main$15 = /* @__PURE__ */ defineComponent({
  __name: "Section",
  props: {
    flush: { type: Boolean, default: false },
    subdued: { type: Boolean, default: false },
    titleHidden: { type: Boolean, default: false }
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles$E.Section,
      props.titleHidden && styles$E.titleHidden
    ));
    const additionalAttrs = computed(() => {
      const attrs = {};
      if (props.titleHidden) {
        attrs["padding-inline-end"] = "0";
      }
      if (props.subdued) {
        attrs["background"] = "bg-surface-tertiary";
      }
      return attrs;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createVNode(unref(_sfc_main$2B), mergeProps({
          as: "section",
          padding: _ctx.flush ? "0" : "400"
        }, additionalAttrs.value), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["padding"])
      ], 2);
    };
  }
});
const _hoisted_1$x = ["name", "title", "src"];
const IFRAME_LOADING_HEIGHT = 200;
const DEFAULT_IFRAME_CONTENT_HEIGHT = 400;
const _sfc_main$14 = /* @__PURE__ */ defineComponent({
  __name: "Modal",
  props: {
    open: { type: Boolean },
    src: {},
    iFrameName: {},
    titleHidden: { type: Boolean, default: false },
    sectioned: { type: Boolean },
    size: {},
    limitHeight: { type: Boolean },
    loading: { type: Boolean },
    noScroll: { type: Boolean },
    primaryAction: {},
    secondaryActions: {}
  },
  emits: ["iframe-load", "transition-end", "scrolled-to-bottom", "close"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const i18n = useI18n();
    const headerId = String(useId());
    const iframeTitle = i18n.translate("Polaris.Modal.iframeTitle");
    const activatorNode = ref(null);
    const iframeHeight = ref(IFRAME_LOADING_HEIGHT);
    const closing = ref(false);
    const handleIframeLoad = (evt) => {
      const iframe = evt.target;
      if (iframe && iframe.contentWindow) {
        try {
          iframeHeight.value = iframe.contentWindow.document.body.scrollHeight;
        } catch (_error) {
          iframeHeight.value = DEFAULT_IFRAME_CONTENT_HEIGHT;
        }
      }
      emits("iframe-load", evt);
    };
    const handleEntered = () => {
      emits("transition-end");
    };
    const handleExited = () => {
      iframeHeight.value = IFRAME_LOADING_HEIGHT;
      const node = activatorNode.value;
      if (node) {
        requestAnimationFrame(() => focusFirstFocusableNode(node));
      }
    };
    const setClosing = (newVal) => {
      closing.value = newVal;
    };
    provide("within-content-context", true);
    return (_ctx, _cache) => {
      const _component_Box = resolveComponent("Box");
      const _component_InlineStack = resolveComponent("InlineStack");
      return openBlock(), createElementBlock(Fragment, null, [
        unref(hasSlot)(unref(slots).activator) ? (openBlock(), createBlock(_component_Box, {
          key: 0,
          ref: "activatorRef"
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "activator")
          ]),
          _: 3
        }, 512)) : createCommentVNode("", true),
        _ctx.open ? (openBlock(), createBlock(unref(_sfc_main$L), {
          key: 1,
          "id-prefix": "modal"
        }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$18), {
              "labelled-by": unref(headerId),
              size: _ctx.size,
              "limit-height": _ctx.limitHeight,
              onClose: _cache[2] || (_cache[2] = ($event) => emits("close")),
              onClosing: setClosing,
              onEntered: handleEntered,
              onExited: handleExited
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$16), {
                  "title-hidden": _ctx.titleHidden,
                  id: unref(headerId),
                  closing: closing.value,
                  onClose: _cache[0] || (_cache[0] = ($event) => emits("close"))
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "title")
                  ]),
                  _: 3
                }, 8, ["title-hidden", "id", "closing"]),
                _ctx.src ? (openBlock(), createElementBlock("iframe", {
                  key: 0,
                  name: _ctx.iFrameName,
                  title: unref(iframeTitle),
                  src: _ctx.src,
                  class: normalizeClass(unref(styles$G).Iframe),
                  style: normalizeStyle({ height: `${iframeHeight.value}px` }),
                  onLoad: handleIframeLoad
                }, null, 46, _hoisted_1$x)) : _ctx.noScroll ? (openBlock(), createElementBlock("div", {
                  key: 1,
                  class: normalizeClass(unref(styles$G).noScrollBody)
                }, [
                  createVNode(_component_Box, {
                    width: "100%",
                    "overflow-x": "hidden",
                    "overflow-y": "hidden"
                  }, {
                    default: withCtx(() => [
                      _ctx.loading ? (openBlock(), createBlock(_component_Box, {
                        key: 0,
                        padding: "400"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_InlineStack, {
                            gap: "400",
                            align: "center",
                            "block-align": "center"
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(_sfc_main$r))
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        _ctx.sectioned ? (openBlock(), createBlock(unref(_sfc_main$15), {
                          key: 0,
                          "title-hidden": _ctx.titleHidden
                        }, {
                          default: withCtx(() => [
                            renderSlot(_ctx.$slots, "default")
                          ]),
                          _: 3
                        }, 8, ["title-hidden"])) : renderSlot(_ctx.$slots, "default", { key: 1 })
                      ], 64))
                    ]),
                    _: 3
                  })
                ], 2)) : (openBlock(), createBlock(unref(_sfc_main$B), {
                  key: 2,
                  shadow: "",
                  class: normalizeClass(unref(styles$G).Body),
                  onScrolledToBottom: _cache[1] || (_cache[1] = ($event) => emits("scrolled-to-bottom"))
                }, {
                  default: withCtx(() => [
                    _ctx.loading ? (openBlock(), createBlock(_component_Box, {
                      key: 0,
                      padding: "400"
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_InlineStack, {
                          gap: "400",
                          align: "center",
                          "block-align": "center"
                        }, {
                          default: withCtx(() => [
                            createVNode(unref(_sfc_main$r))
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      _ctx.sectioned ? (openBlock(), createBlock(unref(_sfc_main$15), {
                        key: 0,
                        "title-hidden": _ctx.titleHidden
                      }, {
                        default: withCtx(() => [
                          renderSlot(_ctx.$slots, "default")
                        ]),
                        _: 3
                      }, 8, ["title-hidden"])) : renderSlot(_ctx.$slots, "default", { key: 1 })
                    ], 64))
                  ]),
                  _: 3
                }, 8, ["class"])),
                unref(hasSlot)(unref(slots).footer) || _ctx.primaryAction || _ctx.secondaryActions ? (openBlock(), createBlock(unref(_sfc_main$17), {
                  key: 3,
                  "primary-action": _ctx.primaryAction,
                  "secondary-actions": _ctx.secondaryActions
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "footer")
                  ]),
                  _: 3
                }, 8, ["primary-action", "secondary-actions"])) : createCommentVNode("", true)
              ]),
              _: 3
            }, 8, ["labelled-by", "size", "limit-height"]),
            createVNode(unref(_sfc_main$2K), {
              onClosing: setClosing,
              onClick: _cache[3] || (_cache[3] = ($event) => emits("close"))
            })
          ]),
          _: 3
        })) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const Option = "Polaris-OptionList-Option";
const SingleSelectOption = "Polaris-OptionList-Option__SingleSelectOption";
const focused$1 = "Polaris-OptionList-Option--focused";
const active = "Polaris-OptionList-Option--active";
const disabled$6 = "Polaris-OptionList-Option--disabled";
const select = "Polaris-OptionList-Option--select";
const Media = "Polaris-OptionList-Option__Media";
const Label$2 = "Polaris-OptionList-Option__Label";
const MultiSelectOption = "Polaris-OptionList-Option__MultiSelectOption";
const CheckboxLabel = "Polaris-OptionList-Option__CheckboxLabel";
const verticalAlignTop = "Polaris-OptionList-Option--verticalAlignTop";
const verticalAlignCenter = "Polaris-OptionList-Option--verticalAlignCenter";
const verticalAlignBottom = "Polaris-OptionList-Option--verticalAlignBottom";
const Icon$1 = "Polaris-OptionList-Option__Icon";
const Checkbox = "Polaris-OptionList-Option__Checkbox";
const styles$D = {
  Option,
  SingleSelectOption,
  focused: focused$1,
  active,
  disabled: disabled$6,
  select,
  Media,
  Label: Label$2,
  MultiSelectOption,
  CheckboxLabel,
  verticalAlignTop,
  verticalAlignCenter,
  verticalAlignBottom,
  Icon: Icon$1,
  Checkbox
};
const _hoisted_1$w = ["htmlFor"];
const _hoisted_2$l = ["id"];
const _hoisted_3$f = ["id", "disabled", "aria-pressed"];
const _hoisted_4$a = ["id"];
const _sfc_main$13 = /* @__PURE__ */ defineComponent({
  __name: "Option",
  props: {
    id: {},
    value: {},
    section: {},
    index: {},
    media: { type: [String, Number, Boolean, null] },
    disabled: { type: Boolean },
    active: { type: Boolean },
    select: { type: Boolean },
    allowMultiple: { type: Boolean },
    verticalAlign: {}
  },
  emits: ["click", "pointer-enter", "focus"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const {
      value: focused2,
      toggle: toggleFocused
    } = useToggle(false);
    const singleSelectClassName = computed(() => {
      return classNames(
        styles$D.SingleSelectOption,
        focused2.value && styles$D.focused,
        props.disabled && styles$D.disabled,
        props.select && styles$D.select,
        props.active && styles$D.active,
        props.verticalAlign && styles$D[variationName("verticalAlign", props.verticalAlign)]
      );
    });
    const multiSelectClassName = computed(() => {
      return classNames(
        styles$D.Label,
        props.disabled && styles$D.disabled,
        props.active && styles$D.active,
        props.select && styles$D.select,
        props.verticalAlign && styles$D[variationName("verticalAlign", props.verticalAlign)],
        props.allowMultiple && styles$D.CheckboxLabel,
        props.allowMultiple && styles$D.MultiSelectOption
      );
    });
    const handleClick = () => {
      if (props.disabled)
        return;
      emits("click", props.section, props.index);
    };
    const handlePointerEnter = () => {
      if (props.disabled)
        return;
      emits("pointer-enter", props.section, props.index);
    };
    const handleFocus = () => {
      toggleFocused();
      emits("focus", props.section, props.index);
    };
    function verticalAlignToBlockAlign(verticalAlign) {
      switch (verticalAlign) {
        case "top":
          return "start";
        case "center":
          return "center";
        case "bottom":
          return "end";
        default:
          return "start";
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        key: _ctx.id,
        class: normalizeClass(unref(styles$D).Option),
        tabIndex: -1,
        onPointerEnter: handlePointerEnter
      }, [
        _ctx.active ? (openBlock(), createBlock(unref(_sfc_main$C), { key: 0 })) : createCommentVNode("", true),
        _ctx.allowMultiple ? (openBlock(), createElementBlock("label", {
          key: 1,
          htmlFor: _ctx.id,
          class: normalizeClass(multiSelectClassName.value)
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(styles$D).Checkbox)
          }, [
            createVNode(unref(_sfc_main$2l), {
              label: "",
              ariaDescribedBy: `${_ctx.id}-label`,
              id: _ctx.id,
              checked: _ctx.select,
              disabled: _ctx.disabled,
              "model-value": _ctx.select,
              onChange: handleClick
            }, null, 8, ["ariaDescribedBy", "id", "checked", "disabled", "model-value"])
          ], 2),
          _ctx.media ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles$D).Media)
          }, [
            (openBlock(), createBlock(resolveDynamicComponent(_ctx.media)))
          ], 2)) : createCommentVNode("", true),
          createBaseVNode("span", {
            id: `${_ctx.id}-label`
          }, [
            renderSlot(_ctx.$slots, "label")
          ], 8, _hoisted_2$l)
        ], 10, _hoisted_1$w)) : (openBlock(), createElementBlock("button", {
          key: 2,
          id: _ctx.id,
          type: "button",
          class: normalizeClass(singleSelectClassName.value),
          disabled: _ctx.disabled,
          "aria-pressed": _ctx.active || _ctx.select,
          onClick: handleClick,
          onFocus: handleFocus,
          onBlur: _cache[0] || (_cache[0] = //@ts-ignore
          (...args) => unref(toggleFocused) && unref(toggleFocused)(...args))
        }, [
          createVNode(unref(_sfc_main$1r), {
            wrap: false,
            "block-align": verticalAlignToBlockAlign(_ctx.verticalAlign)
          }, {
            default: withCtx(() => [
              _ctx.media ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(styles$D).Media)
              }, [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.media)))
              ], 2)) : createCommentVNode("", true),
              createBaseVNode("span", {
                id: `${_ctx.id}-label`
              }, [
                renderSlot(_ctx.$slots, "label")
              ], 8, _hoisted_4$a)
            ]),
            _: 3
          }, 8, ["block-align"]),
          _ctx.select || _ctx.active ? (openBlock(), createElementBlock("span", {
            key: 0,
            class: normalizeClass(unref(styles$D).Icon)
          }, [
            createVNode(unref(_sfc_main$1K), { source: unref(CheckIcon) }, null, 8, ["source"])
          ], 2)) : createCommentVNode("", true)
        ], 42, _hoisted_3$f))
      ], 34);
    };
  }
});
const _sfc_main$12 = /* @__PURE__ */ defineComponent({
  __name: "OptionList",
  props: {
    id: {},
    title: {},
    options: {},
    role: {},
    optionRole: {},
    sections: {},
    selected: {},
    allowMultiple: { type: Boolean },
    verticalAlign: {}
  },
  emits: ["change", "pointer-enter-option", "focus-option"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const uniqueId = useId();
    const normalizedOptions = ref(createNormalizedOptions(props.options, props.sections, props.title));
    const id = computed(() => props.id || String(uniqueId));
    const optionsExist = computed(() => normalizedOptions.value.length > 0);
    const handleClick = (sectionIndex, optionIndex) => {
      var _a, _b, _c, _d;
      const selectedValue = normalizedOptions.value[sectionIndex].options[optionIndex].value;
      const foundIndex = (_a = props.selected) == null ? void 0 : _a.indexOf(selectedValue);
      if (props.allowMultiple) {
        const newSelection = foundIndex === -1 ? [selectedValue, ...props.selected || []] : [
          ...((_b = props.selected) == null ? void 0 : _b.slice(0, foundIndex)) || [],
          ...((_d = props.selected) == null ? void 0 : _d.slice((foundIndex || 0) + 1, (_c = props.selected) == null ? void 0 : _c.length)) || []
        ];
        emits("change", newSelection);
        return;
      }
      emits("change", [selectedValue]);
    };
    const handlePointerEnter = (sectionIndex, optionIndex) => {
      const selectedValue = normalizedOptions.value[sectionIndex].options[optionIndex].value;
      emits("pointer-enter-option", selectedValue);
    };
    const handleFocus = (sectionIndex, optionIndex) => {
      const selectedValue = normalizedOptions.value[sectionIndex].options[optionIndex].value;
      emits("focus-option", selectedValue);
    };
    function createNormalizedOptions(options, sections, title) {
      if (!options || !options.length) {
        const section = title ? [{ options: [], title }] : [];
        return !sections || !sections.length ? [] : [...section, ...sections];
      }
      if (!sections || !sections.length) {
        return [
          {
            title,
            options
          }
        ];
      }
      return [
        {
          title,
          options
        },
        ...sections
      ];
    }
    watch(
      () => [props.options, props.sections, props.title],
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          normalizedOptions.value = createNormalizedOptions(props.options || [], props.sections || [], props.title);
        }
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2B), {
        as: "ul",
        role: _ctx.role,
        padding: "150"
      }, {
        default: withCtx(() => [
          optionsExist.value ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(normalizedOptions.value, ({ title, options }, sectionIndex) => {
            return openBlock(), createBlock(unref(_sfc_main$2B), {
              key: title || `noTitle-${sectionIndex}`,
              as: "li",
              "padding-block-start": sectionIndex === 0 ? title ? "100" : "0" : title ? "050" : "0"
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$2C), {
                  gap: sectionIndex === 0 && _ctx.sections ? void 0 : "0"
                }, {
                  default: withCtx(() => [
                    title ? (openBlock(), createBlock(unref(_sfc_main$2B), {
                      key: 0,
                      "padding-block-start": sectionIndex === 0 ? "050" : "300",
                      "padding-inline-start": "150",
                      "padding-block-end": "100",
                      "padding-inline-end": "150",
                      "border-secondary": "border-secondary"
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$f), {
                          as: sectionIndex === 0 ? "h2" : "h3",
                          variant: "headingSm"
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(title), 1)
                          ]),
                          _: 2
                        }, 1032, ["as"])
                      ]),
                      _: 2
                    }, 1032, ["padding-block-start"])) : createCommentVNode("", true),
                    createVNode(unref(_sfc_main$2B), {
                      as: "ul",
                      id: `${id.value}-${sectionIndex}`,
                      role: _ctx.role
                    }, {
                      default: withCtx(() => [
                        options ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(options, (option, optionIndex) => {
                          return openBlock(), createBlock(unref(_sfc_main$13), mergeProps(option, {
                            key: option.id || `${unref(uniqueId)}-${sectionIndex}-${optionIndex}`,
                            id: option.id || `${unref(uniqueId)}-${sectionIndex}-${optionIndex}`,
                            section: sectionIndex,
                            index: optionIndex,
                            select: _ctx.selected.includes(option.value),
                            "allow-multiple": _ctx.allowMultiple,
                            "vertical-align": _ctx.verticalAlign,
                            onClick: handleClick,
                            onPointerEnter: handlePointerEnter,
                            onFocus: handleFocus
                          }), {
                            label: withCtx(() => [
                              unref(slots)[`option-label-${option.id}`] ? renderSlot(_ctx.$slots, `option-label-${option.id}`, { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                                createTextVNode(toDisplayString(option.label), 1)
                              ], 64))
                            ]),
                            _: 2
                          }, 1040, ["id", "section", "index", "select", "allow-multiple", "vertical-align"]);
                        }), 128)) : createCommentVNode("", true)
                      ]),
                      _: 2
                    }, 1032, ["id", "role"])
                  ]),
                  _: 2
                }, 1032, ["gap"])
              ]),
              _: 2
            }, 1032, ["padding-block-start"]);
          }), 128)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["role"]);
    };
  }
});
const Page = "Polaris-Page";
const fullWidth$1 = "Polaris-Page--fullWidth";
const narrowWidth = "Polaris-Page--narrowWidth";
const Content$3 = "Polaris-Page__Content";
const styles$C = {
  Page,
  fullWidth: fullWidth$1,
  narrowWidth,
  Content: Content$3
};
const TitleWrapper$1 = "Polaris-Page-Header__TitleWrapper";
const TitleWrapperExpand = "Polaris-Page-Header__TitleWrapperExpand";
const BreadcrumbWrapper = "Polaris-Page-Header__BreadcrumbWrapper";
const PaginationWrapper$1 = "Polaris-Page-Header__PaginationWrapper";
const PrimaryActionWrapper = "Polaris-Page-Header__PrimaryActionWrapper";
const Row = "Polaris-Page-Header__Row";
const mobileView = "Polaris-Page-Header--mobileView";
const RightAlign = "Polaris-Page-Header__RightAlign";
const noBreadcrumbs = "Polaris-Page-Header--noBreadcrumbs";
const AdditionalMetaData = "Polaris-Page-Header__AdditionalMetaData";
const Actions$1 = "Polaris-Page-Header__Actions";
const longTitle = "Polaris-Page-Header--longTitle";
const mediumTitle = "Polaris-Page-Header--mediumTitle";
const isSingleRow = "Polaris-Page-Header--isSingleRow";
const styles$B = {
  TitleWrapper: TitleWrapper$1,
  TitleWrapperExpand,
  BreadcrumbWrapper,
  PaginationWrapper: PaginationWrapper$1,
  PrimaryActionWrapper,
  Row,
  mobileView,
  RightAlign,
  noBreadcrumbs,
  AdditionalMetaData,
  Actions: Actions$1,
  longTitle,
  mediumTitle,
  isSingleRow
};
const _sfc_main$11 = /* @__PURE__ */ defineComponent({
  __name: "PrimaryAction",
  props: {
    primary: { type: Boolean },
    destructive: { type: Boolean },
    id: {},
    content: {},
    accessibilityLabel: {},
    url: {},
    external: { type: Boolean },
    target: {},
    onAction: { type: Function },
    onMouseEnter: { type: Function },
    onTouchStart: { type: Function },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    icon: {},
    helpText: { type: [String, Number, Boolean, null] }
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const { isNavigationCollapsed } = useMediaQueryContext();
    const primary = computed(() => {
      return !props.primary ? true : props.primary;
    });
    const iconOnly2 = computed(() => {
      return shouldShowIconOnly(isNavigationCollapsed.value, props);
    });
    function shouldShowIconOnly(isMobile, action) {
      let { content, accessibilityLabel, icon } = action;
      if (icon == null) {
        return { ...action, icon: void 0 };
      }
      if (isMobile) {
        accessibilityLabel = accessibilityLabel || content;
        content = void 0;
      } else {
        icon = void 0;
      }
      return {
        ...action,
        content,
        accessibilityLabel,
        icon
      };
    }
    return (_ctx, _cache) => {
      const _component_ButtonFrom = resolveComponent("ButtonFrom");
      const _component_Tooltip = resolveComponent("Tooltip");
      const _component_Box = resolveComponent("Box");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$B).PrimaryActionWrapper)
      }, [
        createVNode(_component_Box, { printHidden: "" }, {
          default: withCtx(() => [
            unref(hasSlot)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 0 }) : _ctx.helpText ? (openBlock(), createBlock(_component_Tooltip, {
              key: 1,
              content: _ctx.helpText
            }, {
              default: withCtx(() => [
                createVNode(_component_ButtonFrom, {
                  action: iconOnly2.value,
                  overrides: { variant: primary.value ? "primary" : void 0 },
                  onAction: _cache[0] || (_cache[0] = () => {
                    _ctx.onAction && _ctx.onAction();
                  }),
                  onMouseenter: _cache[1] || (_cache[1] = () => {
                    _ctx.onMouseEnter && _ctx.onMouseEnter();
                  }),
                  onTouchstart: _cache[2] || (_cache[2] = () => {
                    _ctx.onTouchStart && _ctx.onTouchStart();
                  })
                }, null, 8, ["action", "overrides"])
              ]),
              _: 1
            }, 8, ["content"])) : (openBlock(), createBlock(_component_ButtonFrom, {
              key: 2,
              action: iconOnly2.value,
              overrides: { variant: primary.value ? "primary" : void 0 },
              onAction: _cache[3] || (_cache[3] = () => {
                _ctx.onAction && _ctx.onAction();
              }),
              onMouseenter: _cache[4] || (_cache[4] = () => {
                _ctx.onMouseEnter && _ctx.onMouseEnter();
              }),
              onTouchstart: _cache[5] || (_cache[5] = () => {
                _ctx.onTouchStart && _ctx.onTouchStart();
              })
            }, null, 8, ["action", "overrides"]))
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
const ActionsLayoutOuter = "Polaris-ActionMenu-Actions__ActionsLayoutOuter";
const ActionsLayout = "Polaris-ActionMenu-Actions__ActionsLayout";
const ActionsLayoutMeasurer = "Polaris-ActionMenu-Actions__ActionsLayoutMeasurer";
const styles$A = {
  ActionsLayoutOuter,
  ActionsLayout,
  "ActionsLayout--measuring": "Polaris-ActionMenu-Actions--actionsLayoutMeasuring",
  ActionsLayoutMeasurer
};
const SecondaryAction = "Polaris-ActionMenu-SecondaryAction";
const critical$1 = "Polaris-ActionMenu-SecondaryAction--critical";
const styles$z = {
  SecondaryAction,
  critical: critical$1
};
const _sfc_main$10 = /* @__PURE__ */ defineComponent({
  __name: "SecondaryAction",
  props: {
    helpText: {},
    destructive: { type: Boolean },
    size: {},
    textAlign: {},
    fullWidth: { type: Boolean },
    disclosure: { type: [String, Boolean] },
    removeUnderline: { type: Boolean },
    icon: {},
    dataPrimaryLink: { type: Boolean },
    tone: {},
    variant: {},
    id: {},
    url: {},
    external: { type: Boolean },
    target: {},
    download: { type: [String, Boolean] },
    submit: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    pressed: { type: Boolean },
    accessibilityLabel: {},
    role: {},
    ariaControls: {},
    ariaExpanded: { type: Boolean },
    ariaDescribedBy: {},
    ariaChecked: {}
  },
  emits: ["click", "get-offset-width"],
  setup(__props, { emit: __emit }) {
    const slots = useSlots();
    const props = __props;
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const secondaryActionsRef = ref(null);
    const className = computed(
      () => classNames(
        styles$z.SecondaryAction,
        props.tone === "critical" && styles$z.critical
      )
    );
    onMounted(() => {
      var _a;
      onGetOffsetWidth(((_a = secondaryActionsRef.value) == null ? void 0 : _a.offsetWidth) || 0);
    });
    const onGetOffsetWidth = (width2) => {
      if (secondaryActionsRef.value) {
        emits("get-offset-width", width2);
      }
    };
    return (_ctx, _cache) => {
      const _component_Button = resolveComponent("Button");
      const _component_Tooltip = resolveComponent("Tooltip");
      return openBlock(), createElementBlock("div", {
        ref_key: "secondaryActionsRef",
        ref: secondaryActionsRef,
        class: normalizeClass(className.value)
      }, [
        _ctx.helpText || unref(hasSlot)(unref(slots).helpText) ? (openBlock(), createBlock(_component_Tooltip, {
          key: 0,
          preferredPosition: "below",
          content: _ctx.helpText || ""
        }, createSlots({
          default: withCtx(() => [
            createVNode(_component_Button, mergeProps(props, {
              onClick: _cache[0] || (_cache[0] = ($event) => emits("click")),
              tone: _ctx.destructive ? "critical" : void 0
            }), {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 16, ["tone"])
          ]),
          _: 2
        }, [
          unref(hasSlot)(unref(slots).helpText) ? {
            name: "content",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "helpText")
            ]),
            key: "0"
          } : void 0
        ]), 1032, ["content"])) : (openBlock(), createBlock(_component_Button, mergeProps({ key: 1 }, props, {
          tone: _ctx.destructive ? "critical" : void 0,
          onClick: _cache[1] || (_cache[1] = ($event) => emits("click"))
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["tone"]))
      ], 2);
    };
  }
});
const Details = "Polaris-ActionMenu-MenuGroup__Details";
const styles$y = {
  Details
};
const __default__ = {
  inheritAttrs: false
};
const _sfc_main$$ = /* @__PURE__ */ defineComponent({
  ...__default__,
  __name: "MenuGroup",
  props: {
    badge: {},
    title: {},
    actions: {},
    icon: {},
    index: {},
    accessibilityLabel: {},
    active: { type: Boolean },
    disabled: { type: Boolean },
    sections: {}
  },
  emits: ["click", "open", "close", "get-offset-width"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const handleClose = () => {
      emits("close", props.title);
    };
    const handleClick = () => {
      emits("click");
      emits("open", props.title);
    };
    const handleOffsetWidth = (width2) => {
      emits("get-offset-width", width2);
    };
    return (_ctx, _cache) => {
      const _component_ActionList = resolveComponent("ActionList");
      const _component_Popover = resolveComponent("Popover");
      return _ctx.actions.length ? (openBlock(), createBlock(_component_Popover, {
        key: 0,
        active: Boolean(_ctx.active),
        "preferred-alignment": "left",
        hideOnPrint: "",
        onClose: handleClose
      }, {
        activator: withCtx(() => [
          createVNode(unref(_sfc_main$10), {
            disclosure: true,
            icon: _ctx.icon,
            accessibilityLabel: _ctx.accessibilityLabel,
            disabled: _ctx.disabled,
            onClick: handleClick,
            onGetOffsetWidth: handleOffsetWidth
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ]),
            _: 1
          }, 8, ["icon", "accessibilityLabel", "disabled"])
        ]),
        default: withCtx(() => [
          createVNode(_component_ActionList, {
            items: _ctx.actions,
            sections: _ctx.sections,
            onActionAnyItem: handleClose
          }, null, 8, ["items", "sections"]),
          unref(slots).default ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles$y).Details)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)) : createCommentVNode("", true)
        ]),
        _: 3
      }, 8, ["active"])) : createCommentVNode("", true);
    };
  }
});
const ACTION_SPACING = 8;
const _sfc_main$_ = /* @__PURE__ */ defineComponent({
  __name: "Actions",
  props: {
    actions: {},
    groups: {}
  },
  emits: ["action-rollup"],
  setup(__props, { emit: __emit }) {
    const i18n = useI18n();
    const props = __props;
    const emits = __emit;
    const actionsLayoutRef = ref(null);
    const menuGroupWidth = ref(0);
    const availableWidth = ref(0);
    const actionsAndGroupsLength = ref(0);
    const timesMeasured = ref(0);
    const actionWidths = ref([]);
    const rollupActiveRef = ref(null);
    const activeMenuGroup = ref(null);
    const measuredActions = ref({
      showable: [],
      rolledUp: []
    });
    const defaultRollupGroup = ref({
      title: i18n.translate("Polaris.ActionMenu.Actions.moreActions"),
      actions: []
    });
    const lastMenuGroup = computed(() => {
      if (props.groups && props.groups.length) {
        return [...props.groups].pop();
      }
      return [];
    });
    const lastMenuGroupWidth = computed(() => [...actionWidths.value].pop() || 0);
    const getSecondaryActionProps = (index) => {
      var _a;
      return (_a = props.actions) == null ? void 0 : _a[index];
    };
    const handleActionsOffsetWidth = (width2) => {
      actionWidths.value = [...actionWidths.value, width2];
    };
    const handleMenuGroupToggle = (group) => {
      if (activeMenuGroup.value) {
        activeMenuGroup.value = null;
      } else {
        activeMenuGroup.value = group;
      }
    };
    const handleMenuGroupClose = () => {
      activeMenuGroup.value = null;
    };
    const combinedGroups = computed(() => {
      if (props.groups) {
        return [...props.groups, defaultRollupGroup.value];
      }
      return [defaultRollupGroup.value];
    });
    const filteredGroups = computed(() => {
      return combinedGroups.value.filter((group) => {
        return props.groups && props.groups.length === 0 ? group : group === lastMenuGroup.value || !measuredActions.value.rolledUp.some(
          (rolledUpGroup) => isMenuGroup(rolledUpGroup) && rolledUpGroup.title === group.title
        );
      });
    });
    const finalRolledUp = computed(() => {
      return measuredActions.value.rolledUp.reduce(
        ([actions, sections], action) => {
          if (isMenuGroup(action)) {
            sections.push({
              title: action.title,
              items: action.actions.map((sectionAction) => ({
                ...sectionAction,
                disabled: action.disabled || sectionAction.disabled
              }))
            });
          } else {
            actions.push(action);
          }
          return [actions, sections];
        },
        [[], []]
      );
    });
    const finalRolledUpActions = computed(() => {
      return finalRolledUp.value[0];
    });
    const finalRolledUpSectionGroups = computed(() => finalRolledUp.value[1]);
    const menuGroupProps = (group) => {
      const { actions, ...rest } = group;
      return {
        ...rest,
        active: activeMenuGroup.value === group.title,
        sections: finalRolledUpSectionGroups.value
      };
    };
    const getMenuGroupActions = (group) => {
      const isDefaultGroup = group === defaultRollupGroup.value;
      const isLastMenuGroup = group === lastMenuGroup.value;
      if (!isDefaultGroup && !isLastMenuGroup) {
        return group.actions;
      }
      if (!isDefaultGroup && isLastMenuGroup) {
        return [...finalRolledUpActions.value, ...group.actions];
      }
      if (isDefaultGroup && (!props.groups || props.groups.length === 0) && finalRolledUpActions.value.length) {
        return finalRolledUpActions.value;
      }
      return [];
    };
    const updateActions = () => {
      let actionsAndGroups = [...props.actions || [], ...props.groups || []];
      if (props.groups && props.groups.length > 0) {
        actionsAndGroups = [...actionsAndGroups].slice(
          0,
          actionsAndGroups.length - 1
        );
      }
      const showable = actionsAndGroups.slice(0, measuredActions.value.showable.length);
      const rolledUp = actionsAndGroups.slice(
        measuredActions.value.showable.length,
        actionsAndGroups.length
      );
      measuredActions.value = {
        showable,
        rolledUp
      };
    };
    onUpdated(() => {
      updateActions();
      if (!actionsLayoutRef.value) {
        return;
      }
      availableWidth.value = actionsLayoutRef.value.offsetWidth;
      if (
        // Allow measuring twice
        // This accounts for the initial paint and re-flow
        timesMeasured.value >= 2 && [...props.actions || [], ...props.groups || []].length === actionsAndGroupsLength.value
      ) {
        updateActions();
        return;
      }
      measureActions();
    });
    const measureActions = () => {
      if (actionWidths.value.length === 0 || availableWidth.value === 0) {
        return;
      }
      const actionsAndGroups = [...props.actions || [], ...props.groups || []];
      if (actionsAndGroups.length === 1) {
        measuredActions.value = {
          showable: actionsAndGroups,
          rolledUp: []
        };
        return;
      }
      let currentAvailableWidth = availableWidth.value;
      let newShowableActions = [];
      let newRolledUpActions = [];
      actionsAndGroups.forEach((action, index) => {
        const canFitAction = actionWidths.value[index] + menuGroupWidth.value + ACTION_SPACING + lastMenuGroupWidth.value <= currentAvailableWidth;
        if (canFitAction) {
          currentAvailableWidth -= actionWidths.value[index] + ACTION_SPACING * 2;
          newShowableActions = [...newShowableActions, action];
        } else {
          currentAvailableWidth = 0;
          if (action === lastMenuGroup)
            return;
          newRolledUpActions = [...newRolledUpActions, action];
        }
      });
      const isRollupActive = newShowableActions.length < actionsAndGroups.length - 1;
      if (rollupActiveRef.value !== isRollupActive) {
        emits("action-rollup", isRollupActive);
        rollupActiveRef.value = isRollupActive;
      }
      measuredActions.value = {
        showable: newShowableActions,
        rolledUp: newRolledUpActions
      };
      timesMeasured.value += 1;
      actionsAndGroupsLength.value = actionsAndGroups.length;
    };
    const handleResize = () => {
      debounce(
        () => {
          if (!actionsLayoutRef.value)
            return;
          availableWidth.value = actionsLayoutRef.value.offsetWidth;
          timesMeasured.value = 0;
          measureActions();
        },
        50,
        { leading: false, trailing: true }
      );
    };
    const isMenuGroup = (actionOrMenuGroup) => {
      return "title" in actionOrMenuGroup;
    };
    return (_ctx, _cache) => {
      const _component_ButtonGroup = resolveComponent("ButtonGroup");
      const _component_EventListener = resolveComponent("EventListener");
      return openBlock(), createElementBlock("div", {
        ref_key: "actionsLayoutRef",
        ref: actionsLayoutRef,
        class: normalizeClass(unref(styles$A).ActionsLayout)
      }, [
        createVNode(_component_ButtonGroup, { gap: "tight" }, {
          default: withCtx(() => [
            measuredActions.value.showable.length > 0 ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(measuredActions.value.showable, (action, index) => {
              return openBlock(), createElementBlock(Fragment, {
                key: action.content
              }, [
                action.content ? (openBlock(), createBlock(unref(_sfc_main$10), mergeProps({ key: 0 }, getSecondaryActionProps(index), { onGetOffsetWidth: handleActionsOffsetWidth }), {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(action.content), 1)
                  ]),
                  _: 2
                }, 1040)) : createCommentVNode("", true)
              ], 64);
            }), 128)) : createCommentVNode("", true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actions, (action, index) => {
              return openBlock(), createElementBlock(Fragment, {
                key: action.content
              }, [
                !measuredActions.value.showable.length && !measuredActions.value.rolledUp.includes(action) ? (openBlock(), createBlock(unref(_sfc_main$10), mergeProps({ key: 0 }, getSecondaryActionProps(index), {
                  onClick: ($event) => {
                    var _a;
                    return ((_a = action.onAction) == null ? void 0 : _a.call(action)) || void 0;
                  },
                  onGetOffsetWidth: handleActionsOffsetWidth
                }), {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(action.content), 1)
                  ]),
                  _: 2
                }, 1040, ["onClick"])) : createCommentVNode("", true)
              ], 64);
            }), 128)),
            (openBlock(true), createElementBlock(Fragment, null, renderList(filteredGroups.value, (group) => {
              return openBlock(), createBlock(unref(_sfc_main$$), mergeProps(menuGroupProps(group), {
                key: group.title,
                title: group.title,
                actions: getMenuGroupActions(group),
                onOpen: handleMenuGroupToggle,
                onClose: handleMenuGroupClose,
                onGetOffsetWidth: handleActionsOffsetWidth
              }), null, 16, ["title", "actions"]);
            }), 128))
          ]),
          _: 1
        }),
        createVNode(_component_EventListener, {
          event: "resize",
          handler: handleResize
        })
      ], 2);
    };
  }
});
const RollupActivator = "Polaris-ActionMenu-RollupActions__RollupActivator";
const styles$x = {
  RollupActivator
};
const _sfc_main$Z = /* @__PURE__ */ defineComponent({
  __name: "RollupActions",
  props: {
    accessibilityLabel: {},
    items: {},
    sections: {}
  },
  setup(__props) {
    const i18n = useI18n();
    const rollupOpen = ref(false);
    const toggleRollupOpen = () => {
      rollupOpen.value = !rollupOpen.value;
    };
    return (_ctx, _cache) => {
      var _a, _b;
      const _component_Button = resolveComponent("Button");
      const _component_ActionList = resolveComponent("ActionList");
      const _component_Popover = resolveComponent("Popover");
      return ((_a = _ctx.items) == null ? void 0 : _a.length) || ((_b = _ctx.sections) == null ? void 0 : _b.length) ? (openBlock(), createBlock(_component_Popover, {
        key: 0,
        active: rollupOpen.value,
        preferredAlignment: "right",
        onClose: toggleRollupOpen,
        hideOnPrint: ""
      }, {
        activator: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(unref(styles$x).RollupActivator)
          }, [
            createVNode(_component_Button, {
              outline: "",
              icon: unref(MenuHorizontalIcon),
              accessibilityLabel: _ctx.accessibilityLabel || unref(i18n).translate("Polaris.ActionMenu.RollupActions.rollupButton"),
              onClick: toggleRollupOpen
            }, null, 8, ["icon", "accessibilityLabel"])
          ], 2)
        ]),
        default: withCtx(() => [
          createVNode(_component_ActionList, {
            items: _ctx.items,
            sections: _ctx.sections,
            onActionAnyItem: toggleRollupOpen
          }, null, 8, ["items", "sections"])
        ]),
        _: 1
      }, 8, ["active"])) : createCommentVNode("", true);
    };
  }
});
const ActionMenu = "Polaris-ActionMenu";
const styles$w = {
  ActionMenu
};
const _sfc_main$Y = /* @__PURE__ */ defineComponent({
  __name: "ActionMenu",
  props: {
    actions: {},
    groups: {},
    rollup: { type: Boolean },
    rollupActionsLabel: {}
  },
  emits: ["action-rollup"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const actionMenuClassNames = computed(
      () => classNames(
        styles$w.ActionMenu,
        props.rollup && styles$w.rollup
      )
    );
    const rollupSections = computed(
      () => {
        var _a;
        return (_a = props.groups) == null ? void 0 : _a.map((group) => convertGroupToSection(group));
      }
    );
    const actionListItems = computed(() => props.actions);
    const convertGroupToSection = ({
      title,
      actions,
      disabled: disabled2
    }) => {
      return {
        title,
        items: actions.map((action) => ({
          ...action,
          disabled: disabled2 || action.disabled
        }))
      };
    };
    const onActionRollUp = (hasRolledUp) => {
      emits("action-rollup", hasRolledUp);
    };
    return (_ctx, _cache) => {
      var _a, _b;
      return ((_a = _ctx.actions) == null ? void 0 : _a.length) !== 0 || ((_b = _ctx.groups) == null ? void 0 : _b.length) !== 0 ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(actionMenuClassNames.value)
      }, [
        _ctx.rollup ? (openBlock(), createBlock(unref(_sfc_main$Z), {
          key: 0,
          accessibilityLabel: _ctx.rollupActionsLabel,
          items: actionListItems.value,
          sections: rollupSections.value
        }, null, 8, ["accessibilityLabel", "items", "sections"])) : (openBlock(), createBlock(unref(_sfc_main$_), {
          key: 1,
          actions: _ctx.actions,
          groups: _ctx.groups,
          onActionRollup: onActionRollUp
        }, null, 8, ["actions", "groups"]))
      ], 2)) : createCommentVNode("", true);
    };
  }
});
const _sfc_main$X = /* @__PURE__ */ defineComponent({
  __name: "ActionMenu",
  props: {
    title: {},
    secondaryActions: {},
    actionGroups: {}
  },
  emits: ["action-rollup"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const { isNavigationCollapsed } = useMediaQueryContext();
    const i18n = useI18n();
    const rollupActionsLabel = computed(
      () => props.title ? i18n.translate("Polaris.Page.Header.rollupActionsLabel", { title: props.title }) : void 0
    );
    const hasActionMenu = computed(
      () => props.secondaryActions && props.secondaryActions.length > 0 || hasGroupsWithActions(props.actionGroups)
    );
    const onActionRollup = (hasRolledUp) => {
      emits("action-rollup", hasRolledUp);
    };
    function hasGroupsWithActions(groups = []) {
      return groups.length === 0 ? false : groups.some((group) => group.actions.length > 0);
    }
    return (_ctx, _cache) => {
      return unref(hasSlot)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 0 }) : hasActionMenu.value ? (openBlock(), createBlock(unref(_sfc_main$Y), {
        key: 1,
        actions: _ctx.secondaryActions,
        groups: _ctx.actionGroups,
        rollup: unref(isNavigationCollapsed),
        rollupActionsLabel: rollupActionsLabel.value,
        onActionRollup
      }, null, 8, ["actions", "groups", "rollup", "rollupActionsLabel"])) : createCommentVNode("", true);
    };
  }
});
const _sfc_main$W = /* @__PURE__ */ defineComponent({
  __name: "Pagination",
  props: {
    pagination: {}
  },
  setup(__props) {
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const { isNavigationCollapsed } = useMediaQueryContext();
    return (_ctx, _cache) => {
      const _component_Pagination = resolveComponent("Pagination", true);
      const _component_Box = resolveComponent("Box");
      return _ctx.pagination && !unref(isNavigationCollapsed) ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(unref(styles$B).PaginationWrapper)
      }, [
        createVNode(_component_Box, { printHidden: "" }, {
          default: withCtx(() => [
            createVNode(_component_Pagination, normalizeProps(guardReactiveProps(_ctx.pagination)), {
              default: withCtx(() => [
                unref(hasSlot)(unref(slots).default) ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("", true)
              ]),
              _: 3
            }, 16)
          ]),
          _: 3
        })
      ], 2)) : createCommentVNode("", true);
    };
  }
});
const Title$1 = "Polaris-Header-Title";
const TitleWithSubtitle = "Polaris-Header-Title__TitleWithSubtitle";
const TitleWrapper = "Polaris-Header-Title__TitleWrapper";
const SubTitle = "Polaris-Header-Title__SubTitle";
const SubtitleCompact = "Polaris-Header-Title__SubtitleCompact";
const SubtitleMaxWidth = "Polaris-Header-Title__SubtitleMaxWidth";
const styles$v = {
  Title: Title$1,
  TitleWithSubtitle,
  TitleWrapper,
  SubTitle,
  SubtitleCompact,
  SubtitleMaxWidth
};
const _sfc_main$V = /* @__PURE__ */ defineComponent({
  __name: "Title",
  props: {
    title: {},
    subtitle: {},
    compactTitle: { type: Boolean },
    hasSubtitleMaxWidth: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles$v.Title,
      props.subtitle && styles$v.TitleWithSubtitle,
      props.hasSubtitleMaxWidth && styles$v.SubtitleMaxWidth
    ));
    return (_ctx, _cache) => {
      const _component_Text = resolveComponent("Text");
      const _component_Bleed = resolveComponent("Bleed");
      return openBlock(), createElementBlock(Fragment, null, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$v).TitleWrapper)
        }, [
          _ctx.title ? (openBlock(), createBlock(_component_Text, {
            key: 0,
            as: "h1",
            class: normalizeClass(className.value)
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ]),
            _: 1
          }, 8, ["class"])) : createCommentVNode("", true),
          createVNode(_component_Bleed, { marginBlock: 100 }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })
        ], 2),
        _ctx.subtitle ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(classNames)(unref(styles$v).SubTitle, _ctx.compactTitle && unref(styles$v).SubtitleCompact))
        }, [
          createVNode(_component_Text, {
            as: "p",
            variant: "bodySm"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.subtitle), 1)
            ]),
            _: 1
          })
        ], 2)) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const _sfc_main$U = /* @__PURE__ */ defineComponent({
  __name: "PageTitle",
  props: {
    title: {},
    subtitle: {},
    compactTitle: { type: Boolean },
    hasSubtitleMaxWidth: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const titleWrapperclassName = computed(() => classNames(
      styles$B.TitleWrapper,
      !props.hasSubtitleMaxWidth && styles$B.TitleWrapperExpand
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(titleWrapperclassName.value)
      }, [
        createVNode(unref(_sfc_main$V), {
          title: _ctx.title,
          subtitle: _ctx.subtitle,
          compactTitle: _ctx.compactTitle,
          hasSubtitleMaxWidth: _ctx.hasSubtitleMaxWidth
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["title", "subtitle", "compactTitle", "hasSubtitleMaxWidth"])
      ], 2);
    };
  }
});
const _hoisted_1$v = {
  key: 0,
  role: "status"
};
const SHORT_TITLE = 20;
const REALLY_SHORT_TITLE = 8;
const LONG_TITLE = 34;
const _sfc_main$T = /* @__PURE__ */ defineComponent({
  __name: "Header",
  props: {
    titleHidden: { type: Boolean },
    pageReadyAccessibilityLabel: {},
    filterActions: { type: Boolean },
    primaryAction: {},
    pagination: {},
    backAction: {},
    secondaryActions: {},
    actionGroups: {},
    additionalMetadata: {},
    title: {},
    subtitle: {},
    compactTitle: { type: Boolean },
    hasSubtitleMaxWidth: { type: Boolean }
  },
  emits: ["action-rollup"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const i18n = useI18n();
    const { isNavigationCollapsed } = useMediaQueryContext();
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const isSingleRow2 = computed(
      () => {
        var _a, _b;
        return (!props.primaryAction || hasSlot(slots.primaryAction)) && !props.pagination && (!((_a = props.secondaryActions) == null ? void 0 : _a.length) || hasSlot(slots.secondaryActions)) && !((_b = props.actionGroups) == null ? void 0 : _b.length);
      }
    );
    const hasActionGroupsOrSecondaryActions = computed(
      () => props.actionGroups && props.actionGroups.length > 0 || props.secondaryActions && props.secondaryActions.length > 0 || hasSlot(slots.secondaryActions)
    );
    const headerClassNames = computed(
      () => classNames(
        isSingleRow2 && styles$B.isSingleRow,
        (props.backAction || props.pagination && !isNavigationCollapsed) && styles$B.hasNavigation,
        (props.secondaryActions && props.secondaryActions.length > 0 || hasGroupsWithActions(props.actionGroups) || hasSlot(slots.secondaryActions)) && styles$B.hasActionMenu,
        isNavigationCollapsed && styles$B.mobileView,
        !props.backAction && styles$B.noBreadcrumbs,
        props.title && props.title.length < LONG_TITLE && styles$B.mediumTitle,
        props.title && props.title.length > LONG_TITLE && styles$B.longTitle
      )
    );
    const labelForPageReadyAccessibilityLabel = computed(
      () => props.pageReadyAccessibilityLabel || props.title
    );
    const conditionMobileCompact = computed(
      () => isNavigationCollapsed && !props.backAction && props.title != null && props.title.length <= REALLY_SHORT_TITLE
    );
    const conditionDesktopCompact = computed(() => {
      return !isNavigationCollapsed && !props.pagination && !props.secondaryActions && !slots.secondaryActions && props.title != null && props.title.length <= SHORT_TITLE;
    });
    const primaryActionProps = computed(() => {
      return { ...props.primaryAction };
    });
    const pageTitleProps = computed(() => {
      return {
        title: props.title,
        subtitle: props.subtitle,
        compactTitle: props.compactTitle,
        hasSubtitleMaxWidth: hasActionGroupsOrSecondaryActions.value
      };
    });
    const actionMenuProps = computed(() => {
      return {
        title: props.title,
        secondaryActions: props.secondaryActions,
        actionGroups: props.actionGroups
      };
    });
    const conditionSlot4 = computed(() => {
      return (isNavigationCollapsed || conditionDesktopCompact.value) && primaryActionProps.value || !isNavigationCollapsed && !conditionDesktopCompact.value && props.pagination;
    });
    const conditionHasRightAlign = computed(() => {
      return props.primaryAction || slots.primaryAction || (props.secondaryActions || slots.secondaryActions) && (props.secondaryActions && !slots.secondaryActions && props.secondaryActions.length > 0 || slots.secondaryActions && !props.secondaryActions && !slots.secondaryActions.length) || (props.actionGroups && props.actionGroups.length > 0 || slots.actionGroups);
    });
    const hasGroupsWithActions = (groups = []) => {
      return groups.length === 0 ? false : groups.some((group) => group.actions.length > 0);
    };
    provide("filterActions", Boolean(props.filterActions));
    return (_ctx, _cache) => {
      const _component_Text = resolveComponent("Text");
      const _component_Breadcrumbs = resolveComponent("Breadcrumbs");
      const _component_Box = resolveComponent("Box");
      const _component_InlineStack = resolveComponent("InlineStack");
      return openBlock(), createBlock(_component_Box, {
        position: "relative",
        visuallyHidden: _ctx.titleHidden,
        paddingBlockStart: { xs: "400", md: "600" },
        paddingBlockEnd: { xs: "400", md: "600" },
        paddingInlineStart: { xs: "400", sm: "0" },
        paddingInlineEnd: { xs: "400", sm: "0" }
      }, {
        default: withCtx(() => [
          labelForPageReadyAccessibilityLabel.value ? (openBlock(), createElementBlock("div", _hoisted_1$v, [
            createVNode(_component_Text, {
              visuallyHidden: "",
              as: "p"
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(unref(i18n).translate(
                  "Polaris.Page.Header.pageReadyAccessibilityLabel",
                  { title: labelForPageReadyAccessibilityLabel.value }
                )), 1)
              ]),
              _: 1
            })
          ])) : createCommentVNode("", true),
          createBaseVNode("div", {
            class: normalizeClass(headerClassNames.value)
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$B).Row)
            }, [
              !conditionMobileCompact.value ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(styles$B).BreadcrumbWrapper)
              }, [
                createVNode(_component_Box, {
                  maxWidth: "100%",
                  printHidden: "",
                  paddingInlineEnd: 100
                }, {
                  default: withCtx(() => [
                    _ctx.backAction ? (openBlock(), createBlock(_component_Breadcrumbs, {
                      key: 0,
                      backAction: _ctx.backAction
                    }, null, 8, ["backAction"])) : createCommentVNode("", true)
                  ]),
                  _: 1
                })
              ], 2)) : createCommentVNode("", true),
              createVNode(unref(_sfc_main$U), normalizeProps(guardReactiveProps(pageTitleProps.value)), {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "pageTitle")
                ]),
                _: 3
              }, 16),
              conditionHasRightAlign.value ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(unref(styles$B).RightAlign)
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$B).Actions)
                }, [
                  createVNode(unref(_sfc_main$X), normalizeProps(guardReactiveProps(actionMenuProps.value)), {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "secondaryActions")
                    ]),
                    _: 3
                  }, 16),
                  (unref(slots).primaryAction || _ctx.primaryAction) && !unref(isNavigationCollapsed) && !conditionDesktopCompact.value ? (openBlock(), createBlock(unref(_sfc_main$11), normalizeProps(mergeProps({ key: 0 }, primaryActionProps.value)), {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "primaryAction")
                    ]),
                    _: 3
                  }, 16)) : createCommentVNode("", true),
                  conditionSlot4.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    (unref(slots).primaryAction || _ctx.primaryAction) && (unref(isNavigationCollapsed) || conditionDesktopCompact.value) ? (openBlock(), createBlock(unref(_sfc_main$11), normalizeProps(mergeProps({ key: 0 }, primaryActionProps.value)), {
                      default: withCtx(() => [
                        renderSlot(_ctx.$slots, "primaryAction")
                      ]),
                      _: 3
                    }, 16)) : createCommentVNode("", true),
                    !unref(isNavigationCollapsed) && !conditionDesktopCompact.value ? (openBlock(), createBlock(unref(_sfc_main$W), {
                      key: 1,
                      pagination: _ctx.pagination
                    }, {
                      default: withCtx(() => [
                        unref(hasSlot)(unref(slots).pagination) ? renderSlot(_ctx.$slots, "pagination", { key: 0 }) : createCommentVNode("", true)
                      ]),
                      _: 3
                    }, 8, ["pagination"])) : createCommentVNode("", true)
                  ], 64)) : createCommentVNode("", true)
                ], 2)
              ], 2)) : createCommentVNode("", true)
            ], 2),
            _ctx.additionalMetadata ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles$B).Row)
            }, [
              createVNode(_component_InlineStack, { gap: 400 }, {
                default: withCtx(() => [
                  createBaseVNode("div", {
                    class: normalizeClass(unref(styles$B).AdditionalMetaData)
                  }, [
                    createVNode(_component_Text, {
                      tone: "subdued",
                      as: "span",
                      variant: "bodySm"
                    }, {
                      default: withCtx(() => [
                        renderSlot(_ctx.$slots, "additionalMetadata")
                      ]),
                      _: 3
                    })
                  ], 2)
                ]),
                _: 3
              })
            ], 2)) : createCommentVNode("", true)
          ], 2)
        ]),
        _: 3
      }, 8, ["visuallyHidden"]);
    };
  }
});
const _sfc_main$S = /* @__PURE__ */ defineComponent({
  __name: "Page",
  props: {
    fullWidth: { type: Boolean },
    narrowWidth: { type: Boolean },
    titleHidden: { type: Boolean },
    pageReadyAccessibilityLabel: {},
    filterActions: { type: Boolean },
    primaryAction: {},
    pagination: {},
    backAction: {},
    secondaryActions: {},
    actionGroups: {},
    additionalMetadata: {},
    title: {},
    subtitle: {},
    compactTitle: { type: Boolean },
    hasSubtitleMaxWidth: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    const pageClassName = computed(
      () => classNames(
        styles$C.Page,
        props.fullWidth && styles$C.fullWidth,
        props.narrowWidth && styles$C.narrowWidth
      )
    );
    const hasHeaderContent = computed(
      () => props.title || props.subtitle || (props.primaryAction || hasSlot(slots.primaryAction)) || (props.secondaryActions || hasSlot(slots.secondaryActions)) && (props.secondaryActions && !hasSlot(slots.secondaryActions) && props.secondaryActions.length > 0 || hasSlot(slots.secondaryActions) && !props.secondaryActions && !slots.secondaryActions.length) || props.actionGroups && props.actionGroups.length > 0 || props.backAction
    );
    const contentClassName = computed(
      () => classNames(!hasHeaderContent && styles$C.Content)
    );
    const headerProps = computed(() => {
      const { fullWidth: fullWidth2, narrowWidth: narrowWidth2, ...rest } = props;
      return { ...rest };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(pageClassName.value)
      }, [
        hasHeaderContent.value ? (openBlock(), createBlock(unref(_sfc_main$T), normalizeProps(mergeProps({ key: 0 }, headerProps.value)), createSlots({ _: 2 }, [
          unref(hasSlot)(unref(slots).pageTitle) ? {
            name: "pageTitle",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "pageTitle")
            ]),
            key: "0"
          } : void 0,
          unref(hasSlot)(unref(slots).secondaryActions) ? {
            name: "secondaryActions",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "secondaryActions")
            ]),
            key: "1"
          } : void 0,
          unref(hasSlot)(unref(slots).primaryAction) ? {
            name: "primaryAction",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "primaryAction")
            ]),
            key: "2"
          } : void 0,
          unref(hasSlot)(unref(slots).additionalMetadata) ? {
            name: "additionalMetadata",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "additionalMetadata")
            ]),
            key: "3"
          } : void 0,
          unref(hasSlot)(unref(slots).pagination) ? {
            name: "pagination",
            fn: withCtx(() => [
              renderSlot(_ctx.$slots, "pagination")
            ]),
            key: "4"
          } : void 0
        ]), 1040)) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass(contentClassName.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2)
      ], 2);
    };
  }
});
const PageActions = "Polaris-PageActions";
const styles$u = {
  PageActions
};
const _sfc_main$R = /* @__PURE__ */ defineComponent({
  __name: "PageActions",
  props: {
    primaryAction: {},
    secondaryActions: {}
  },
  setup(__props) {
    const slots = useSlots();
    const { hasSlot } = useHasSlot();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$u).PageActions)
      }, [
        createVNode(unref(_sfc_main$1e), {
          distribution: "trailing",
          spacing: "tight"
        }, {
          default: withCtx(() => [
            unref(hasSlot)(unref(slots).secondaryActions) ? renderSlot(_ctx.$slots, "secondaryActions", { key: 0 }) : _ctx.secondaryActions && _ctx.secondaryActions.length > 0 ? (openBlock(), createBlock(unref(_sfc_main$2q), { key: 1 }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.secondaryActions, (action, index) => {
                  return openBlock(), createBlock(unref(_sfc_main$2s), {
                    key: action.id || `${index}`,
                    action
                  }, null, 8, ["action"]);
                }), 128))
              ]),
              _: 1
            })) : createCommentVNode("", true),
            unref(hasSlot)(unref(slots).primaryAction) ? renderSlot(_ctx.$slots, "primaryAction", { key: 2 }) : _ctx.primaryAction ? (openBlock(), createBlock(unref(_sfc_main$2s), {
              key: 3,
              action: _ctx.primaryAction,
              overrides: { variant: "primary" }
            }, null, 8, ["action"])) : createCommentVNode("", true)
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
function isInputFocused() {
  if (document == null || document.activeElement == null) {
    return false;
  }
  const { tagName } = document.activeElement;
  return tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT" || document.activeElement.hasAttribute(
    "contenteditable"
    /* ContentEditable */
  );
}
const Pagination = "Polaris-Pagination";
const table = "Polaris-Pagination--table";
const TablePaginationActions = "Polaris-Pagination__TablePaginationActions";
const styles$t = {
  Pagination,
  table,
  TablePaginationActions
};
const _hoisted_1$u = ["aria-label"];
const _hoisted_2$k = ["aria-label"];
const _hoisted_3$e = { "aria-live": "polite" };
const _hoisted_4$9 = { key: 0 };
const _sfc_main$Q = /* @__PURE__ */ defineComponent({
  __name: "Pagination",
  props: {
    nextKeys: {},
    previousKeys: {},
    nextTooltip: {},
    previousTooltip: {},
    nextURL: {},
    previousURL: {},
    hasNext: { type: Boolean },
    hasPrevious: { type: Boolean },
    accessibilityLabel: {},
    accessibilityLabels: {},
    type: { default: "page" }
  },
  emits: ["next", "previous"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const currentInstance = getCurrentInstance();
    const { hasSlot } = useHasSlot();
    const node = ref(null);
    const navLabel = computed(
      () => props.accessibilityLabel || i18n.translate("Polaris.Pagination.pagination")
    );
    const previousLabel = computed(
      () => {
        var _a;
        return ((_a = props.accessibilityLabels) == null ? void 0 : _a.previous) || i18n.translate("Polaris.Pagination.previous");
      }
    );
    const nextLabel = computed(
      () => {
        var _a;
        return ((_a = props.accessibilityLabels) == null ? void 0 : _a.next) || i18n.translate("Polaris.Pagination.next");
      }
    );
    const prevKeyCondition = computed(
      () => {
        var _a;
        return props.previousKeys && (props.previousURL || ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onPrevious)) && props.hasPrevious;
      }
    );
    const nextKeyCondition = computed(
      () => {
        var _a;
        return props.nextKeys && (props.nextURL || ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onNext)) && props.hasNext;
      }
    );
    const handleCallback = (fn) => {
      return () => {
        if (isInputFocused()) {
          return;
        }
        fn();
      };
    };
    const prevKeypressHandler = () => {
      var _a;
      if (props.previousURL)
        ;
      else {
        const preEmit = (_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onPrevious;
        handleCallback(preEmit());
      }
    };
    const nextKeypressHandler = () => {
      var _a;
      if (props.nextURL)
        ;
      else {
        const nextEmit = (_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onNext;
        handleCallback(nextEmit());
      }
    };
    return (_ctx, _cache) => {
      const _component_KeypressListener = resolveComponent("KeypressListener");
      const _component_Button = resolveComponent("Button");
      const _component_Tooltip = resolveComponent("Tooltip");
      const _component_Text = resolveComponent("Text");
      const _component_Box = resolveComponent("Box");
      const _component_InlineStack = resolveComponent("InlineStack");
      const _component_ButtonGroup = resolveComponent("ButtonGroup");
      return _ctx.type === "table" ? (openBlock(), createElementBlock("nav", {
        key: 0,
        ref_key: "node",
        ref: node,
        "aria-label": navLabel.value,
        class: normalizeClass(unref(classNames)(unref(styles$t).Pagination, unref(styles$t).table))
      }, [
        prevKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.previousKeys, (key) => {
          return openBlock(), createBlock(_component_KeypressListener, {
            key,
            keyCode: key,
            handler: prevKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        nextKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.nextKeys, (key) => {
          return openBlock(), createBlock(_component_KeypressListener, {
            key,
            keyCode: key,
            handler: nextKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        createVNode(_component_Box, {
          background: "bg-surface-secondary",
          paddingBlockStart: 150,
          paddingBlockEnd: 150,
          paddingInlineStart: 300,
          paddingInlineEnd: 200
        }, {
          default: withCtx(() => [
            createVNode(_component_InlineStack, {
              blockAlign: "center",
              align: "center"
            }, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$t).TablePaginationActions),
                  "data-buttongroup-variant": "segmented"
                }, [
                  createBaseVNode("div", null, [
                    _ctx.previousTooltip && _ctx.hasPrevious ? (openBlock(), createBlock(_component_Tooltip, {
                      key: 0,
                      activatorWrapper: "span",
                      preferredPosition: "below",
                      content: _ctx.previousTooltip
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_Button, {
                          id: "previousURL",
                          icon: unref(ChevronLeftIcon),
                          accessibilityLabel: previousLabel.value,
                          url: _ctx.previousURL,
                          disabled: !_ctx.hasPrevious,
                          onClick: _cache[0] || (_cache[0] = ($event) => emits("previous"))
                        }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
                      ]),
                      _: 1
                    }, 8, ["content"])) : (openBlock(), createBlock(_component_Button, {
                      key: 1,
                      id: "previousURL",
                      icon: unref(ChevronLeftIcon),
                      accessibilityLabel: previousLabel.value,
                      url: _ctx.previousURL,
                      disabled: !_ctx.hasPrevious,
                      onClick: _cache[1] || (_cache[1] = ($event) => emits("previous"))
                    }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"]))
                  ]),
                  unref(hasSlot)(unref(slots).default) ? (openBlock(), createBlock(_component_Box, {
                    key: 0,
                    padding: "300",
                    paddingBlockStart: "0",
                    paddingBlockEnd: "0"
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_Text, {
                        as: "span",
                        variant: "bodySm",
                        fontWeight: "medium"
                      }, {
                        default: withCtx(() => [
                          renderSlot(_ctx.$slots, "default")
                        ]),
                        _: 3
                      })
                    ]),
                    _: 3
                  })) : createCommentVNode("", true),
                  createBaseVNode("div", null, [
                    _ctx.nextTooltip && _ctx.hasNext ? (openBlock(), createBlock(_component_Tooltip, {
                      key: 0,
                      activatorWrapper: "span",
                      preferredPosition: "below",
                      content: _ctx.nextTooltip
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_Button, {
                          id: "nextURL",
                          icon: unref(ChevronRightIcon),
                          accessibilityLabel: nextLabel.value,
                          url: _ctx.nextURL,
                          disabled: !_ctx.hasNext,
                          onClick: _cache[2] || (_cache[2] = ($event) => emits("next"))
                        }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
                      ]),
                      _: 1
                    }, 8, ["content"])) : (openBlock(), createBlock(_component_Button, {
                      key: 1,
                      id: "nextURL",
                      icon: unref(ChevronRightIcon),
                      accessibilityLabel: nextLabel.value,
                      url: _ctx.nextURL,
                      disabled: !_ctx.hasNext,
                      onClick: _cache[3] || (_cache[3] = ($event) => emits("next"))
                    }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"]))
                  ])
                ], 2)
              ]),
              _: 3
            })
          ]),
          _: 3
        })
      ], 10, _hoisted_1$u)) : (openBlock(), createElementBlock("nav", {
        key: 1,
        ref_key: "node",
        ref: node,
        "aria-label": navLabel.value,
        class: normalizeClass(unref(styles$t).Pagination)
      }, [
        prevKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.previousKeys, (key) => {
          return openBlock(), createBlock(_component_KeypressListener, {
            key,
            keyCode: key,
            handler: prevKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        nextKeyCondition.value ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.nextKeys, (key) => {
          return openBlock(), createBlock(_component_KeypressListener, {
            key,
            keyCode: key,
            handler: nextKeypressHandler
          }, null, 8, ["keyCode"]);
        }), 128)) : createCommentVNode("", true),
        createVNode(_component_ButtonGroup, { variant: "segmented" }, {
          default: withCtx(() => [
            _ctx.previousTooltip && _ctx.hasPrevious ? (openBlock(), createBlock(_component_Tooltip, {
              key: 0,
              activatorWrapper: "span",
              preferredPosition: "below",
              content: _ctx.previousTooltip
            }, {
              default: withCtx(() => [
                createVNode(_component_Button, {
                  id: "previousURL",
                  icon: unref(ChevronLeftIcon),
                  accessibilityLabel: previousLabel.value,
                  url: _ctx.previousURL,
                  disabled: !_ctx.hasPrevious,
                  onClick: _cache[4] || (_cache[4] = ($event) => emits("previous"))
                }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
              ]),
              _: 1
            }, 8, ["content"])) : (openBlock(), createBlock(_component_Button, {
              key: 1,
              id: "previousURL",
              icon: unref(ChevronLeftIcon),
              accessibilityLabel: previousLabel.value,
              url: _ctx.previousURL,
              disabled: !_ctx.hasPrevious,
              onClick: _cache[5] || (_cache[5] = ($event) => emits("previous"))
            }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])),
            unref(hasSlot)(unref(slots).default) ? (openBlock(), createBlock(_component_Box, {
              key: 2,
              padding: 300,
              paddingBlockStart: 0,
              paddingBlockEnd: 0
            }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_3$e, [
                  _ctx.hasNext && _ctx.hasPrevious ? (openBlock(), createElementBlock("span", _hoisted_4$9, [
                    renderSlot(_ctx.$slots, "default")
                  ])) : (openBlock(), createBlock(_component_Text, {
                    key: 1,
                    tone: "subdued",
                    as: "span"
                  }, {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  }))
                ])
              ]),
              _: 3
            })) : createCommentVNode("", true),
            _ctx.nextTooltip && _ctx.hasNext ? (openBlock(), createBlock(_component_Tooltip, {
              key: 3,
              activatorWrapper: "span",
              preferredPosition: "below",
              content: _ctx.nextTooltip
            }, {
              default: withCtx(() => [
                createVNode(_component_Button, {
                  id: "nextURL",
                  icon: unref(ChevronRightIcon),
                  accessibilityLabel: nextLabel.value,
                  url: _ctx.nextURL,
                  disabled: !_ctx.hasNext,
                  onClick: _cache[6] || (_cache[6] = ($event) => emits("next"))
                }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"])
              ]),
              _: 1
            }, 8, ["content"])) : (openBlock(), createBlock(_component_Button, {
              key: 4,
              id: "nextURL",
              icon: unref(ChevronRightIcon),
              accessibilityLabel: nextLabel.value,
              url: _ctx.nextURL,
              disabled: !_ctx.hasNext,
              onClick: _cache[7] || (_cache[7] = ($event) => emits("next"))
            }, null, 8, ["icon", "accessibilityLabel", "url", "disabled"]))
          ]),
          _: 3
        })
      ], 10, _hoisted_2$k));
    };
  }
});
function setActivatorAttributes(activator, {
  id,
  active: active2 = false,
  ariaHaspopup,
  activatorDisabled = false
}) {
  if (!activatorDisabled) {
    activator.tabIndex = activator.tabIndex || 0;
  }
  activator.setAttribute("aria-controls", id);
  activator.setAttribute("aria-owns", id);
  activator.setAttribute("aria-expanded", String(active2));
  activator.setAttribute("data-state", active2 ? "open" : "closed");
  if (ariaHaspopup != null) {
    activator.setAttribute("aria-haspopup", String(ariaHaspopup));
  }
}
var PopoverCloseSource = /* @__PURE__ */ ((PopoverCloseSource2) => {
  PopoverCloseSource2[PopoverCloseSource2["Click"] = 0] = "Click";
  PopoverCloseSource2[PopoverCloseSource2["EscapeKeypress"] = 1] = "EscapeKeypress";
  PopoverCloseSource2[PopoverCloseSource2["FocusOut"] = 2] = "FocusOut";
  PopoverCloseSource2[PopoverCloseSource2["ScrollOut"] = 3] = "ScrollOut";
  return PopoverCloseSource2;
})(PopoverCloseSource || {});
const _sfc_main$P = /* @__PURE__ */ defineComponent({
  __name: "Popover",
  props: {
    preferredPosition: {},
    preferredAlignment: {},
    active: { type: Boolean },
    preferInputActivator: { default: true },
    activatorWrapper: { default: "div" },
    zIndexOverride: {},
    preventFocusOnClose: { type: Boolean },
    sectioned: { type: Boolean },
    fullWidth: { type: Boolean },
    fullHeight: { type: Boolean },
    fluidContent: { type: Boolean },
    fixed: { type: Boolean },
    ariaHaspopup: { type: [Boolean, String] },
    hideOnPrint: { type: Boolean },
    autofocusTarget: {},
    preventCloseOnChildOverlayClick: { type: Boolean },
    captureOverscroll: { type: Boolean }
  },
  emits: ["close"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const id = useId();
    const activatorNode = ref(null);
    const activatorContainer = ref(null);
    const overlayRef = ref(null);
    watch(
      () => props.active,
      () => {
        setAccessibilityAttributes();
      }
    );
    const forceUpdatePosition = () => {
      overlayRef.value.forceUpdatePosition();
    };
    const setAccessibilityAttributes = () => {
      if (activatorContainer.value == null) {
        return;
      }
      const firstFocusable = findFirstFocusableNodeIncludingDisabled(activatorContainer.value);
      const focusableActivator = firstFocusable || activatorContainer.value;
      const activatorDisabled = "disabled" in focusableActivator && Boolean(focusableActivator.disabled);
      setActivatorAttributes(focusableActivator, {
        id: String(id),
        active: props.active,
        ariaHaspopup: props.ariaHaspopup,
        activatorDisabled
      });
    };
    const handleClose = (source2) => {
      emits("close", source2);
      if (activatorContainer.value == null || props.preventFocusOnClose) {
        return;
      }
      if (source2 === PopoverCloseSource.FocusOut && activatorNode.value) {
        const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode.value) || findFirstFocusableNodeIncludingDisabled(activatorContainer.value) || activatorContainer.value;
        if (!focusNextFocusableNode(focusableActivator, isInPortal)) {
          focusableActivator.focus();
        }
      } else if (source2 === PopoverCloseSource.EscapeKeypress && activatorNode.value) {
        const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode.value) || findFirstFocusableNodeIncludingDisabled(activatorContainer.value) || activatorContainer.value;
        if (focusableActivator) {
          focusableActivator.focus();
        } else {
          focusNextFocusableNode(focusableActivator, isInPortal);
        }
      }
    };
    onMounted(() => {
      if (!activatorNode.value && activatorContainer.value) {
        activatorNode.value = activatorContainer.value.firstElementChild;
      } else if (activatorNode.value && activatorContainer.value && !activatorContainer.value.contains(activatorNode.value)) {
        activatorNode.value = activatorContainer.value.firstElementChild;
      }
      if (activatorNode.value && activatorContainer.value) {
        activatorNode.value = activatorContainer.value.firstElementChild;
      }
      setAccessibilityAttributes();
    });
    function isInPortal(element) {
      let { parentElement } = element;
      while (parentElement) {
        if (parentElement.matches(portal.selector)) {
          return false;
        }
        parentElement = parentElement.parentElement;
      }
      return true;
    }
    __expose({
      forceUpdatePosition
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.activatorWrapper), {
        ref_key: "activatorContainer",
        ref: activatorContainer
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "activator"),
          activatorNode.value ? (openBlock(), createBlock(unref(_sfc_main$L), {
            key: 0,
            "id-prefix": "popover"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$M), mergeProps({
                ref_key: "overlayRef",
                ref: overlayRef
              }, props, {
                id: String(unref(id)),
                activator: activatorNode.value,
                preferInputActivator: _ctx.preferInputActivator,
                active: _ctx.active,
                fixed: _ctx.fixed,
                "z-index-override": _ctx.zIndexOverride,
                onClose: handleClose
              }), {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              }, 16, ["id", "activator", "preferInputActivator", "active", "fixed", "z-index-override"])
            ]),
            _: 3
          })) : createCommentVNode("", true)
        ]),
        _: 3
      }, 512);
    };
  }
});
const Popover = "Polaris-Popover";
const PopoverOverlay = "Polaris-Popover__PopoverOverlay";
const measuring$1 = "Polaris-Popover--measuring";
const fullWidth = "Polaris-Popover--fullWidth";
const Content$2 = "Polaris-Popover__Content";
const positionedAbove$1 = "Polaris-Popover--positionedAbove";
const ContentContainer = "Polaris-Popover__ContentContainer";
const Pane = "Polaris-Popover__Pane";
const Section = "Polaris-Popover__Section";
const FocusTracker = "Polaris-Popover__FocusTracker";
const styles$s = {
  Popover,
  PopoverOverlay,
  "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
  "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
  measuring: measuring$1,
  "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
  fullWidth,
  Content: Content$2,
  positionedAbove: positionedAbove$1,
  ContentContainer,
  "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
  "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
  Pane,
  "Pane-fixed": "Polaris-Popover__Pane--fixed",
  "Pane-subdued": "Polaris-Popover__Pane--subdued",
  "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
  Section,
  FocusTracker,
  "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
};
function usePortalsManager() {
  const context = inject("portals-manager");
  return context;
}
const _sfc_main$O = /* @__PURE__ */ defineComponent({
  __name: "Section",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$s).Section)
      }, [
        createVNode(unref(_sfc_main$2B), {
          "padding-inline-start": "300",
          "padding-inline-end": "300",
          "padding-block-start": "200",
          "padding-block-end": "150"
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
const _hoisted_1$t = ["styles"];
const _sfc_main$N = /* @__PURE__ */ defineComponent({
  __name: "Pane",
  props: {
    fixed: { type: Boolean },
    sectioned: { type: Boolean },
    height: {},
    captureOverscroll: { type: Boolean, default: false },
    subdued: { type: Boolean }
  },
  emits: ["scrolled-to-bottom"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const className = computed(() => classNames(
      styles$s.Pane,
      props.fixed && styles$s["Pane-fixed"],
      props.subdued && styles$s["Pane-subdued"],
      props.captureOverscroll && styles$s["Pane-captureOverscroll"]
    ));
    const style = computed(() => props.height ? {
      height: `${props.height}px`,
      maxHeight: `${props.height}px`,
      minHeight: `${props.height}px`
    } : void 0);
    return (_ctx, _cache) => {
      return _ctx.fixed ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(className.value),
        styles: style.value
      }, [
        _ctx.sectioned ? (openBlock(), createBlock(unref(_sfc_main$O), { key: 0 }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })) : renderSlot(_ctx.$slots, "default", { key: 1 })
      ], 10, _hoisted_1$t)) : (openBlock(), createBlock(unref(_sfc_main$B), {
        key: 1,
        shadow: "",
        style: normalizeStyle(style.value),
        class: normalizeClass(className.value),
        onScrolledToBottom: _cache[0] || (_cache[0] = ($event) => emits("scrolled-to-bottom"))
      }, {
        default: withCtx(() => [
          _ctx.sectioned ? (openBlock(), createBlock(unref(_sfc_main$O), { key: 0 }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          })) : renderSlot(_ctx.$slots, "default", { key: 1 })
        ]),
        _: 3
      }, 8, ["style", "class"]));
    };
  }
});
const _hoisted_1$s = ["id", "tabindex"];
const _sfc_main$M = /* @__PURE__ */ defineComponent({
  __name: "PopoverOverlay",
  props: {
    fullWidth: { type: Boolean },
    fullHeight: { type: Boolean },
    fluidContent: { type: Boolean },
    preferredPosition: { default: "below" },
    preferredAlignment: { default: "center" },
    active: { type: Boolean },
    id: {},
    zIndexOverride: {},
    activator: {},
    preferInputActivator: { type: Boolean, default: true },
    sectioned: { type: Boolean },
    fixed: { type: Boolean },
    hideOnPrint: { type: Boolean },
    autofocusTarget: {},
    preventCloseOnChildOverlayClick: { type: Boolean },
    captureOverscroll: { type: Boolean }
  },
  emits: ["close"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const slots = useSlots();
    const context = usePortalsManager();
    const props = __props;
    const emits = __emit;
    const state = reactive({
      transitionStatus: props.active ? "entering" : "exited"
      /* Exited */
    });
    const contentNode = ref(null);
    const enteringTimer = ref(void 0);
    const overlayRef = ref(null);
    const overlayDetails = computed(() => {
      var _a;
      return (_a = overlayRef.value) == null ? void 0 : _a.overlayDetails;
    });
    const positionOverlayClass = computed(() => {
      return classNames(
        styles$s.PopoverOverlay,
        state.transitionStatus === "entering" && styles$s["PopoverOverlay-entering"],
        state.transitionStatus === "entered" && styles$s["PopoverOverlay-open"],
        state.transitionStatus === "exiting" && styles$s["PopoverOverlay-exiting"]
      );
    });
    const popoverOverlayClass = computed(() => {
      var _a, _b;
      return classNames(
        styles$s.Popover,
        ((_a = overlayDetails.value) == null ? void 0 : _a.positioning) === "above" && styles$s.positionedAbove,
        props.fullWidth && styles$s.fullWidth,
        ((_b = overlayDetails.value) == null ? void 0 : _b.measuring) && styles$s.measuring,
        props.hideOnPrint && styles$s["PopoverOverlay-hideOnPrint"]
      );
    });
    const contentStyles = computed(() => {
      var _a, _b;
      return ((_a = overlayDetails.value) == null ? void 0 : _a.measuring) ? void 0 : { height: `${(_b = overlayDetails.value) == null ? void 0 : _b.desiredHeight}px` };
    });
    const contentClassNames = computed(() => {
      return classNames(
        styles$s.Content,
        props.fullHeight && styles$s["Content-fullHeight"],
        props.fluidContent && styles$s["Content-fluidContent"]
      );
    });
    const isChildContentWrappedByPane = computed(() => {
      var _a;
      const childContents = ((_a = slots.default) == null ? void 0 : _a.call(slots)) || [];
      if (!childContents.length) {
        return false;
      }
      const children = childContents[0].children && childContents[0].children.length ? childContents[0].children[0] : childContents[0];
      return isElementOfType(children, _sfc_main$N);
    });
    watch(
      () => props.active,
      (newVal, oldVal) => {
        if (newVal && !oldVal) {
          focusContent();
          changeTransitionStatus("entering", () => {
            clearTransitionTimeout();
            enteringTimer.value = window.setTimeout(() => {
              state.transitionStatus = "entered";
            }, parseInt(themeDefault.motion["motion-duration-100"], 10));
          });
        }
        if (!newVal && oldVal) {
          clearTransitionTimeout();
          state.transitionStatus = "exited";
        }
      }
    );
    onMounted(() => {
      if (props.active) {
        focusContent();
        changeTransitionStatus(
          "entered"
          /* Entered */
        );
      }
    });
    onBeforeUnmount(() => {
      clearTransitionTimeout();
    });
    const changeTransitionStatus = (transitionStatus, callback) => {
      state.transitionStatus = transitionStatus;
      callback && callback();
      contentNode.value && contentNode.value.getBoundingClientRect();
    };
    function clearTransitionTimeout() {
      if (enteringTimer.value) {
        window.clearTimeout(enteringTimer.value);
      }
    }
    function focusContent() {
      const { autofocusTarget = "container" } = props;
      if (autofocusTarget === "none" || contentNode.value === null) {
        return;
      }
      requestAnimationFrame(() => {
        if (contentNode.value === null) {
          return;
        }
        const focusableChild = findFirstKeyboardFocusableNode(contentNode.value);
        if (focusableChild && autofocusTarget === "first-node") {
          focusableChild.focus({
            preventScroll: false
          });
        } else {
          contentNode.value.focus({
            preventScroll: false
          });
        }
      });
    }
    function handleClick(event) {
      const target = event.target;
      const { activator, preventCloseOnChildOverlayClick } = props;
      const composedPath = event.composedPath();
      const wasDescendant = preventCloseOnChildOverlayClick ? wasPolarisPortalDescendant(composedPath, context) : wasContentNodeDescendant(composedPath, contentNode);
      const isActivatorDescendant = nodeContainsDescendant(activator, target);
      if (wasDescendant || isActivatorDescendant || state.transitionStatus !== "entered") {
        return;
      }
      emits("close", PopoverCloseSource.Click);
    }
    function handleScrollOut() {
      emits("close", PopoverCloseSource.ScrollOut);
    }
    function handleEscape(event) {
      const target = event.target;
      const { activator } = props;
      const composedPath = event.composedPath();
      const wasDescendant = wasContentNodeDescendant(composedPath, contentNode);
      const isActivatorDescendant = nodeContainsDescendant(activator, target);
      if (wasDescendant || isActivatorDescendant) {
        emits("close", PopoverCloseSource.EscapeKeypress);
      }
    }
    function handleFocusFirstItem() {
      emits("close", PopoverCloseSource.FocusOut);
    }
    function handleFocusLastItem() {
      emits("close", PopoverCloseSource.FocusOut);
    }
    function nodeContainsDescendant(rootNode, descendant) {
      if (rootNode === descendant) {
        return true;
      }
      let parent = descendant.parentNode;
      while (parent != null) {
        if (parent === rootNode) {
          return true;
        }
        parent = parent.parentNode;
      }
      return false;
    }
    function wasContentNodeDescendant(composedPath, contentNode2) {
      return contentNode2.value != null && composedPath.includes(contentNode2.value);
    }
    function wasPolarisPortalDescendant(composedPath, portalsContainerElement) {
      return composedPath.some((eventTarget) => {
        var _a;
        return eventTarget instanceof Node && ((_a = portalsContainerElement.value) == null ? void 0 : _a.contains(eventTarget));
      });
    }
    function forceUpdatePosition() {
      overlayRef.value.forceUpdatePosition();
    }
    __expose({ forceUpdatePosition });
    return (_ctx, _cache) => {
      return state.transitionStatus !== "exited" && _ctx.active ? (openBlock(), createBlock(unref(_sfc_main$K), {
        key: 0,
        ref_key: "overlayRef",
        ref: overlayRef,
        "full-width": _ctx.fullWidth,
        active: _ctx.active,
        activator: _ctx.activator,
        "prefer-input-activator": _ctx.preferInputActivator,
        "preferred-position": _ctx.preferredPosition,
        "preferred-alignment": _ctx.preferredAlignment,
        fixed: _ctx.fixed,
        class: normalizeClass(positionOverlayClass.value),
        "z-index-override": _ctx.zIndexOverride,
        onScrollOut: handleScrollOut
      }, {
        default: withCtx(() => [
          createBaseVNode("div", mergeProps(unref(overlay$1).props, { class: popoverOverlayClass.value }), [
            createVNode(unref(_sfc_main$1Z), {
              event: "click",
              handler: handleClick
            }),
            createVNode(unref(_sfc_main$1Z), {
              event: "touchstart",
              handler: handleClick
            }),
            createVNode(unref(_sfc_main$1p), {
              "key-code": unref(Key).Escape,
              handler: handleEscape
            }, null, 8, ["key-code"]),
            createBaseVNode("div", {
              tabindex: "0",
              class: normalizeClass(unref(styles$s).FocusTracker),
              onFocus: handleFocusFirstItem
            }, null, 34),
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$s).ContentContainer)
            }, [
              createBaseVNode("div", {
                ref_key: "contentNode",
                ref: contentNode,
                id: _ctx.id,
                tabindex: _ctx.autofocusTarget === "none" ? void 0 : -1,
                class: normalizeClass(contentClassNames.value),
                style: normalizeStyle(contentStyles.value)
              }, [
                isChildContentWrappedByPane.value ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(unref(_sfc_main$N), {
                  key: 1,
                  "capture-overscroll": _ctx.captureOverscroll,
                  sectioned: _ctx.sectioned
                }, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                }, 8, ["capture-overscroll", "sectioned"]))
              ], 14, _hoisted_1$s)
            ], 2),
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$s).FocusTracker),
              tabindex: "0",
              onFocus: handleFocusLastItem
            }, null, 34)
          ], 16)
        ]),
        _: 3
      }, 8, ["full-width", "active", "activator", "prefer-input-activator", "preferred-position", "preferred-alignment", "fixed", "class", "z-index-override"])) : createCommentVNode("", true);
    };
  }
});
const _hoisted_1$r = ["data-portal-id"];
const PORTAL_CONTAINER_ID = "#PolarisPortalsContainer";
const _sfc_main$L = /* @__PURE__ */ defineComponent({
  __name: "Portal",
  props: {
    idPrefix: {}
  },
  emits: ["portal-created"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const container = usePortalsManager();
    const uniqueId = useId();
    const portalId = computed(() => {
      return props.idPrefix ? `${props.idPrefix}-${uniqueId}` : uniqueId;
    });
    onMounted(() => {
      emits("portal-created");
    });
    return (_ctx, _cache) => {
      return unref(container) ? (openBlock(), createBlock(Teleport, {
        key: 0,
        to: PORTAL_CONTAINER_ID
      }, [
        createBaseVNode("div", { "data-portal-id": portalId.value }, [
          renderSlot(_ctx.$slots, "default")
        ], 8, _hoisted_1$r)
      ])) : createCommentVNode("", true);
    };
  }
});
const PositionedOverlay = "Polaris-PositionedOverlay";
const fixed = "Polaris-PositionedOverlay--fixed";
const calculating = "Polaris-PositionedOverlay--calculating";
const preventInteraction = "Polaris-PositionedOverlay--preventInteraction";
const styles$r = {
  PositionedOverlay,
  fixed,
  calculating,
  preventInteraction
};
const forNode = (node) => {
  const closestElement = node.closest(scrollable.selector);
  return closestElement instanceof HTMLElement ? closestElement : document;
};
const getMarginsForNode = (node) => {
  const nodeStyles = window.getComputedStyle(node);
  return {
    activator: parseFloat(nodeStyles.marginTop || "0"),
    container: parseFloat(nodeStyles.marginBottom || "0"),
    horizontal: parseFloat(nodeStyles.marginLeft || "0")
  };
};
const getZIndexForLayerFromNode = (node) => {
  const layerNode = node.closest(layer.selector) || document.body;
  const zIndex2 = layerNode === document.body ? "auto" : parseInt(window.getComputedStyle(layerNode).zIndex || "0", 10);
  return zIndex2 === "auto" || isNaN(zIndex2) ? null : zIndex2;
};
const isDocument = (node) => {
  return node === document;
};
function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed2, topBarOffset = 0) {
  const activatorTop = activatorRect.top;
  const activatorBottom = activatorTop + activatorRect.height;
  const spaceAbove = activatorRect.top - topBarOffset;
  const spaceBelow = containerRect.height - activatorRect.top - activatorRect.height;
  const desiredHeight = overlayRect.height;
  const verticalMargins = overlayMargins.activator + overlayMargins.container;
  const minimumSpaceToScroll = overlayMargins.container;
  const distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0);
  const distanceToBottomScroll = containerRect.top + Math.min(
    containerRect.height,
    scrollableContainerRect.top + scrollableContainerRect.height
  ) - (activatorRect.top + activatorRect.height);
  const enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll;
  const enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll;
  const heightIfBelow = Math.min(spaceBelow, desiredHeight);
  const heightIfAbove = Math.min(spaceAbove, desiredHeight);
  const containerRectTop = fixed2 ? 0 : containerRect.top;
  const positionIfAbove = {
    height: heightIfAbove - verticalMargins,
    top: activatorTop + containerRectTop - heightIfAbove,
    positioning: "above"
  };
  const positionIfBelow = {
    height: heightIfBelow - verticalMargins,
    top: activatorBottom + containerRectTop,
    positioning: "below"
  };
  if (preferredPosition === "above") {
    return (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow;
  }
  if (preferredPosition === "below") {
    return (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove;
  }
  if (enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll) {
    return spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow;
  }
  return distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
}
function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
  const maximum = containerRect.width - overlayRect.width;
  if (preferredAlignment === "left") {
    return Math.min(
      maximum,
      Math.max(0, activatorRect.left - overlayMargins.horizontal)
    );
  } else if (preferredAlignment === "right") {
    const activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
    return Math.min(
      maximum,
      Math.max(0, activatorRight - overlayMargins.horizontal)
    );
  }
  return Math.min(
    maximum,
    Math.max(0, activatorRect.center.x - overlayRect.width / 2)
  );
}
function rectIsOutsideOfRect(inner, outer) {
  const { center: center2 } = inner;
  return center2.y < outer.top || center2.y > outer.top + outer.height;
}
function intersectionWithViewport(rect, viewport = windowRect()) {
  const top = Math.max(rect.top, 0);
  const left = Math.max(rect.left, 0);
  const bottom = Math.min(rect.top + rect.height, viewport.height);
  const right = Math.min(rect.left + rect.width, viewport.width);
  return new Rect({
    top,
    left,
    height: bottom - top,
    width: right - left
  });
}
function windowRect() {
  return new Rect({
    top: window.scrollY,
    left: window.scrollX,
    height: window.innerHeight,
    width: document.body.clientWidth
  });
}
const _sfc_main$K = /* @__PURE__ */ defineComponent({
  __name: "PositionedOverlay",
  props: {
    active: { type: Boolean },
    activator: {},
    preferInputActivator: { type: Boolean },
    preferredPosition: {},
    preferredAlignment: {},
    fullWidth: { type: Boolean },
    fixed: { type: Boolean },
    preventInteraction: { type: Boolean },
    classNames: {},
    zIndexOverride: {}
  },
  emits: ["scroll-out"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const OBSERVER_CONFIG = {
      childList: true,
      subtree: true,
      characterData: true,
      attributeFilter: ["style"]
    };
    const props = __props;
    const emits = __emit;
    useSlots();
    const state = reactive({
      measuring: true,
      activatorRect: getRectForNode(props.activator),
      right: void 0,
      left: void 0,
      top: 0,
      height: 0,
      width: null,
      positioning: "below",
      zIndex: null,
      outsideScrollableContainer: false,
      lockPosition: false,
      chevronOffset: 0
    });
    const overlay2 = ref(null);
    const scrollableContainers = ref([]);
    const observer = ref(new MutationObserver(handleMeasurement));
    const style = computed(() => {
      return {
        top: state.top == null || isNaN(state.top) ? void 0 : `${state.top}px`,
        left: state.left == null || isNaN(state.left) ? void 0 : `${state.left}px`,
        right: state.right == null || isNaN(state.right) ? void 0 : `${state.right}px`,
        width: state.width == null || isNaN(state.width) ? void 0 : `${state.width}px`,
        zIndex: props.zIndexOverride || state.zIndex || void 0
      };
    });
    const className = computed(() => {
      return classNames(
        styles$r.PositionedOverlay,
        props.fixed && styles$r.fixed,
        props.preventInteraction && styles$r.preventInteraction,
        props.classNames
      );
    });
    const firstScrollableContainer = computed(() => {
      return scrollableContainers.value[0] ?? null;
    });
    const overlayDetails = computed(() => {
      return {
        measuring: state.measuring,
        left: state.left,
        right: state.right,
        desiredHeight: state.height,
        positioning: state.positioning,
        activatorRect: state.activatorRect,
        chevronOffset: state.chevronOffset
      };
    });
    onMounted(() => {
      setScrollableContainers();
      if (scrollableContainers.value.length && !props.fixed) {
        registerScrollHandlers();
      }
      handleMeasurement();
    });
    onUpdated(() => {
      if (props.active && state.top !== 0 && state.outsideScrollableContainer) {
        emits("scroll-out");
      }
    });
    onBeforeUnmount(() => {
      observer.value.disconnect();
      if (scrollableContainers.value.length && !props.fixed) {
        unregisterScrollHandlers();
      }
    });
    const setScrollableContainers = () => {
      const containers = [];
      let tmpScrollableContainers = forNode(props.activator);
      if (tmpScrollableContainers) {
        containers.push(tmpScrollableContainers);
        while (tmpScrollableContainers == null ? void 0 : tmpScrollableContainers.parentElement) {
          tmpScrollableContainers = forNode(tmpScrollableContainers.parentElement);
          containers.push(tmpScrollableContainers);
        }
      }
      scrollableContainers.value = containers;
    };
    const registerScrollHandlers = () => {
      scrollableContainers.value.forEach((node) => {
        node.addEventListener("scroll", handleMeasurement);
      });
    };
    const unregisterScrollHandlers = () => {
      scrollableContainers.value.forEach((node) => {
        node.removeEventListener("scroll", handleMeasurement);
      });
    };
    const forceUpdatePosition = () => {
      nextTick(handleMeasurement);
    };
    function handleMeasurement() {
      const { lockPosition, top } = state;
      observer.value.disconnect();
      state.height = 0;
      state.positioning = "below";
      state.measuring = true;
      nextTick(() => {
        if (overlay2.value === null || firstScrollableContainer.value === null) {
          return;
        }
        const {
          activator,
          preferredPosition = "below",
          preferredAlignment = "center",
          fullWidth: fullWidth2,
          fixed: fixed2,
          preferInputActivator = true
        } = props;
        const preferredActivator = preferInputActivator ? activator.querySelector("input") || activator : activator;
        const activatorRect = getRectForNode(preferredActivator);
        const currentOverlayRect = getRectForNode(overlay2.value);
        const scrollableElement = isDocument(firstScrollableContainer.value) ? document.body : firstScrollableContainer.value;
        const scrollableContainerRect = getRectForNode(scrollableElement);
        const overlayRect = fullWidth2 ? new Rect({ ...currentOverlayRect, width: activatorRect.width }) : currentOverlayRect;
        if (scrollableElement === document.body) {
          scrollableContainerRect.height = document.body.scrollHeight;
        }
        let topBarOffset = 0;
        const topBarElement = scrollableElement.querySelector(`${dataPolarisTopBar.selector}`);
        if (topBarElement) {
          topBarOffset = topBarElement.clientHeight;
        }
        const overlayMargins = overlay2.value.firstElementChild ? getMarginsForNode(overlay2.value.firstElementChild) : { activator: 0, container: 0, horizontal: 0 };
        const containerRect = windowRect();
        const zIndexForLayer = getZIndexForLayerFromNode(activator);
        const zIndex2 = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1;
        const verticalPosition = calculateVerticalPosition(
          activatorRect,
          overlayRect,
          overlayMargins,
          scrollableContainerRect,
          containerRect,
          preferredPosition,
          fixed2,
          topBarOffset
        );
        const horizontalPosition = calculateHorizontalPosition(
          activatorRect,
          overlayRect,
          containerRect,
          overlayMargins,
          preferredAlignment
        );
        const tmpChevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;
        state.measuring = false;
        state.activatorRect = getRectForNode(activator);
        state.left = preferredAlignment !== "right" ? horizontalPosition : void 0;
        state.right = preferredAlignment === "right" ? horizontalPosition : void 0;
        state.top = lockPosition ? top : verticalPosition.top;
        state.lockPosition = Boolean(fixed2);
        state.height = verticalPosition.height || 0;
        state.width = fullWidth2 ? overlayRect.width : null;
        state.positioning = verticalPosition.positioning;
        state.outsideScrollableContainer = rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect));
        state.zIndex = zIndex2;
        state.chevronOffset = tmpChevronOffset;
        nextTick(() => {
          if (!overlay2.value) {
            return;
          }
          observer.value.observe(overlay2.value, OBSERVER_CONFIG);
          observer.value.observe(activator, OBSERVER_CONFIG);
        });
      });
    }
    __expose({
      forceUpdatePosition,
      overlayDetails
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "overlay",
        ref: overlay2,
        class: normalizeClass(className.value),
        style: normalizeStyle(style.value)
      }, [
        createVNode(unref(_sfc_main$1Z), {
          event: "resize",
          handler: handleMeasurement
        }),
        renderSlot(_ctx.$slots, "default")
      ], 6);
    };
  }
});
const ProgressBar$1 = "Polaris-ProgressBar";
const sizeSmall$4 = "Polaris-ProgressBar--sizeSmall";
const sizeMedium$3 = "Polaris-ProgressBar--sizeMedium";
const sizeLarge$5 = "Polaris-ProgressBar--sizeLarge";
const toneHighlight = "Polaris-ProgressBar--toneHighlight";
const tonePrimary = "Polaris-ProgressBar--tonePrimary";
const toneSuccess = "Polaris-ProgressBar--toneSuccess";
const toneCritical = "Polaris-ProgressBar--toneCritical";
const Indicator$1 = "Polaris-ProgressBar__Indicator";
const IndicatorAppearActive = "Polaris-ProgressBar__IndicatorAppearActive";
const IndicatorAppearDone = "Polaris-ProgressBar__IndicatorAppearDone";
const Progress$1 = "Polaris-ProgressBar__Progress";
const Label$1 = "Polaris-ProgressBar__Label";
const styles$q = {
  ProgressBar: ProgressBar$1,
  sizeSmall: sizeSmall$4,
  sizeMedium: sizeMedium$3,
  sizeLarge: sizeLarge$5,
  toneHighlight,
  tonePrimary,
  toneSuccess,
  toneCritical,
  Indicator: Indicator$1,
  IndicatorAppearActive,
  IndicatorAppearDone,
  Progress: Progress$1,
  Label: Label$1
};
const _hoisted_1$q = ["aria-labelledby", "value"];
const _sfc_main$J = /* @__PURE__ */ defineComponent({
  __name: "ProgressBar",
  props: {
    progress: { default: 0 },
    size: { default: "medium" },
    animated: { type: Boolean, default: true },
    ariaLabelledBy: {},
    color: { default: "highlight" }
  },
  setup(__props) {
    const props = __props;
    const theme = inject("theme", {});
    const i18n = useI18n();
    const className = computed(
      () => classNames(
        styles$q.ProgressBar,
        props.size && styles$q[variationName("size", props.size)],
        props.color && styles$q[variationName("tone", props.color)]
      )
    );
    computed(
      () => i18n.translate(
        props.progress < 0 ? "Polaris.ProgressBar.negativeWarningMessage" : "Polaris.ProgressBar.exceedWarningMessage",
        { progress: props.progress }
      )
    );
    const parsedProgress = computed(() => {
      if (props.progress < 0) {
        return 0;
      } else if (props.progress > 100) {
        return 100;
      }
      return props.progress;
    });
    const progressBarDuration = computed(
      () => props.animated ? theme.motion["motion-duration-500"] : theme.motion["motion-duration-0"]
    );
    const indicatorStyles = computed(() => ({
      "--pc-progress-bar-duration": progressBarDuration.value,
      "--pc-progress-bar-percent": parsedProgress.value / 100
    }));
    const onTransitionEnter = (el, done) => {
      setTimeout(() => {
        el.classList.add(styles$q.IndicatorAppearDone);
        done();
      }, 50);
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        createBaseVNode("progress", {
          max: "100",
          class: normalizeClass(unref(styles$q).Progress),
          "aria-labelledby": _ctx.ariaLabelledBy,
          value: parsedProgress.value
        }, null, 10, _hoisted_1$q),
        createVNode(Transition, {
          appear: "",
          duration: parseInt(progressBarDuration.value, 10),
          onEnter: onTransitionEnter
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              class: normalizeClass(unref(classNames)(unref(styles$q).Indicator)),
              style: normalizeStyle(indicatorStyles.value)
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(styles$q).Label)
              }, toDisplayString(parsedProgress.value) + "%", 3)
            ], 6)
          ]),
          _: 1
        }, 8, ["duration"])
      ], 2);
    };
  }
});
const RadioButton = "Polaris-RadioButton";
const Input$3 = "Polaris-RadioButton__Input";
const Backdrop$2 = "Polaris-RadioButton__Backdrop";
const ChoiceLabel = "Polaris-RadioButton__ChoiceLabel";
const toneMagic$2 = "Polaris-RadioButton--toneMagic";
const styles$p = {
  RadioButton,
  Input: Input$3,
  Backdrop: Backdrop$2,
  ChoiceLabel,
  toneMagic: toneMagic$2
};
const _hoisted_1$p = ["id", "name", "value", "checked", "disabled", "aria-describedby"];
const _sfc_main$I = /* @__PURE__ */ defineComponent({
  __name: "RadioButton",
  props: /* @__PURE__ */ mergeModels({
    bleed: {},
    bleedBlockStart: {},
    bleedBlockEnd: {},
    bleedInlineStart: {},
    bleedInlineEnd: {},
    ariaDescribedBy: {},
    label: {},
    labelHidden: { type: Boolean },
    checked: { type: Boolean },
    disabled: { type: Boolean },
    id: {},
    name: {},
    value: {},
    fill: {},
    helpText: {},
    tone: {}
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const uniqId = useId();
    const model = useModel(__props, "modelValue");
    const inputNode = ref(null);
    const id = computed(() => props.id ?? uniqId);
    const name = computed(() => props.name || id.value);
    const normalizedValue = computed(() => String(props.value ?? id.value));
    const ariaDescribedBy = computed(() => {
      const output = [];
      if (hasSlot(slots.helpText) || props.helpText) {
        output.push(helpTextID$1(`${id.value}`));
      }
      if (props.ariaDescribedBy) {
        output.push(props.ariaDescribedBy);
      }
      return output.length ? output.join(" ") : void 0;
    });
    const inputClassName = computed(() => classNames(
      styles$p.Input,
      props.tone && styles$p[variationName("tone", props.tone)]
    ));
    const extraChoiceProps = computed(() => ({
      bleed: props.bleed,
      bleedBlockStart: props.bleedBlockStart,
      bleedBlockEnd: props.bleedBlockEnd,
      bleedInlineStart: props.bleedInlineStart,
      bleedInlineEnd: props.bleedInlineEnd
    }));
    const handleBlur = () => {
      emits("blur");
    };
    const handleChange = (event) => {
      const target = event.target;
      model.value = normalizedValue.value;
      emits("change", target.checked, normalizedValue.value);
    };
    const handleFocus = () => {
      emits("focus");
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$2k), mergeProps({
        "label-hidden": _ctx.labelHidden,
        disabled: _ctx.disabled,
        id: `${id.value}`,
        "label-class-name": unref(styles$p).ChoiceLabel,
        fill: _ctx.fill,
        tone: model.value === normalizedValue.value ? _ctx.tone : void 0
      }, extraChoiceProps.value), createSlots({
        default: withCtx(() => [
          createBaseVNode("span", {
            class: normalizeClass(unref(styles$p).RadioButton)
          }, [
            createBaseVNode("input", {
              ref_key: "inputNode",
              ref: inputNode,
              id: `${id.value}`,
              name: `${name.value}`,
              value: _ctx.value,
              type: "radio",
              checked: _ctx.checked || model.value === normalizedValue.value,
              disabled: _ctx.disabled,
              class: normalizeClass(inputClassName.value),
              "aria-describedby": ariaDescribedBy.value,
              onChange: handleChange,
              onFocus: handleFocus,
              onBlur: handleBlur
            }, null, 42, _hoisted_1$p),
            createBaseVNode("span", {
              class: normalizeClass(unref(styles$p).Backdrop)
            }, null, 2)
          ], 2)
        ]),
        _: 2
      }, [
        unref(hasSlot)(unref(slots).label) || _ctx.label ? {
          name: "label",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        unref(hasSlot)(unref(slots).helpText) || _ctx.helpText ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).helpText) ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0
      ]), 1040, ["label-hidden", "disabled", "id", "label-class-name", "fill", "tone"]);
    };
  }
});
function invertNumber(number) {
  if (Math.sign(number) === 1) {
    return -Math.abs(number);
  } else if (Math.sign(number) === -1) {
    return Math.abs(number);
  } else {
    return 0;
  }
}
const RangeSlider = "Polaris-RangeSlider";
const sharedStyles = {
  RangeSlider
};
const SingleThumb = "Polaris-RangeSlider-SingleThumb";
const disabled$5 = "Polaris-RangeSlider-SingleThumb--disabled";
const InputWrapper = "Polaris-RangeSlider-SingleThumb__InputWrapper";
const Prefix$3 = "Polaris-RangeSlider-SingleThumb__Prefix";
const Suffix$2 = "Polaris-RangeSlider-SingleThumb__Suffix";
const Input$2 = "Polaris-RangeSlider-SingleThumb__Input";
const error$3 = "Polaris-RangeSlider-SingleThumb--error";
const Output$1 = "Polaris-RangeSlider-SingleThumb__Output";
const OutputBubble$1 = "Polaris-RangeSlider-SingleThumb__OutputBubble";
const styles$o = {
  SingleThumb,
  disabled: disabled$5,
  InputWrapper,
  Prefix: Prefix$3,
  Suffix: Suffix$2,
  Input: Input$2,
  error: error$3,
  Output: Output$1,
  OutputBubble: OutputBubble$1
};
const _hoisted_1$o = ["id", "name", "min", "max", "step", "value", "disabled", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-invalid", "aria-describedby"];
const _hoisted_2$j = ["for"];
const _sfc_main$H = /* @__PURE__ */ defineComponent({
  __name: "SingleThumb",
  props: /* @__PURE__ */ mergeModels({
    modelValue: {},
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    id: {},
    min: {},
    max: {},
    step: {},
    output: { type: Boolean },
    helpText: {},
    error: {},
    disabled: { type: Boolean },
    prefix: {},
    suffix: {}
  }, {
    "modelValue": {
      required: true
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const { hasSlot } = useHasSlot();
    const clampedValue = computed(() => clamp(model.value, props.min, props.max));
    const ariaDescribedBy = computed(() => {
      const describedBy = [];
      if (props.error) {
        describedBy.push(`${props.id}Error`);
      }
      if (props.helpText) {
        describedBy.push(helpTextID(props.id));
      }
      return describedBy.length ? describedBy.join(" ") : void 0;
    });
    const sliderProgress = computed(() => (clampedValue.value - props.min) * 100 / (props.max - props.min));
    const outputFactor = computed(() => invertNumber((sliderProgress.value - 50) / 100));
    const cssVars = computed(() => ({
      "--pc-range-slider-min": props.min,
      "--pc-range-slider-max": props.max,
      "--pc-range-slider-current": clampedValue.value,
      "--pc-range-slider-progress": `${sliderProgress.value}%`,
      "--pc-range-slider-output-factor": `${outputFactor.value}`
    }));
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const hasPrefix = computed(() => hasSlot(slots.prefix) || props.prefix);
    const hasSuffix = computed(() => hasSlot(slots.suffix) || props.suffix);
    const className = computed(() => classNames(
      styles$o.SingleThumb,
      sharedStyles.RangeSlider,
      props.error && styles$o.error,
      props.disabled && styles$o.disabled
    ));
    const handleUpdate = (event) => {
      const target = event.target;
      model.value = parseFloat(target.value);
    };
    const handleChange = (event) => {
      const target = event.target;
      model.value = parseFloat(target.value);
      emits("change", model.value, props.id);
    };
    const handleFocus = () => {
      emits("focus");
    };
    const handleBlur = () => {
      emits("blur");
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1n), {
        id: _ctx.id,
        error: _ctx.error,
        action: _ctx.labelAction,
        "label-hidden": _ctx.labelHidden
      }, createSlots({
        default: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(className.value),
            style: normalizeStyle(cssVars.value)
          }, [
            hasPrefix.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles$o).Prefix)
            }, [
              unref(slots).prefix ? renderSlot(_ctx.$slots, "prefix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.prefix), 1)
              ], 64))
            ], 2)) : createCommentVNode("", true),
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$o).InputWrapper)
            }, [
              createBaseVNode("input", {
                type: "range",
                class: normalizeClass(unref(styles$o).Input),
                id: _ctx.id,
                name: _ctx.id,
                min: _ctx.min,
                max: _ctx.max,
                step: _ctx.step,
                value: clampedValue.value,
                disabled: _ctx.disabled,
                "aria-valuemin": _ctx.min,
                "aria-valuemax": _ctx.max,
                "aria-valuenow": clampedValue.value,
                "aria-invalid": Boolean(_ctx.error),
                "aria-describedby": ariaDescribedBy.value,
                onInput: handleUpdate,
                onChange: handleChange,
                onFocus: handleFocus,
                onBlur: handleBlur
              }, null, 42, _hoisted_1$o),
              createBaseVNode("output", {
                class: normalizeClass(unref(styles$o).Output),
                for: _ctx.id
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$o).OutputBubble)
                }, [
                  createVNode(unref(_sfc_main$f), {
                    as: "span",
                    variant: "headingSm",
                    alignment: "center"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(clampedValue.value), 1)
                    ]),
                    _: 1
                  })
                ], 2)
              ], 10, _hoisted_2$j)
            ], 2),
            hasSuffix.value ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(styles$o).Suffix)
            }, [
              unref(slots).suffix ? renderSlot(_ctx.$slots, "suffix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.suffix), 1)
              ], 64))
            ], 2)) : createCommentVNode("", true)
          ], 6)
        ]),
        _: 2
      }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            unref(slots).label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        hasHelpText.value ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(slots).helpText ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["id", "error", "action", "label-hidden"]);
    };
  }
});
const DualThumb = "Polaris-RangeSlider-DualThumb";
const TrackWrapper = "Polaris-RangeSlider-DualThumb__TrackWrapper";
const disabled$4 = "Polaris-RangeSlider-DualThumb--disabled";
const Track = "Polaris-RangeSlider-DualThumb__Track";
const error$2 = "Polaris-RangeSlider-DualThumb--error";
const Thumbs = "Polaris-RangeSlider-DualThumb__Thumbs";
const Prefix$2 = "Polaris-RangeSlider-DualThumb__Prefix";
const Suffix$1 = "Polaris-RangeSlider-DualThumb__Suffix";
const Output = "Polaris-RangeSlider-DualThumb__Output";
const OutputBubble = "Polaris-RangeSlider-DualThumb__OutputBubble";
const styles$n = {
  DualThumb,
  TrackWrapper,
  disabled: disabled$4,
  Track,
  error: error$2,
  "Track--dashed": "Polaris-RangeSlider-DualThumb--trackDashed",
  Thumbs,
  Prefix: Prefix$2,
  Suffix: Suffix$1,
  Output,
  OutputBubble
};
const _hoisted_1$n = ["id", "aria-disabled", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-invalid", "aria-describedby", "aria-labelledby"];
const _hoisted_2$i = ["for"];
const _hoisted_3$d = ["id", "aria-disabled", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-invalid", "aria-describedby", "aria-labelledby"];
const _hoisted_4$8 = ["for"];
const _sfc_main$G = /* @__PURE__ */ defineComponent({
  __name: "DualThumb",
  props: /* @__PURE__ */ mergeModels({
    modelValue: {},
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    id: {},
    min: {},
    max: {},
    step: {},
    output: { type: Boolean },
    helpText: {},
    error: {},
    disabled: { type: Boolean },
    prefix: {},
    suffix: {}
  }, {
    "modelValue": {
      required: true
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const { hasSlot } = useHasSlot();
    const model = useModel(__props, "modelValue");
    const trackWidth = ref(0);
    const trackLeft = ref(0);
    const thumbLower = ref(null);
    const thumbUpper = ref(null);
    const track = ref(null);
    const trackWrapper = ref(null);
    const idLower = computed(() => props.id);
    const idUpper = computed(() => `${props.id}Upper`);
    const ariaDescribedBy = computed(() => {
      const describedBy = [];
      if (props.error) {
        describedBy.push(`${props.id}Error`);
      }
      return describedBy.length ? describedBy.join(" ") : void 0;
    });
    const trackWrapperClassName = computed(() => classNames(
      styles$n.TrackWrapper,
      props.error && styles$n.error,
      props.disabled && styles$n.disabled
    ));
    const thumbLowerClassName = computed(() => classNames(
      styles$n.Thumbs,
      styles$n.ThumbLower,
      props.disabled && styles$n.disabled
    ));
    const thumbUpperClassName = computed(() => classNames(
      styles$n.Thumbs,
      styles$n.ThumbUpper,
      props.disabled && styles$n.disabled
    ));
    const range = computed(() => props.max - props.min);
    const minValuePosition = computed(() => props.min / range.value * trackWidth.value);
    const leftPositionThumbLower = computed(
      () => model.value[0] / range.value * trackWidth.value - minValuePosition.value
    );
    const leftPositionThumbUpper = computed(
      () => model.value[1] / range.value * trackWidth.value - minValuePosition.value
    );
    const outputLowerClassName = computed(() => classNames(styles$n.Output, styles$n.OutputLower));
    const outputUpperClassName = computed(() => classNames(styles$n.Output, styles$n.OutputUpper));
    const cssVars = computed(() => ({
      "--pc-range-slider-progress-lower": `${leftPositionThumbLower.value}px`,
      "--pc-range-slider-progress-upper": `${leftPositionThumbUpper.value}px`
    }));
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const hasPrefix = computed(() => hasSlot(slots.prefix) || props.prefix);
    const hasSuffix = computed(() => hasSlot(slots.suffix) || props.suffix);
    onMounted(() => {
      setTrackPosition();
      if (trackWrapper.value) {
        trackWrapper.value.addEventListener("touchstart", handleTouchStartTrack, { passive: false });
      }
    });
    watch(() => track.value, () => {
      setTrackPosition();
    });
    onBeforeUnmount(() => {
      if (trackWrapper.value) {
        trackWrapper.value.removeEventListener("touchstart", handleTouchStartTrack);
      }
    });
    const setTrackPosition = debounce(
      () => {
        if (track.value) {
          const thumbSize = 16;
          const { width: width2, left } = track.value.getBoundingClientRect();
          const adjustedTrackWidth = width2 - thumbSize;
          const adjustedTrackLeft = left + thumbSize / 2;
          const range2 = props.max - props.min;
          const minValuePosition2 = props.min / range2 * adjustedTrackWidth;
          trackWidth.value = adjustedTrackWidth;
          trackLeft.value = adjustedTrackLeft - minValuePosition2;
        }
      },
      40,
      { leading: true, trailing: true, maxWait: 40 }
    );
    useEventListener("resize", setTrackPosition);
    const handleMouseDownThumbLower = (event) => {
      if (event.button !== 0 || props.disabled)
        return;
      registerMouseMoveHandler(handleMouseMoveThumbLower);
      event.stopPropagation();
    };
    const handleMouseMoveThumbLower = (event) => {
      const valueUpper = model.value[1];
      setValue(
        [actualXPosition(event.clientX), valueUpper],
        1
        /* Upper */
      );
    };
    const handleTouchStartThumbLower = (event) => {
      if (props.disabled)
        return;
      registerTouchMoveHandler(handleTouchMoveThumbLower);
      event.stopPropagation();
    };
    const handleTouchMoveThumbLower = (event) => {
      event.preventDefault();
      const valueUpper = model.value[1];
      setValue(
        [actualXPosition(event.touches[0].clientX), valueUpper],
        1
        /* Upper */
      );
    };
    const handleMouseDownThumbUpper = (event) => {
      if (event.button !== 0 || props.disabled)
        return;
      registerMouseMoveHandler(handleMouseMoveThumbUpper);
      event.stopPropagation();
    };
    const handleMouseMoveThumbUpper = (event) => {
      const valueLower = model.value[0];
      setValue(
        [valueLower, actualXPosition(event.clientX)],
        0
        /* Lower */
      );
    };
    const handleTouchStartThumbUpper = (event) => {
      if (props.disabled)
        return;
      registerTouchMoveHandler(handleTouchMoveThumbUpper);
      event.stopPropagation();
    };
    const handleTouchMoveThumbUpper = (event) => {
      event.preventDefault();
      const valueLower = model.value[0];
      setValue(
        [valueLower, actualXPosition(event.touches[0].clientX)],
        0
        /* Lower */
      );
    };
    const handleKeypressLower = (event) => {
      if (props.disabled)
        return;
      const handlerMap = {
        [Key.UpArrow]: incrementValueLower,
        [Key.RightArrow]: incrementValueLower,
        [Key.DownArrow]: decrementValueLower,
        [Key.LeftArrow]: decrementValueLower
      };
      const handler = handlerMap[event.keyCode];
      if (handler != null) {
        event.preventDefault();
        event.stopPropagation();
        handler();
      }
    };
    const handleKeypressUpper = (event) => {
      if (props.disabled)
        return;
      const handlerMap = {
        [Key.UpArrow]: incrementValueUpper,
        [Key.RightArrow]: incrementValueUpper,
        [Key.DownArrow]: decrementValueUpper,
        [Key.LeftArrow]: decrementValueUpper
      };
      const handler = handlerMap[event.keyCode];
      if (handler != null) {
        event.preventDefault();
        event.stopPropagation();
        handler();
      }
    };
    const incrementValueLower = () => {
      setValue(
        [model.value[0] + props.step, model.value[1]],
        1
        /* Upper */
      );
    };
    const decrementValueLower = () => {
      setValue(
        [model.value[0] - props.step, model.value[1]],
        1
        /* Upper */
      );
    };
    const incrementValueUpper = () => {
      setValue(
        [model.value[0], model.value[1] + props.step],
        0
        /* Lower */
      );
    };
    const decrementValueUpper = () => {
      setValue(
        [model.value[0], model.value[1] - props.step],
        0
        /* Lower */
      );
    };
    const setValue = (dirtyValue, control) => {
      const sanitizedValue = sanitizeValue(dirtyValue, props.min, props.max, props.step, control);
      if (isTupleEqual(sanitizedValue, model.value) === false) {
        model.value = sanitizedValue;
        emits("change", sanitizedValue, props.id);
      }
    };
    const handleMouseDownTrack = (event) => {
      if (event.button !== 0 || props.disabled)
        return;
      event.preventDefault();
      const clickXPosition = actualXPosition(event.clientX);
      const distanceFromLowerThumb = Math.abs(model.value[0] - clickXPosition);
      const distanceFromUpperThumb = Math.abs(model.value[1] - clickXPosition);
      if (distanceFromLowerThumb <= distanceFromUpperThumb) {
        setValue(
          [clickXPosition, model.value[1]],
          1
          /* Upper */
        );
        registerMouseMoveHandler(handleMouseMoveThumbLower);
        if (thumbLower.value) {
          thumbLower.value.focus();
        }
      } else {
        setValue(
          [model.value[0], clickXPosition],
          0
          /* Lower */
        );
        registerMouseMoveHandler(handleMouseMoveThumbUpper);
        if (thumbUpper.value) {
          thumbUpper.value.focus();
        }
      }
    };
    const handleTouchStartTrack = (event) => {
      if (props.disabled)
        return;
      event.preventDefault();
      const clickXPosition = actualXPosition(event.touches[0].clientX);
      const distanceFromLowerThumb = Math.abs(model.value[0] - clickXPosition);
      const distanceFromUpperThumb = Math.abs(model.value[1] - clickXPosition);
      if (distanceFromLowerThumb <= distanceFromUpperThumb) {
        setValue(
          [clickXPosition, model.value[1]],
          1
          /* Upper */
        );
        registerTouchMoveHandler(handleTouchMoveThumbLower);
        if (thumbLower.value) {
          thumbLower.value.focus();
        }
      } else {
        setValue(
          [model.value[0], clickXPosition],
          0
          /* Lower */
        );
        registerTouchMoveHandler(handleTouchMoveThumbUpper);
        if (thumbUpper.value) {
          thumbUpper.value.focus();
        }
      }
    };
    const actualXPosition = (dirtyXPosition) => {
      if (track.value) {
        const relativeX = dirtyXPosition - trackLeft.value;
        const percentageOfTrack = relativeX / trackWidth.value;
        return percentageOfTrack * (props.max - props.min);
      } else {
        return 0;
      }
    };
    function registerMouseMoveHandler(handler) {
      document.addEventListener("mousemove", handler);
      document.addEventListener(
        "mouseup",
        () => {
          document.removeEventListener("mousemove", handler);
        },
        { once: true }
      );
    }
    function registerTouchMoveHandler(handler) {
      const removeHandler = () => {
        document.removeEventListener("touchmove", handler);
        document.removeEventListener("touchend", removeHandler);
        document.removeEventListener("touchcancel", removeHandler);
      };
      document.addEventListener("touchmove", handler, { passive: false });
      document.addEventListener("touchend", removeHandler, { once: true });
      document.addEventListener("touchcancel", removeHandler, { once: true });
    }
    function sanitizeValue(value, min, max, step, control = 1) {
      let upperValue = inBoundsUpper(roundedToStep(value[1]));
      let lowerValue = inBoundsLower(roundedToStep(value[0]));
      const maxLowerValue = upperValue - step;
      const minUpperValue = lowerValue + step;
      if (control === 1 && lowerValue > maxLowerValue) {
        lowerValue = maxLowerValue;
      } else if (control === 0 && upperValue < minUpperValue) {
        upperValue = minUpperValue;
      }
      return [lowerValue, upperValue];
      function inBoundsUpper(value2) {
        const lowerMin = min + step;
        if (value2 < lowerMin) {
          return lowerMin;
        } else if (value2 > max) {
          return max;
        } else {
          return value2;
        }
      }
      function inBoundsLower(value2) {
        const upperMax = max - step;
        if (value2 < min) {
          return min;
        } else if (value2 > upperMax) {
          return upperMax;
        } else {
          return value2;
        }
      }
      function roundedToStep(value2) {
        return Math.round(value2 / step) * step;
      }
    }
    function isTupleEqual(a, b) {
      if (!a || !b) {
        return false;
      }
      return a[0] === b[0] && a[1] === b[1];
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1n), {
        id: _ctx.id,
        error: _ctx.error,
        action: _ctx.labelAction,
        "label-hidden": _ctx.labelHidden
      }, createSlots({
        default: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(unref(classNames)(unref(styles$n).DualThumb, unref(sharedStyles).RangeSlider))
          }, [
            hasPrefix.value ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles$n).Prefix)
            }, [
              unref(slots).prefix ? renderSlot(_ctx.$slots, "prefix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.prefix), 1)
              ], 64))
            ], 2)) : createCommentVNode("", true),
            createBaseVNode("div", {
              ref_key: "trackWrapper",
              ref: trackWrapper,
              class: normalizeClass(trackWrapperClassName.value),
              onMousedown: handleMouseDownTrack
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(styles$n).Track),
                style: normalizeStyle(cssVars.value),
                ref_key: "track",
                ref: track
              }, null, 6),
              createBaseVNode("div", {
                class: normalizeClass(unref(styles$n)["Track--dashed"])
              }, null, 2),
              createBaseVNode("div", {
                ref_key: "thumbLower",
                ref: thumbLower,
                id: idLower.value,
                class: normalizeClass(thumbLowerClassName.value),
                style: normalizeStyle({ left: `${leftPositionThumbLower.value}px` }),
                role: "slider",
                "aria-disabled": _ctx.disabled,
                "aria-valuemin": _ctx.min,
                "aria-valuemax": _ctx.max,
                "aria-valuenow": model.value[0],
                "aria-invalid": Boolean(_ctx.error),
                "aria-describedby": ariaDescribedBy.value,
                "aria-labelledby": unref(labelId)(_ctx.id),
                tabindex: "0",
                onFocus: _cache[0] || (_cache[0] = ($event) => emits("focus")),
                onBlur: _cache[1] || (_cache[1] = ($event) => emits("blur")),
                onKeydown: handleKeypressLower,
                onMousedown: handleMouseDownThumbLower,
                onTouchstart: handleTouchStartThumbLower
              }, null, 46, _hoisted_1$n),
              !_ctx.disabled && _ctx.output ? (openBlock(), createElementBlock("output", {
                key: 0,
                for: idLower.value,
                class: normalizeClass(outputLowerClassName.value),
                style: normalizeStyle({ left: `${leftPositionThumbLower.value}px` })
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$n).OutputBubble)
                }, [
                  createVNode(unref(_sfc_main$f), {
                    as: "span",
                    variant: "headingSm",
                    alignment: "center"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(model.value[0]), 1)
                    ]),
                    _: 1
                  })
                ], 2)
              ], 14, _hoisted_2$i)) : createCommentVNode("", true),
              createBaseVNode("div", {
                ref_key: "thumbUpper",
                ref: thumbUpper,
                id: idUpper.value,
                class: normalizeClass(thumbUpperClassName.value),
                style: normalizeStyle({ left: `${leftPositionThumbUpper.value}px` }),
                role: "slider",
                "aria-disabled": _ctx.disabled,
                "aria-valuemin": _ctx.min,
                "aria-valuemax": _ctx.max,
                "aria-valuenow": model.value[1],
                "aria-invalid": Boolean(_ctx.error),
                "aria-describedby": ariaDescribedBy.value,
                "aria-labelledby": unref(labelId)(_ctx.id),
                tabindex: "0",
                onFocus: _cache[2] || (_cache[2] = ($event) => emits("focus")),
                onBlur: _cache[3] || (_cache[3] = ($event) => emits("blur")),
                onKeydown: handleKeypressUpper,
                onMousedown: handleMouseDownThumbUpper,
                onTouchstart: handleTouchStartThumbUpper
              }, null, 46, _hoisted_3$d),
              !_ctx.disabled && _ctx.output ? (openBlock(), createElementBlock("output", {
                key: 1,
                for: idUpper.value,
                class: normalizeClass(outputUpperClassName.value),
                style: normalizeStyle({ left: `${leftPositionThumbUpper.value}px` })
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(unref(styles$n).OutputBubble)
                }, [
                  createVNode(unref(_sfc_main$f), {
                    as: "span",
                    variant: "headingSm",
                    alignment: "center"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(model.value[1]), 1)
                    ]),
                    _: 1
                  })
                ], 2)
              ], 14, _hoisted_4$8)) : createCommentVNode("", true)
            ], 34),
            hasSuffix.value ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass(unref(styles$n).Suffix)
            }, [
              unref(slots).suffix ? renderSlot(_ctx.$slots, "suffix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createTextVNode(toDisplayString(_ctx.suffix), 1)
              ], 64))
            ], 2)) : createCommentVNode("", true)
          ], 2)
        ]),
        _: 2
      }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            unref(slots).label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        hasHelpText.value ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(slots).helpText ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["id", "error", "action", "label-hidden"]);
    };
  }
});
const _sfc_main$F = /* @__PURE__ */ defineComponent({
  __name: "RangeSlider",
  props: /* @__PURE__ */ mergeModels({
    modelValue: {},
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    id: {},
    min: { default: 0 },
    max: { default: 100 },
    step: { default: 1 },
    output: { type: Boolean },
    helpText: {},
    error: {},
    disabled: { type: Boolean },
    prefix: {},
    suffix: {}
  }, {
    "modelValue": {
      required: true
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const id = useId();
    const { hasSlot } = useHasSlot();
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const hasPrefix = computed(() => hasSlot(slots.prefix) || props.prefix);
    const hasSuffix = computed(() => hasSlot(slots.suffix) || props.suffix);
    const sharedProps = computed(() => {
      const { id: id2, min, max, step, ...rest } = props;
      return rest;
    });
    const elm = isDualThumb(model.value) ? h(_sfc_main$G) : h(_sfc_main$H);
    const handleChange = (value) => {
      emits("change", value, `${id}`);
    };
    function isDualThumb(value) {
      return Array.isArray(value);
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(unref(elm)), mergeProps({
        id: `${unref(id)}`,
        min: _ctx.min,
        max: _ctx.max,
        step: _ctx.step
      }, sharedProps.value, {
        modelValue: model.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
        onChange: handleChange
      }), createSlots({ _: 2 }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            unref(slots).label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        hasHelpText.value ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(slots).helpText ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0,
        hasPrefix.value ? {
          name: "prefix",
          fn: withCtx(() => [
            unref(slots).prefix ? renderSlot(_ctx.$slots, "prefix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.prefix), 1)
            ], 64))
          ]),
          key: "2"
        } : void 0,
        hasSuffix.value ? {
          name: "suffix",
          fn: withCtx(() => [
            unref(slots).suffix ? renderSlot(_ctx.$slots, "suffix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.suffix), 1)
            ], 64))
          ]),
          key: "3"
        } : void 0
      ]), 1040, ["id", "min", "max", "step", "modelValue"]);
    };
  }
});
const SELECT_ALL_ITEMS$1 = "All";
const ResourceItem = "Polaris-ResourceItem";
const Actions = "Polaris-ResourceItem__Actions";
const ItemWrapper$1 = "Polaris-ResourceItem__ItemWrapper";
const CheckboxWrapper = "Polaris-ResourceItem__CheckboxWrapper";
const focusedInner = "Polaris-ResourceItem--focusedInner";
const focused = "Polaris-ResourceItem--focused";
const selected = "Polaris-ResourceItem--selected";
const Link$1 = "Polaris-ResourceItem__Link";
const Button$1 = "Polaris-ResourceItem__Button";
const selectable = "Polaris-ResourceItem--selectable";
const disabled$3 = "Polaris-ResourceItem--disabled";
const ListItem = "Polaris-ResourceItem__ListItem";
const hasBulkActions = "Polaris-ResourceItem--hasBulkActions";
const styles$m = {
  ResourceItem,
  Actions,
  ItemWrapper: ItemWrapper$1,
  CheckboxWrapper,
  focusedInner,
  focused,
  selected,
  Link: Link$1,
  Button: Button$1,
  selectable,
  disabled: disabled$3,
  ListItem,
  hasBulkActions
};
const _hoisted_1$m = ["dataHref"];
const _hoisted_2$h = ["data-href"];
const _hoisted_3$c = ["aria-label", "aria-controls", "aria-expanded", "tabIndex"];
const _hoisted_4$7 = { key: 1 };
const _hoisted_5$3 = ["Class"];
const _hoisted_6$2 = ["Class"];
const _sfc_main$E = /* @__PURE__ */ defineComponent({
  __name: "ResourceItem",
  props: {
    disabled: { type: Boolean },
    accessibilityLabel: {},
    name: {},
    ariaControls: {},
    ariaExpanded: { type: Boolean },
    id: {},
    persistActions: { type: Boolean, default: false },
    shortcutActions: {},
    sortOrder: {},
    url: {},
    external: { type: Boolean },
    verticalAlignment: {},
    dataHref: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const breakpoints2 = useBreakpoints();
    const {
      selectedItems,
      selectable: selectable2,
      selectMode,
      loading: loading2,
      resourceName,
      onSelectionChange
    } = inject("resource-list-context", {});
    const actionsMenuVisible = ref(false);
    const focused2 = ref(false);
    const focusedInner2 = ref(false);
    const selected2 = ref(isSelected(props.id, selectedItems == null ? void 0 : selectedItems.value));
    const overlayId = useId();
    const node = ref(null);
    const buttonOverlay = ref(null);
    const isSelectable = computed(() => selectable2);
    const className = computed(() => classNames(
      styles$m.ResourceItem,
      focused2.value && styles$m.focused,
      isSelectable.value && styles$m.selectable,
      selected2.value && styles$m.selected,
      selectMode && styles$m.selectMode,
      props.persistActions && styles$m.persistActions,
      focusedInner2.value && styles$m.focusedInner
    ));
    const listItemClassName = computed(() => classNames(
      styles$m.ListItem,
      focused2.value && !focusedInner2.value && styles$m.focused
    ));
    const disclosureAccessibilityLabel = computed(
      () => props.name ? i18n.translate("Polaris.ResourceList.Item.actionsDropdownLabel", {
        accessibilityLabel: props.name
      }) : i18n.translate("Polaris.ResourceList.Item.actionsDropdown")
    );
    const checkboxAccessibilityLabel = computed(() => {
      return props.name || props.accessibilityLabel || i18n.translate("Polaris.Common.checkbox");
    });
    const tabIndex = computed(() => loading2 ? -1 : 0);
    const ariaLabel = computed(() => {
      return props.accessibilityLabel || i18n.translate("Polaris.ResourceList.Item.viewItem", {
        itemName: props.name || resourceName && resourceName.singular || ""
      });
    });
    watch(
      () => selectedItems == null ? void 0 : selectedItems.value,
      (newVal, oldVal) => {
        if (newVal !== oldVal) {
          selected2.value = isSelected(props.id, newVal);
        }
      }
    );
    const handleFocus = (event) => {
      if (event.target === buttonOverlay.value || node.value && event.target === node.value.querySelector(`#${overlayId}`)) {
        focused2.value = true;
        focusedInner2.value = false;
      } else if (node.value && node.value.contains(event.target)) {
        focused2.value = true;
        focusedInner2.value = true;
      }
    };
    const handleBlur = (event) => {
      const { relatedTarget } = event;
      if (node.value && relatedTarget instanceof Element && node.value.contains(relatedTarget)) {
        return;
      }
      focused2.value = false;
      focusedInner2.value = false;
    };
    const handleMouseOut = () => {
      if (focused2.value) {
        focused2.value = false;
        focusedInner2.value = false;
      }
    };
    const handleLargerSelectionArea = (event) => {
      event.stopPropagation();
      const e = event;
      handleSelection(!selected2.value, e.shiftKey);
    };
    const handleSelection = (value, shiftKey) => {
      const {
        id,
        sortOrder
      } = props;
      if (!id || !onSelectionChange) {
        return;
      }
      focused2.value = value;
      focusedInner2.value = value;
      onSelectionChange(!value, id, sortOrder, shiftKey);
    };
    const handleClick = (event) => {
      event.stopPropagation();
      const { id, url } = props;
      const { ctrlKey, metaKey } = event;
      const anchor = node.value && node.value.querySelector("a");
      if (selectMode) {
        handleLargerSelectionArea(event);
        return;
      }
      if (anchor === event.target) {
        return;
      }
      emits("click", id);
      if (url && (ctrlKey || metaKey)) {
        window.open(url, "_blank");
        return;
      }
      if (url && anchor) {
        anchor.click();
      }
    };
    const handleKeyUp = (event) => {
      const { key } = event;
      if (key === "Enter" && props.url && !selectMode && !props.disabled) {
        emits("click", props.id);
      }
    };
    const handleActionsClick = () => {
      actionsMenuVisible.value = !actionsMenuVisible.value;
    };
    const handleCloseRequest = () => {
      actionsMenuVisible.value = false;
    };
    const stopPropagation = (e) => {
      e.stopPropagation();
    };
    function isSelected(id, tmpSelectedItems) {
      return Boolean(
        tmpSelectedItems && (Array.isArray(tmpSelectedItems) && tmpSelectedItems.includes(id) || tmpSelectedItems === SELECT_ALL_ITEMS$1)
      );
    }
    function getAlignment(alignment) {
      switch (alignment) {
        case "leading":
          return "start";
        case "trailing":
          return "end";
        case "center":
          return "center";
        case "fill":
          return "stretch";
        case "baseline":
          return "baseline";
        default:
          return "start";
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        class: normalizeClass(listItemClassName.value),
        dataHref: _ctx.dataHref
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$m).ItemWrapper)
        }, [
          createBaseVNode("div", {
            ref_key: "node",
            ref: node,
            class: normalizeClass(className.value),
            onClick: _cache[1] || (_cache[1] = ($event) => _ctx.disabled ? () => {
            } : handleClick),
            onFocus: handleFocus,
            onBlur: handleBlur,
            onKeyup: handleKeyUp,
            onMouseout: handleMouseOut,
            "data-href": _ctx.url
          }, [
            !_ctx.disabled ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              _ctx.url ? (openBlock(), createBlock(unref(_sfc_main$2v), {
                key: 0,
                "aria-describedby": _ctx.id,
                "aria-label": ariaLabel.value,
                class: normalizeClass(unref(styles$m).Link),
                url: _ctx.url,
                external: _ctx.external,
                tabIndex: tabIndex.value,
                id: unref(overlayId)
              }, null, 8, ["aria-describedby", "aria-label", "class", "url", "external", "tabIndex", "id"])) : (openBlock(), createElementBlock("button", {
                key: 1,
                class: normalizeClass(unref(styles$m).Button),
                "aria-label": ariaLabel.value,
                "aria-controls": _ctx.ariaControls,
                "aria-expanded": _ctx.ariaExpanded,
                onClick: handleClick,
                tabIndex: tabIndex.value,
                ref_key: "buttonOverlay",
                ref: buttonOverlay
              }, null, 10, _hoisted_3$c))
            ], 64)) : createCommentVNode("", true),
            createVNode(unref(_sfc_main$2B), {
              id: _ctx.id,
              position: "relative",
              "padding-inline-start": "300",
              "padding-inline-end": "300",
              "padding-block-start": "300",
              "padding-block-end": "300"
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$1s), { columns: { xs: "1fr auto" } }, {
                  default: withCtx(() => {
                    var _a, _b, _c;
                    return [
                      createVNode(unref(_sfc_main$1s), {
                        columns: { xs: unref(hasSlot)(unref(slots).media) || isSelectable.value ? "auto 1fr" : "1fr" },
                        gap: "300"
                      }, {
                        default: withCtx(() => [
                          unref(hasSlot)(unref(slots).media) || isSelectable.value ? (openBlock(), createBlock(unref(_sfc_main$1r), {
                            key: 0,
                            gap: "300",
                            "block-align": unref(hasSlot)(unref(slots).media) || isSelectable.value ? "center" : getAlignment(_ctx.verticalAlignment)
                          }, {
                            default: withCtx(() => [
                              unref(selectable2) ? (openBlock(), createElementBlock("div", {
                                key: 0,
                                class: normalizeClass(unref(styles$m).CheckboxWrapper),
                                onClick: stopPropagation,
                                onChange: handleLargerSelectionArea
                              }, [
                                createVNode(unref(_sfc_main$2l), {
                                  modelValue: selected2.value,
                                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => selected2.value = $event),
                                  labelHidden: "",
                                  fill: "",
                                  label: checkboxAccessibilityLabel.value,
                                  disabled: unref(loading2) || _ctx.disabled,
                                  "label-class-name": unref(styles$m).CheckboxLabel,
                                  "bleed-inline-start": "300",
                                  "bleed-inline-end": "300",
                                  "bleed-block-start": "300",
                                  "bleed-block-end": "300"
                                }, null, 8, ["modelValue", "label", "disabled", "label-class-name"])
                              ], 34)) : createCommentVNode("", true),
                              unref(hasSlot)(unref(slots).media) ? (openBlock(), createElementBlock("div", _hoisted_4$7, [
                                renderSlot(_ctx.$slots, "media")
                              ])) : createCommentVNode("", true)
                            ]),
                            _: 3
                          }, 8, ["block-align"])) : createCommentVNode("", true),
                          createVNode(unref(_sfc_main$1r), {
                            "block-align": getAlignment(_ctx.verticalAlignment)
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(_sfc_main$2B), {
                                width: "100%",
                                padding: "0"
                              }, {
                                default: withCtx(() => [
                                  renderSlot(_ctx.$slots, "default")
                                ]),
                                _: 3
                              })
                            ]),
                            _: 3
                          }, 8, ["block-align"])
                        ]),
                        _: 3
                      }, 8, ["columns"]),
                      _ctx.shortcutActions && !unref(loading2) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                        _ctx.persistActions ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                          ((_a = unref(breakpoints2)) == null ? void 0 : _a.lgUp) ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            Class: unref(styles$m).Actions,
                            onClick: stopPropagation
                          }, [
                            createVNode(unref(_sfc_main$2q), null, {
                              default: withCtx(() => [
                                (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.shortcutActions, (action, index) => {
                                  return openBlock(), createBlock(unref(_sfc_main$2s), {
                                    key: String(index),
                                    action,
                                    overrides: { variant: "tertiary" }
                                  }, null, 8, ["action"]);
                                }), 128))
                              ]),
                              _: 1
                            })
                          ], 8, _hoisted_5$3)) : createCommentVNode("", true)
                        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                          ((_b = unref(breakpoints2)) == null ? void 0 : _b.lgUp) ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            Class: unref(styles$m).Actions,
                            onClick: stopPropagation
                          }, [
                            createVNode(unref(_sfc_main$2B), {
                              position: "absolute",
                              "inset-block-start": "400",
                              "insert-inline-end": "500"
                            }, {
                              default: withCtx(() => [
                                createVNode(unref(_sfc_main$2q), { variant: "segmented" }, {
                                  default: withCtx(() => [
                                    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.shortcutActions, (action, index) => {
                                      return openBlock(), createBlock(unref(_sfc_main$2s), {
                                        key: String(index),
                                        action,
                                        overrides: { size: "slim" }
                                      }, null, 8, ["action"]);
                                    }), 128))
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })
                          ], 8, _hoisted_6$2)) : createCommentVNode("", true)
                        ], 64))
                      ], 64)) : createCommentVNode("", true),
                      _ctx.shortcutActions && !unref(loading2) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        _ctx.persistActions ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                          !unref(selectMode) && ((_c = unref(breakpoints2)) == null ? void 0 : _c.lgDown) ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            onClick: stopPropagation
                          }, [
                            createVNode(unref(_sfc_main$P), {
                              active: actionsMenuVisible.value,
                              onClose: handleCloseRequest
                            }, {
                              activator: withCtx(() => [
                                createVNode(unref(_sfc_main$2t), {
                                  variant: "tertiary",
                                  accessibilityLabel: disclosureAccessibilityLabel.value,
                                  icon: unref(MenuHorizontalIcon),
                                  onClick: handleActionsClick
                                }, null, 8, ["accessibilityLabel", "icon"])
                              ]),
                              default: withCtx(() => [
                                createVNode(unref(_sfc_main$2Z), { items: _ctx.shortcutActions }, null, 8, ["items"])
                              ]),
                              _: 1
                            }, 8, ["active"])
                          ])) : createCommentVNode("", true)
                        ], 64)) : createCommentVNode("", true)
                      ], 64)) : createCommentVNode("", true)
                    ];
                  }),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["id"])
          ], 42, _hoisted_2$h)
        ], 2)
      ], 10, _hoisted_1$m);
    };
  }
});
const FiltersWrapper = "Polaris-ResourceList__FiltersWrapper";
const ResourceListWrapper = "Polaris-ResourceList__ResourceListWrapper";
const ResourceList = "Polaris-ResourceList";
const HeaderOuterWrapper = "Polaris-ResourceList__HeaderOuterWrapper";
const BulkActionsWrapper = "Polaris-ResourceList__BulkActionsWrapper";
const HeaderWrapper = "Polaris-ResourceList__HeaderWrapper";
const HeaderContentWrapper = "Polaris-ResourceList__HeaderContentWrapper";
const SortWrapper = "Polaris-ResourceList__SortWrapper";
const AlternateToolWrapper = "Polaris-ResourceList__AlternateToolWrapper";
const HeaderTitleWrapper = "Polaris-ResourceList__HeaderTitleWrapper";
const SelectAllActionsWrapper = "Polaris-ResourceList__SelectAllActionsWrapper";
const SelectAllActionsWrapperSticky = "Polaris-ResourceList__SelectAllActionsWrapperSticky";
const SelectAllActionsWrapperAtEnd = "Polaris-ResourceList__SelectAllActionsWrapperAtEnd";
const SelectAllActionsWrapperAtEndAppear = "Polaris-ResourceList__SelectAllActionsWrapperAtEndAppear";
const BulkActionsWrapperVisible = "Polaris-ResourceList__BulkActionsWrapperVisible";
const PaginationWrapper = "Polaris-ResourceList__PaginationWrapper";
const CheckableButtonWrapper = "Polaris-ResourceList__CheckableButtonWrapper";
const SelectButtonWrapper = "Polaris-ResourceList__SelectButtonWrapper";
const EmptySearchResultWrapper = "Polaris-ResourceList__EmptySearchResultWrapper";
const ItemWrapper = "Polaris-ResourceList__ItemWrapper";
const SpinnerContainer = "Polaris-ResourceList__SpinnerContainer";
const LoadingOverlay = "Polaris-ResourceList__LoadingOverlay";
const DisabledPointerEvents = "Polaris-ResourceList__DisabledPointerEvents";
const disableTextSelection = "Polaris-ResourceList--disableTextSelection";
const styles$l = {
  FiltersWrapper,
  ResourceListWrapper,
  ResourceList,
  HeaderOuterWrapper,
  BulkActionsWrapper,
  "HeaderWrapper-disabled": "Polaris-ResourceList__HeaderWrapper--disabled",
  "HeaderWrapper-overlay": "Polaris-ResourceList__HeaderWrapper--overlay",
  HeaderWrapper,
  "HeaderWrapper-isSticky": "Polaris-ResourceList__HeaderWrapper--isSticky",
  HeaderContentWrapper,
  "HeaderWrapper-inSelectMode": "Polaris-ResourceList__HeaderWrapper--inSelectMode",
  SortWrapper,
  AlternateToolWrapper,
  "HeaderWrapper-hasSelect": "Polaris-ResourceList__HeaderWrapper--hasSelect",
  "HeaderWrapper-hasAlternateTool": "Polaris-ResourceList__HeaderWrapper--hasAlternateTool",
  "HeaderWrapper-hasSort": "Polaris-ResourceList__HeaderWrapper--hasSort",
  HeaderTitleWrapper,
  SelectAllActionsWrapper,
  SelectAllActionsWrapperSticky,
  SelectAllActionsWrapperAtEnd,
  SelectAllActionsWrapperAtEndAppear,
  BulkActionsWrapperVisible,
  PaginationWrapper,
  CheckableButtonWrapper,
  SelectButtonWrapper,
  EmptySearchResultWrapper,
  ItemWrapper,
  "ItemWrapper-isLoading": "Polaris-ResourceList__ItemWrapper--isLoading",
  SpinnerContainer,
  LoadingOverlay,
  DisabledPointerEvents,
  disableTextSelection
};
const _hoisted_1$l = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$g = /* @__PURE__ */ createBaseVNode("path", { d: "M13.28 8.78a.75.75 0 0 0-1.06-1.06l-2.97 2.97-1.22-1.22a.75.75 0 0 0-1.06 1.06l1.75 1.75a.75.75 0 0 0 1.06 0z" }, null, -1);
const _hoisted_3$b = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M6.25 3.5A2.75 2.75 0 0 0 3.5 6.25v7.5a2.75 2.75 0 0 0 2.75 2.75h7.5a2.75 2.75 0 0 0 2.75-2.75v-7.5a2.75 2.75 0 0 0-2.75-2.75zM5 6.25C5 5.56 5.56 5 6.25 5h7.5c.69 0 1.25.56 1.25 1.25v7.5c0 .69-.56 1.25-1.25 1.25h-7.5C5.56 15 5 14.44 5 13.75z"
}, null, -1);
const _hoisted_4$6 = [
  _hoisted_2$g,
  _hoisted_3$b
];
function render$7(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$l, [..._hoisted_4$6]);
}
const CheckboxIcon = { render: render$7 };
const _hoisted_1$k = ["className"];
const _hoisted_2$f = ["aria-busy"];
const SMALL_SPINNER_HEIGHT = 28;
const LARGE_SPINNER_HEIGHT = 45;
const SELECT_ALL_ITEMS = "All";
const defaultTopPadding = 8;
const _sfc_main$D = /* @__PURE__ */ defineComponent({
  __name: "ResourceList",
  props: {
    items: {},
    flushFilters: { type: Boolean },
    resourceName: {},
    promotedBulkActions: {},
    bulkActions: {},
    selectedItems: { default: [] },
    isFiltered: { type: Boolean },
    selectable: { type: Boolean },
    hasMoreItems: { type: Boolean },
    loading: { type: Boolean },
    showHeader: { type: Boolean, default: true },
    totalItemsCount: {},
    sortValue: {},
    sortOptions: {},
    headerContent: {},
    idForItem: {},
    resolveItemId: {},
    pagination: {}
  },
  emits: ["selection-change", "sort-change"],
  setup(__props, { emit: __emit }) {
    var _a;
    function getAllItemsOnPage(items2, idForItem) {
      return items2.map((item, index) => {
        return idForItem(item, index);
      });
    }
    const isBreakpointsXS = () => {
      return typeof window === "undefined" ? false : window.innerWidth < parseFloat(toPx(themeDefault.breakpoints["breakpoints-sm"]) ?? "");
    };
    function defaultIdForItem(item, index) {
      if (item.props.id) {
        return item.props.id;
      }
      return Object.prototype.hasOwnProperty.call(item, "id") ? item.id : index.toString();
    }
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const i18n = useI18n();
    const { extractElement } = useExtractFragment();
    const { hasSlot } = useHasSlot();
    const selectMode = ref(Boolean(props.selectedItems && props.selectedItems.length > 0));
    const loadingPosition = ref(0);
    const lastSelected = ref();
    const smallScreen = ref(isBreakpointsXS());
    const checkableButtons = ref(/* @__PURE__ */ new Map());
    const isSticky = ref(false);
    const defaultResourceName = {
      singular: i18n.translate("Polaris.ResourceList.defaultItemSingular"),
      plural: i18n.translate("Polaris.ResourceList.defaultItemPlural")
    };
    const listRef = ref(null);
    const items = computed(() => {
      let tmpItems = [];
      if (slots.default) {
        const groups = slots.default().map((group) => {
          return extractElement(group);
        });
        tmpItems = groups.flat();
      }
      return tmpItems;
    });
    const selectedItemsCount = ref(props.selectedItems === SELECT_ALL_ITEMS ? `${items.value.length}+` : (_a = props.selectedItems) == null ? void 0 : _a.length);
    const sortValueSelect = computed(() => {
      return props.sortValue || "";
    });
    const isSelectable = computed(() => {
      return Boolean(
        props.promotedBulkActions && props.promotedBulkActions.length > 0 || props.bulkActions && props.bulkActions.length > 0 || props.selectable
      ) && !smallScreen.value;
    });
    const resourceName = computed(
      () => props.resourceName ? props.resourceName : defaultResourceName
    );
    const className = computed(() => classNames(
      styles$l.ItemWrapper,
      props.loading && styles$l["ItemWrapper-isLoading"]
    ));
    const resourceListClassName = computed(() => classNames(
      styles$l.ResourceList,
      // props.loading && styles.disabledPointerEvents,
      selectMode.value && styles$l.disableTextSelection
    ));
    const itemsExist = computed(() => items.value.length > 0);
    const needsHeader = computed(() => {
      return isSelectable.value || props.sortOptions && props.sortOptions.length > 0 || hasSlot(slots.alternateTool);
    });
    const showEmptyState = computed(() => hasSlot(slots.emptyState) && !itemsExist.value && !props.loading);
    const showEmptySearchState = computed(() => !showEmptyState.value && hasSlot(slots.filterControl) && !itemsExist.value && !props.loading);
    const showSortingSelect = computed(() => props.sortOptions && props.sortOptions.length > 0 && !hasSlot(slots.alternateTool));
    const showHeaderMarkup = computed(() => {
      return !showEmptyState.value && props.showHeader && !showEmptySearchState.value && (props.showHeader || needsHeader.value) && listRef.value;
    });
    const topPadding = computed(() => loadingPosition.value > 0 ? loadingPosition.value : defaultTopPadding);
    const spinnerStyle = computed(() => ({ paddingTop: `${topPadding.value}px` }));
    const spinnerSize = computed(() => items.value.length < 2 ? "small" : "large");
    const resourceListWrapperClassName = computed(() => classNames(
      styles$l.ResourceListWrapper,
      Boolean(isSelectable.value) && selectMode.value && !props.pagination && styles$l.ResourceListWrapperWithBulkActions
    ));
    const headerClassName = computed(() => {
      return classNames(
        styles$l.HeaderWrapper,
        props.sortOptions && props.sortOptions.length > 0 && !hasSlot(slots.alternateTool) && styles$l["HeaderWrapper-hasSort"],
        hasSlot(slots.alternateTool) && styles$l["HeaderWrapper-hasAlternateTool"],
        isSelectable.value && styles$l["HeaderWrapper-hasSelect"],
        props.loading && styles$l["HeaderWrapper-disabled"],
        isSelectable.value && selectMode.value && styles$l["HeaderWrapper-inSelectMode"],
        isSticky.value && styles$l["HeaderWrapper-isSticky"]
      );
    });
    const bulkActionClassNames = computed(() => classNames(
      styles$l.BulkActionsWrapper,
      selectMode.value && styles$l.BulkActionsWrapperVisible
    ));
    const headerTitle = computed(() => {
      const itemsCount = items.value.length;
      const resource = !props.loading && (!props.totalItemsCount && itemsCount === 1 || props.totalItemsCount === 1) ? resourceName.value.singular : resourceName.value.plural;
      if (props.loading) {
        return i18n.translate("Polaris.ResourceList.loading", { resource });
      } else if (props.totalItemsCount) {
        return i18n.translate("Polaris.ResourceList.showingTotalCount", {
          itemsCount,
          totalItemsCount: props.totalItemsCount,
          resource
        });
      } else {
        return i18n.translate("Polaris.ResourceList.showing", {
          itemsCount,
          resource
        });
      }
    });
    const selectAllActionsLabel = computed(() => i18n.translate("Polaris.ResourceList.selected", {
      selectedItemsCount: `${selectedItemsCount.value}`
    }));
    const bulkActionsAccessibilityLabel = computed(() => {
      var _a2;
      const selectedItemsCount2 = (_a2 = props.selectedItems) == null ? void 0 : _a2.length;
      const totalItemsCount = items.value.length;
      const allSelected = selectedItemsCount2 === totalItemsCount;
      if (totalItemsCount === 1 && allSelected) {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxDeselectAllSingle",
          {
            resourceNameSingular: resourceName.value.singular
          }
        );
      } else if (totalItemsCount === 1) {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxSelectAllSingle",
          {
            resourceNameSingular: resourceName.value.singular
          }
        );
      } else if (allSelected) {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxDeselectAllMultiple",
          {
            itemsLength: items.value.length,
            resourceNamePlural: resourceName.value.plural
          }
        );
      } else {
        return i18n.translate(
          "Polaris.ResourceList.a11yCheckboxSelectAllMultiple",
          {
            itemsLength: items.value.length,
            resourceNamePlural: resourceName.value.plural
          }
        );
      }
    });
    const handleStickyChange = (value) => {
      isSticky.value = value;
    };
    const selectAllSelectState = computed(() => {
      const { selectedItems, items: items2 } = props;
      let selectState = "indeterminate";
      if (!selectedItems || Array.isArray(selectedItems) && selectedItems.length === 0) {
        selectState = false;
      } else if (selectedItems === SELECT_ALL_ITEMS || Array.isArray(selectedItems) && selectedItems.length === items2.length) {
        selectState = true;
      }
      return selectState;
    });
    const paginatedSelectAllText = computed(() => {
      if (!isSelectable.value || !props.hasMoreItems) {
        return;
      }
      if (props.selectedItems === SELECT_ALL_ITEMS || Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length) {
        return i18n.translate(
          props.isFiltered ? "Polaris.ResourceList.allFilteredItemsSelected" : "Polaris.ResourceList.allItemsSelected",
          {
            itemsLength: items.value.length,
            resourceNamePlural: resourceName.value.plural
          }
        );
      }
      return "";
    });
    const paginatedSelectAllAction = computed(() => {
      if (!isSelectable.value || !props.hasMoreItems) {
        return;
      }
      const actionText = props.selectedItems === SELECT_ALL_ITEMS || Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length ? i18n.translate("Polaris.Common.undo") : i18n.translate(
        props.isFiltered ? "Polaris.ResourceList.selectAllFilteredItems" : "Polaris.ResourceList.selectAllItems",
        {
          itemsLength: items.value.length,
          resourceNamePlural: resourceName.value.plural
        }
      );
      return {
        content: actionText,
        onAction: handleSelectAllItemsInStore
      };
    });
    const generateItemId = (item, index) => {
      if (props.idForItem) {
        return props.idForItem(item, index);
      }
      return defaultIdForItem(item, index);
    };
    const emptySearchResultText = computed(() => ({
      title: i18n.translate("Polaris.ResourceList.emptySearchResultTitle", {
        resourceNamePlural: resourceName.value.plural
      }),
      description: i18n.translate(
        "Polaris.ResourceList.emptySearchResultDescription"
      )
    }));
    const handleSelectAllItemsInStore = () => {
      const newlySelectedItems = props.selectedItems === SELECT_ALL_ITEMS || Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length ? [] : getAllItemsOnPage(items.value, generateItemId);
      emits("selection-change", newlySelectedItems);
    };
    const handleSelectMode = (tmpSelectMode) => {
      selectMode.value = tmpSelectMode;
      if (!tmpSelectMode) {
        emits("selection-change", []);
      }
    };
    const handleResize = debounce(
      () => {
        const newSmallScreen = isBreakpointsXS();
        if (props.selectedItems && props.selectedItems.length === 0 && selectMode && !newSmallScreen) {
          handleSelectMode(false);
        }
        if (smallScreen.value !== newSmallScreen) {
          smallScreen.value = newSmallScreen;
        }
      },
      50,
      { leading: true, trailing: true, maxWait: 50 }
    );
    const setLoadingPosition = () => {
      if (listRef.value != null) {
        if (typeof window === "undefined") {
          return;
        }
        const overlay2 = listRef.value.getBoundingClientRect();
        const viewportHeight = Math.max(
          document.documentElement ? document.documentElement.clientHeight : 0,
          window.innerHeight || 0
        );
        const overflow = viewportHeight - overlay2.height;
        const spinnerHeight = items.value.length === 1 ? SMALL_SPINNER_HEIGHT : LARGE_SPINNER_HEIGHT;
        const spinnerPosition = overflow > 0 ? (overlay2.height - spinnerHeight) / 2 : (viewportHeight - overlay2.top - spinnerHeight) / 2;
        loadingPosition.value = spinnerPosition;
      }
    };
    const handleMultiSelectionChange = (lastSelectedChange, currentSelected, resolveItemId) => {
      const min = Math.min(lastSelectedChange, currentSelected);
      const max = Math.max(lastSelectedChange, currentSelected);
      return items.value.slice(min, max + 1).map(resolveItemId);
    };
    const handleSelectionChange = (selected22, id, sortOrder, shiftKey) => {
      if (props.selectedItems === null) {
        return;
      }
      let newlySelectedItems = props.selectedItems === SELECT_ALL_ITEMS ? getAllItemsOnPage(items.value, generateItemId) : [...props.selectedItems];
      if (sortOrder !== void 0) {
        lastSelected.value = sortOrder;
      }
      const lastSelectedFromState = lastSelected.value;
      let selectedIds = [id];
      if (shiftKey && lastSelectedFromState != null && sortOrder !== void 0 && props.resolveItemId) {
        selectedIds = handleMultiSelectionChange(
          lastSelectedFromState,
          sortOrder,
          props.resolveItemId
        );
      }
      newlySelectedItems = [.../* @__PURE__ */ new Set([...newlySelectedItems, ...selectedIds])];
      if (!selected22) {
        for (const selectedId of selectedIds) {
          newlySelectedItems.splice(newlySelectedItems.indexOf(selectedId), 1);
        }
      }
      if (newlySelectedItems.length === 0 && !isBreakpointsXS()) {
        handleSelectMode(false);
      } else if (newlySelectedItems.length > 0) {
        handleSelectMode(true);
      }
      emits("selection-change", newlySelectedItems);
    };
    const onSortChange = (selected22) => {
      emits("sort-change", selected22);
    };
    const handleToggleAll = () => {
      let newlySelectedItems;
      if (Array.isArray(props.selectedItems) && props.selectedItems.length === items.value.length || props.selectedItems === SELECT_ALL_ITEMS) {
        newlySelectedItems = [];
      } else {
        newlySelectedItems = items.value.map((item, index) => {
          return generateItemId(item, index);
        });
      }
      if (newlySelectedItems.length === 0 && !isBreakpointsXS()) {
        handleSelectMode(false);
      } else if (newlySelectedItems.length > 0) {
        handleSelectMode(true);
      }
      let checkbox;
      if (isBreakpointsXS()) {
        checkbox = checkableButtons.value.get("bulkSm");
      } else if (newlySelectedItems.length === 0) {
        checkbox = checkableButtons.value.get("plain");
      } else {
        checkbox = checkableButtons.value.get("bulkLg");
      }
      emits("selection-change", newlySelectedItems);
      setTimeout(() => {
        checkbox && checkbox.focus();
      }, 0);
    };
    onMounted(() => {
      if (props.loading) {
        setLoadingPosition();
      }
      useEventListener("resize", handleResize);
    });
    watch(
      () => props.loading,
      (newLoading) => {
        if (newLoading) {
          setLoadingPosition();
        }
      }
    );
    watch(
      () => [props.selectedItems, selectMode.value],
      ([newSelectedItems, newSelectMode], [oldSelectedItems]) => {
        if (newSelectedItems !== oldSelectedItems) {
          if (newSelectedItems && newSelectedItems.length > 0 && !newSelectMode) {
            selectMode.value = true;
          }
          if ((!newSelectedItems || newSelectedItems.length === 0) && !isBreakpointsXS()) {
            selectMode.value = false;
          }
        }
      }
    );
    watch(
      () => props.selectedItems,
      (newSelectedItems) => {
        if (newSelectedItems && (newSelectedItems === SELECT_ALL_ITEMS || newSelectedItems.length > 0)) {
          selectedItemsCount.value = newSelectedItems === SELECT_ALL_ITEMS ? `${items.value.length}+` : newSelectedItems.length;
        }
      },
      {
        immediate: true
      }
    );
    const selected2 = computed(() => {
      return props.selectedItems || [];
    });
    provide("resource-list-context", {
      selectable: isSelectable,
      selectedItems: selected2,
      selectMode,
      resourceName: props.resourceName,
      loading: props.loading,
      hasBulkActions: Boolean(props.bulkActions),
      onSelectionChange: handleSelectionChange
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        unref(hasSlot)(unref(slots).filterControl) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(classNames)(!_ctx.flushFilters && unref(styles$l).FiltersWrapper))
        }, [
          renderSlot(_ctx.$slots, "filterControl")
        ], 2)) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass(resourceListWrapperClassName.value)
        }, [
          showHeaderMarkup.value ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(styles$l).HeaderOuterWrapper)
          }, [
            createVNode(unref(_sfc_main$q), {
              "bounding-element": listRef.value,
              onStickyChange: handleStickyChange
            }, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass(headerClassName.value)
                }, [
                  _ctx.loading ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(unref(styles$l)["HeaderWrapper-overlay"])
                  }, null, 2)) : createCommentVNode("", true),
                  createBaseVNode("div", {
                    class: normalizeClass(unref(styles$l).HeaderContentWrapper)
                  }, [
                    createBaseVNode("div", {
                      class: normalizeClass(unref(styles$l).HeaderTitleWrapper)
                    }, toDisplayString(headerTitle.value), 3),
                    isSelectable.value ? (openBlock(), createElementBlock("div", {
                      key: 0,
                      class: normalizeClass(unref(styles$l).CheckableButtonWrapper)
                    }, [
                      createVNode(unref(_sfc_main$2m), {
                        accessibilityLabel: bulkActionsAccessibilityLabel.value,
                        label: headerTitle.value,
                        disabled: _ctx.loading,
                        selected: selectAllSelectState.value,
                        onToggleAll: handleToggleAll
                      }, null, 8, ["accessibilityLabel", "label", "disabled", "selected"])
                    ], 2)) : createCommentVNode("", true),
                    unref(hasSlot)(unref(slots).alternateTool) && !showSortingSelect.value ? (openBlock(), createElementBlock("div", {
                      key: 1,
                      class: normalizeClass(unref(styles$l).AlternateToolWrapper)
                    }, [
                      renderSlot(_ctx.$slots, "alternateTool")
                    ], 2)) : createCommentVNode("", true),
                    showSortingSelect.value && _ctx.sortOptions ? (openBlock(), createElementBlock("div", {
                      key: 2,
                      className: unref(styles$l).SortWrapper
                    }, [
                      createVNode(unref(_sfc_main$z), {
                        value: sortValueSelect.value,
                        labelInline: !smallScreen.value,
                        labelHidden: smallScreen.value,
                        options: _ctx.sortOptions,
                        disabled: selectMode.value,
                        onChange: onSortChange
                      }, {
                        label: withCtx(() => [
                          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.ResourceList.sortingLabel")), 1)
                        ]),
                        _: 1
                      }, 8, ["value", "labelInline", "labelHidden", "options", "disabled"])
                    ], 8, _hoisted_1$k)) : createCommentVNode("", true),
                    isSelectable.value ? (openBlock(), createElementBlock("div", {
                      key: 3,
                      class: normalizeClass(unref(styles$l).SelectButtonWrapper)
                    }, [
                      createVNode(unref(_sfc_main$2t), {
                        disabled: selectMode.value,
                        icon: unref(CheckboxIcon),
                        onClick: _cache[0] || (_cache[0] = () => handleSelectMode(true))
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.ResourceList.selectButtonText")), 1)
                        ]),
                        _: 1
                      }, 8, ["disabled", "icon"])
                    ], 2)) : createCommentVNode("", true)
                  ], 2),
                  isSelectable.value ? (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(bulkActionClassNames.value)
                  }, [
                    createVNode(unref(_sfc_main$2w), {
                      ref: "CheckableButtonRef",
                      "button-size": "medium",
                      "paginated-select-all-action": paginatedSelectAllAction.value,
                      "paginated-select-all-text": paginatedSelectAllText.value,
                      "accessibility-label": bulkActionsAccessibilityLabel.value,
                      selected: selectAllSelectState.value,
                      promotedActions: _ctx.promotedBulkActions,
                      actions: _ctx.bulkActions,
                      disabled: _ctx.loading,
                      "select-mode": selectMode.value,
                      label: selectAllActionsLabel.value,
                      onToggleAll: handleToggleAll,
                      onSelectModeToggle: handleSelectMode
                    }, null, 8, ["paginated-select-all-action", "paginated-select-all-text", "accessibility-label", "selected", "promotedActions", "actions", "disabled", "select-mode", "label"])
                  ], 2)) : createCommentVNode("", true)
                ], 2)
              ]),
              _: 3
            }, 8, ["bounding-element"])
          ], 2)) : createCommentVNode("", true),
          itemsExist.value ? (openBlock(), createElementBlock("ul", {
            key: 1,
            class: normalizeClass(resourceListClassName.value),
            "aria-busy": _ctx.loading,
            ref_key: "listRef",
            ref: listRef,
            "aria-live": "polite"
          }, [
            _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createBaseVNode("li", {
                class: normalizeClass(unref(styles$l).SpinnerContainer),
                style: normalizeStyle(spinnerStyle.value)
              }, [
                createVNode(unref(_sfc_main$r), {
                  size: spinnerSize.value,
                  accessibilityLabel: "Items are loading"
                }, null, 8, ["size"])
              ], 6),
              createBaseVNode("li", {
                class: normalizeClass(unref(styles$l).LoadingOverlay)
              }, null, 2)
            ], 64)) : createCommentVNode("", true),
            renderSlot(_ctx.$slots, "default")
          ], 10, _hoisted_2$f)) : createCommentVNode("", true),
          showEmptySearchState.value && unref(hasSlot)(unref(slots).emptySearchState) ? renderSlot(_ctx.$slots, "emptySearchState", { key: 2 }) : showEmptySearchState.value ? (openBlock(), createElementBlock("div", {
            key: 3,
            class: normalizeClass(unref(styles$l).EmptySearchResultWrapper)
          }, [
            createVNode(unref(_sfc_main$1$), mergeProps(emptySearchResultText.value, { "with-illustration": "" }), null, 16)
          ], 2)) : createCommentVNode("", true),
          showEmptyState.value ? renderSlot(_ctx.$slots, "emptyState", { key: 4 }) : createCommentVNode("", true),
          _ctx.loading && !itemsExist.value ? (openBlock(), createElementBlock("div", {
            key: 5,
            class: normalizeClass(className.value),
            tabindex: "-1"
          }, [
            _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createBaseVNode("li", {
                class: normalizeClass(unref(styles$l).SpinnerContainer),
                style: normalizeStyle(spinnerStyle.value)
              }, [
                createVNode(unref(_sfc_main$r), {
                  size: spinnerSize.value,
                  accessibilityLabel: "Items are loading"
                }, null, 8, ["size"])
              ], 6),
              createBaseVNode("li", {
                class: normalizeClass(unref(styles$l).LoadingOverlay)
              }, null, 2)
            ], 64)) : createCommentVNode("", true)
          ], 2)) : createCommentVNode("", true),
          _ctx.pagination ? (openBlock(), createElementBlock("div", {
            key: 6,
            class: normalizeClass(unref(styles$l).PaginationWrapper)
          }, [
            createVNode(unref(_sfc_main$Q), mergeProps({ type: "table" }, _ctx.pagination), null, 16)
          ], 2)) : createCommentVNode("", true)
        ], 2)
      ], 64);
    };
  }
});
function useScrollable() {
  const context = inject("scrollable");
  return context;
}
const _hoisted_1$j = ["id"];
const _sfc_main$C = /* @__PURE__ */ defineComponent({
  __name: "ScrollTo",
  setup(__props) {
    const id = useId();
    const scrollToPosition2 = useScrollable();
    const anchorNode = ref(null);
    onMounted(() => {
      if (scrollToPosition2 && anchorNode.value) {
        scrollToPosition2(anchorNode.value.offsetTop);
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("a", {
        ref_key: "anchorNode",
        ref: anchorNode,
        id: String(unref(id))
      }, null, 8, _hoisted_1$j);
    };
  }
});
const UNIQUE_IDENTIFIER = Symbol("unique_identifier");
function useLazyRef(initialValue) {
  const lazyRef = ref(UNIQUE_IDENTIFIER);
  if (lazyRef.value === UNIQUE_IDENTIFIER) {
    lazyRef.value = initialValue();
  }
  return lazyRef;
}
const Scrollable = "Polaris-Scrollable";
const hasTopShadow = "Polaris-Scrollable--hasTopShadow";
const hasBottomShadow = "Polaris-Scrollable--hasBottomShadow";
const horizontal = "Polaris-Scrollable--horizontal";
const vertical = "Polaris-Scrollable--vertical";
const scrollbarWidthThin = "Polaris-Scrollable--scrollbarWidthThin";
const scrollbarWidthNone = "Polaris-Scrollable--scrollbarWidthNone";
const scrollbarGutterStable = "Polaris-Scrollable--scrollbarGutterStable";
const styles$k = {
  Scrollable,
  hasTopShadow,
  hasBottomShadow,
  horizontal,
  vertical,
  scrollbarWidthThin,
  scrollbarWidthNone,
  scrollbarGutterStable,
  "scrollbarGutterStableboth-edges": "Polaris-Scrollable__scrollbarGutterStableboth--edges"
};
const _hoisted_1$i = ["tabindex"];
const MAX_SCROLL_HINT_DISTANCE = 100;
const LOW_RES_BUFFER = 2;
const _sfc_main$B = /* @__PURE__ */ defineComponent({
  __name: "Scrollable",
  props: {
    vertical: { type: Boolean, default: true },
    horizontal: { type: Boolean, default: true },
    shadow: { type: Boolean },
    hint: { type: Boolean },
    focusable: { type: Boolean },
    scrollbarWidth: {},
    scrollbarGutter: {}
  },
  emits: ["scrolledToBottom"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    useSlots();
    const emits = __emit;
    const topShadow = ref(false);
    const bottomShadow = ref(false);
    const scrollArea = ref(null);
    const stickyManager = useLazyRef(() => new StickyManager());
    const finalClassName = computed(() => classNames(
      styles$k.Scrollable,
      props.vertical && styles$k.vertical,
      props.horizontal && styles$k.horizontal,
      props.shadow && topShadow.value && styles$k.hasTopShadow,
      props.shadow && bottomShadow.value && styles$k.hasBottomShadow,
      props.scrollbarWidth && styles$k[variationName("scrollbarWidth", props.scrollbarWidth)],
      props.scrollbarGutter && styles$k[variationName("scrollbarGutter", props.scrollbarGutter.replace(" ", ""))]
    ));
    const setTopShadow = (value) => {
      topShadow.value = value;
    };
    const setBottomShadow = (value) => {
      bottomShadow.value = value;
    };
    const scrollTo = (scrollY, options = {}) => {
      var _a;
      const optionsBehavior = options.behavior || "smooth";
      const behavior = prefersReducedMotion() ? "auto" : optionsBehavior;
      (_a = scrollArea.value) == null ? void 0 : _a.scrollTo({ top: scrollY, behavior });
    };
    const handleScroll = () => {
      const currentScrollArea = scrollArea.value;
      if (!currentScrollArea) {
        return;
      }
      requestAnimationFrame(() => {
        const {
          scrollTop,
          clientHeight,
          scrollHeight
        } = currentScrollArea;
        const canScroll = Boolean(scrollHeight > clientHeight);
        const isBelowTopOfScroll = Boolean(scrollTop > 0);
        const isAtBottomOfScroll = Boolean(scrollTop + clientHeight >= scrollHeight - LOW_RES_BUFFER);
        setTopShadow(isBelowTopOfScroll);
        setBottomShadow(!isAtBottomOfScroll);
        if (canScroll && isAtBottomOfScroll) {
          emits("scrolledToBottom");
        }
      });
    };
    const handleResize = debounce(handleScroll, 50, { trailing: true });
    onMounted(() => {
      handleScroll();
      if (props.hint) {
        requestAnimationFrame(() => performScrollHint(scrollArea.value));
      }
      const currentScrollArea = scrollArea.value;
      if (currentScrollArea) {
        stickyManager.value.setContainer(currentScrollArea);
        currentScrollArea.addEventListener("scroll", handleScroll);
        globalThis.addEventListener("resize", handleResize);
      }
    });
    onBeforeUnmount(() => {
      const currentScrollArea = scrollArea.value;
      if (currentScrollArea) {
        currentScrollArea.removeEventListener("scroll", handleScroll);
        globalThis.removeEventListener("resize", handleResize);
      }
    });
    const prefersReducedMotion = () => {
      try {
        return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
      } catch (err) {
        return false;
      }
    };
    const performScrollHint = (elem) => {
      if (!elem || prefersReducedMotion()) {
        return;
      }
      const scrollableDistance = elem.scrollHeight - elem.clientHeight;
      const distanceToPeek = Math.min(MAX_SCROLL_HINT_DISTANCE, scrollableDistance) - LOW_RES_BUFFER;
      const goBackToTop = () => {
        requestAnimationFrame(() => {
          if (elem.scrollTop >= distanceToPeek) {
            elem.removeEventListener("scroll", goBackToTop);
            elem.scrollTo({ top: 0, behavior: "smooth" });
          }
        });
      };
      elem.addEventListener("scroll", goBackToTop);
      elem.scrollTo({ top: MAX_SCROLL_HINT_DISTANCE, behavior: "smooth" });
    };
    provide("scrollable", scrollTo);
    provide("sticky-manager", stickyManager);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        ref_key: "scrollArea",
        ref: scrollArea,
        class: finalClassName.value,
        tabindex: _ctx.focusable ? 0 : void 0
      }, unref(scrollable).props), [
        renderSlot(_ctx.$slots, "default")
      ], 16, _hoisted_1$i);
    };
  }
});
function useScrollLockManager() {
  const context = inject("scroll-lock-manager");
  return context;
}
const _sfc_main$A = /* @__PURE__ */ defineComponent({
  __name: "ScrollLock",
  setup(__props) {
    const scrollLockManager = useScrollLockManager();
    onMounted(() => {
      scrollLockManager.registerScrollLock();
    });
    onBeforeUnmount(() => {
      scrollLockManager.unregisterScrollLock();
    });
    return (_ctx, _cache) => {
      return null;
    };
  }
});
const Select = "Polaris-Select";
const disabled$2 = "Polaris-Select--disabled";
const error$1 = "Polaris-Select--error";
const Backdrop$1 = "Polaris-Select__Backdrop";
const Input$1 = "Polaris-Select__Input";
const Content$1 = "Polaris-Select__Content";
const InlineLabel = "Polaris-Select__InlineLabel";
const Icon = "Polaris-Select__Icon";
const SelectedOption = "Polaris-Select__SelectedOption";
const Prefix$1 = "Polaris-Select__Prefix";
const hover = "Polaris-Select--hover";
const toneMagic$1 = "Polaris-Select--toneMagic";
const styles$j = {
  Select,
  disabled: disabled$2,
  error: error$1,
  Backdrop: Backdrop$1,
  Input: Input$1,
  Content: Content$1,
  InlineLabel,
  Icon,
  SelectedOption,
  Prefix: Prefix$1,
  hover,
  toneMagic: toneMagic$1
};
const _hoisted_1$h = ["id", "name", "value", "disabled", "aria-invalid", "aria-describedby", "aria-required"];
const _hoisted_2$e = ["label"];
const _hoisted_3$a = ["value", "disabled"];
const _hoisted_4$5 = ["value", "disabled"];
const _hoisted_5$2 = ["aria-disabled"];
const PLACEHOLDER_VALUE = "";
const _sfc_main$z = /* @__PURE__ */ defineComponent({
  __name: "Select",
  props: /* @__PURE__ */ mergeModels({
    options: {},
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    labelInline: { type: Boolean },
    disabled: { type: Boolean },
    helpText: {},
    placeholder: {},
    id: {},
    name: {},
    value: {},
    error: { type: [String, Array, Boolean] },
    requiredIndicator: { type: Boolean },
    tone: {}
  }, {
    "modelValue": {
      default: PLACEHOLDER_VALUE
    },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const {
      value: focused2,
      toggle: toggleFocused
    } = useToggle(false);
    const { hasSlot } = useHasSlot();
    const uniqId = useId();
    const id = computed(() => props.id || uniqId);
    const labelHidden2 = computed(() => props.labelInline ? true : props.labelHidden);
    const className = computed(() => classNames(
      styles$j.Select,
      props.error && styles$j.error,
      props.tone && styles$j[variationName("tone", props.tone)],
      props.disabled && styles$j.disabled
    ));
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const ariaDescribedBy = computed(() => {
      const describedBy = [];
      if (hasHelpText.value) {
        describedBy.push(helpTextID(`${id.value}`));
      }
      if (props.error) {
        describedBy.push(`${id.value}Error`);
      }
      return describedBy.length ? describedBy.join(" ") : void 0;
    });
    const optionsMarkup = computed(() => {
      return normalizedOptions.value.map((opt) => normalizeOption(opt));
    });
    const normalizedOptions = computed(() => {
      let options = (props.options || []).map(normalizeOption);
      if (props.placeholder) {
        options = [
          {
            value: PLACEHOLDER_VALUE,
            label: props.placeholder,
            disabled: true
          },
          ...options
        ];
      }
      return options;
    });
    const selectedOption = computed(() => {
      let selected2 = flattenOptions.value.find((option) => model.value === option.value);
      if (!selected2) {
        selected2 = flattenOptions.value.find((option) => !option.hidden);
      }
      return selected2 || { value: "", label: "" };
    });
    const flattenOptions = computed(() => {
      let flatOptions = [];
      normalizedOptions.value.forEach((optionOrGroup) => {
        if (isGroup(optionOrGroup)) {
          flatOptions = flatOptions.concat(optionOrGroup.options);
        } else {
          flatOptions.push(optionOrGroup);
        }
      });
      return flatOptions;
    });
    const handleFocus = (e) => {
      toggleFocused();
      emits("focus", e);
    };
    const handleBlur = (e) => {
      toggleFocused();
      emits("blur", e);
    };
    const handleChange = (e) => {
      const target = e.target;
      model.value = target.value;
      emits("change", target.value, `${id.value}`);
    };
    const getOptionAttrs = (option) => {
      const { value, label, prefix: _prefix, key, ...rest } = option;
      return { ...rest };
    };
    function isString(option) {
      return typeof option === "string";
    }
    function isGroup(option) {
      return typeof option === "object" && "options" in option && option.options != null;
    }
    function normalizeStringOption(option) {
      return {
        label: option,
        value: option
      };
    }
    function normalizeOption(option) {
      if (isString(option)) {
        return normalizeStringOption(option);
      } else if (isGroup(option)) {
        const { title, options } = option;
        return {
          title,
          options: options.map((option2) => {
            return isString(option2) ? normalizeStringOption(option2) : option2;
          })
        };
      }
      return option;
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1n), {
        id: `${id.value}`,
        error: _ctx.error,
        action: _ctx.labelAction,
        "label-hidden": labelHidden2.value,
        "required-indicator": _ctx.requiredIndicator,
        disabled: _ctx.disabled
      }, createSlots({
        default: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(className.value)
          }, [
            createBaseVNode("select", {
              id: `${id.value}`,
              name: _ctx.name,
              value: _ctx.value,
              class: normalizeClass(unref(styles$j).Input),
              disabled: _ctx.disabled,
              "aria-invalid": Boolean(_ctx.error),
              "aria-describedby": ariaDescribedBy.value,
              "aria-required": _ctx.requiredIndicator,
              onFocus: handleFocus,
              onBlur: handleBlur,
              onChange: handleChange
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(optionsMarkup.value, (optOrGroup) => {
                return openBlock(), createElementBlock(Fragment, null, [
                  isGroup(optOrGroup) ? (openBlock(), createElementBlock("optgroup", {
                    label: optOrGroup.title,
                    key: optOrGroup.title
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(optOrGroup.options, (option) => {
                      return openBlock(), createElementBlock("option", mergeProps({
                        key: option.key || option.value,
                        value: option.value,
                        disabled: option.disabled
                      }, getOptionAttrs(option)), toDisplayString(option.label), 17, _hoisted_3$a);
                    }), 128))
                  ], 8, _hoisted_2$e)) : (openBlock(), createElementBlock("option", mergeProps({
                    key: optOrGroup.key || optOrGroup.value,
                    value: optOrGroup.value,
                    disabled: optOrGroup.disabled
                  }, getOptionAttrs(optOrGroup)), toDisplayString(optOrGroup.label), 17, _hoisted_4$5))
                ], 64);
              }), 256))
            ], 42, _hoisted_1$h),
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$j).Content),
              "aria-hidden": "",
              "aria-disabled": _ctx.disabled
            }, [
              _ctx.labelInline ? (openBlock(), createBlock(unref(_sfc_main$2B), {
                key: 0,
                "padding-inline-end": "100"
              }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$f), {
                    as: "span",
                    tone: _ctx.tone && _ctx.tone === "magic" && !unref(focused2) ? "magic-subdued" : "subdued",
                    truncate: ""
                  }, {
                    default: withCtx(() => [
                      unref(slots).label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        createTextVNode(toDisplayString(props.label), 1)
                      ], 64))
                    ]),
                    _: 3
                  }, 8, ["tone"])
                ]),
                _: 3
              })) : createCommentVNode("", true),
              selectedOption.value.prefix ? (openBlock(), createElementBlock("div", {
                key: 1,
                class: normalizeClass(unref(styles$j).Prefix)
              }, [
                (openBlock(), createBlock(resolveDynamicComponent(selectedOption.value.prefix)))
              ], 2)) : createCommentVNode("", true),
              createBaseVNode("span", {
                class: normalizeClass(unref(styles$j).SelectedOption)
              }, toDisplayString(selectedOption.value.label), 3),
              createBaseVNode("span", {
                class: normalizeClass(unref(styles$j).Icon)
              }, [
                createVNode(unref(_sfc_main$1K), { source: unref(SelectIcon) }, null, 8, ["source"])
              ], 2)
            ], 10, _hoisted_5$2),
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$j).Backdrop)
            }, null, 2)
          ], 2)
        ]),
        _: 2
      }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            unref(slots).label ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        hasHelpText.value ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(slots).helpText ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(props.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["id", "error", "action", "label-hidden", "required-indicator", "disabled"]);
    };
  }
});
const SelectAllActions = "Polaris-SelectAllActions";
const PaginatedSelectAll = "Polaris-SelectAllActions__PaginatedSelectAll";
const AllAction = "Polaris-SelectAllActions__AllAction";
const styles$i = {
  SelectAllActions,
  "SelectAllActions-not-sticky": "Polaris-SelectAllActions--selectAllActionsNotSticky",
  "SelectAllActions-entering": "Polaris-SelectAllActions__SelectAllActions--entering",
  "SelectAllActions-exiting": "Polaris-SelectAllActions__SelectAllActions--exiting",
  "SelectAllActions-hasPagination": "Polaris-SelectAllActions__SelectAllActions--hasPagination",
  "SelectAllActions-exited": "Polaris-SelectAllActions__SelectAllActions--exited",
  "SelectAllActions-entered": "Polaris-SelectAllActions__SelectAllActions--entered",
  PaginatedSelectAll,
  AllAction
};
const _sfc_main$y = /* @__PURE__ */ defineComponent({
  __name: "SelectAllActions",
  props: /* @__PURE__ */ mergeModels({
    label: {},
    selectMode: { type: Boolean },
    paginatedSelectAllText: {},
    paginatedSelectAllAction: {},
    disabled: { type: Boolean },
    isSticky: { type: Boolean },
    hasPagination: { type: Boolean },
    accessibilityLabel: {},
    selected: { type: [Boolean, String] }
  }, {
    "modelValue": { type: Boolean },
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["toggle-all"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const wrapperStatus = {
      entering: "SelectAllActions-entering",
      entered: "SelectAllActions-entered",
      exiting: "SelectAllActions-exiting",
      exited: "SelectAllActions-exited"
    };
    const props = __props;
    const emits = __emit;
    const model = useModel(__props, "modelValue");
    const currentInstance = getCurrentInstance();
    const nodeRef = ref(null);
    const hasTextAndAction = computed(() => props.paginatedSelectAllText && props.paginatedSelectAllAction);
    const ariaLive = computed(() => hasTextAndAction.value ? "polite" : void 0);
    const wrapperClassName = computed(() => classNames(
      styles$i.SelectAllActions
    ));
    const onTransitionEnter = (el) => {
      el.classList.add(wrapperStatus.entering);
    };
    const onTransitionEntered = (el) => {
      el.classList.remove(wrapperStatus.entering);
      el.classList.add(wrapperStatus.entered);
    };
    const onTransitionExiting = (el) => {
      el.classList.remove(wrapperStatus.entered);
      el.classList.add(wrapperStatus.exiting);
    };
    const onTransitionExit = (el) => {
      el.classList.remove(wrapperStatus.exiting);
      el.classList.add(wrapperStatus.exited);
    };
    const handleClick = () => {
      var _a;
      if ((_a = props.paginatedSelectAllAction) == null ? void 0 : _a.onAction) {
        props.paginatedSelectAllAction.onAction();
      }
    };
    return (_ctx, _cache) => {
      return _ctx.selectMode ? (openBlock(), createBlock(Transition, {
        key: 0,
        name: "markup",
        onBeforeEnter: onTransitionEnter,
        onEnter: onTransitionEntered,
        onBeforeLeave: onTransitionExiting,
        onLeave: onTransitionExit
      }, {
        default: withCtx(() => [
          createBaseVNode("div", {
            class: normalizeClass(wrapperClassName.value),
            ref_key: "nodeRef",
            ref: nodeRef
          }, [
            createVNode(unref(_sfc_main$2B), {
              background: "bg-surface-secondary",
              borderBlockStartWidth: "025",
              borderColor: "border",
              width: "100%",
              paddingBlockStart: "300",
              paddingBlockEnd: "300",
              paddingInlineStart: "300",
              paddingInlineEnd: "400"
            }, {
              default: withCtx(() => [
                createVNode(unref(_sfc_main$1r), {
                  gap: "200",
                  align: "start",
                  "block-align": "center"
                }, {
                  default: withCtx(() => {
                    var _a, _b;
                    return [
                      _ctx.accessibilityLabel && ((_b = (_a = unref(currentInstance)) == null ? void 0 : _a.vnode.props) == null ? void 0 : _b.onToggleAll) ? (openBlock(), createBlock(unref(_sfc_main$2m), mergeProps({ key: 0 }, props, {
                        modelValue: model.value,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                        "aria-live": ariaLive.value,
                        label: hasTextAndAction.value ? _ctx.paginatedSelectAllText : _ctx.label,
                        onToggleAll: _cache[1] || (_cache[1] = ($event) => emits("toggle-all"))
                      }), null, 16, ["modelValue", "aria-live", "label"])) : createCommentVNode("", true),
                      createVNode(unref(_sfc_main$f), {
                        as: "span",
                        variant: "bodySm",
                        "font-weight": "medium"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(hasTextAndAction.value ? _ctx.paginatedSelectAllText : _ctx.label), 1)
                        ]),
                        _: 1
                      }),
                      _ctx.paginatedSelectAllAction ? (openBlock(), createElementBlock("div", {
                        key: 1,
                        class: normalizeClass(unref(styles$i).PaginatedSelectAll)
                      }, [
                        createVNode(unref(_sfc_main$2u), {
                          class: normalizeClass(unref(styles$i).AllAction),
                          size: "slim",
                          disabled: _ctx.disabled,
                          onClick: handleClick
                        }, null, 8, ["class", "disabled"])
                      ], 2)) : createCommentVNode("", true)
                    ];
                  }),
                  _: 1
                })
              ]),
              _: 1
            })
          ], 2)
        ]),
        _: 1
      })) : createCommentVNode("", true);
    };
  }
});
const SettingAction = "Polaris-SettingAction";
const Setting = "Polaris-SettingAction__Setting";
const Action = "Polaris-SettingAction__Action";
const styles$h = {
  SettingAction,
  Setting,
  Action
};
const _sfc_main$x = /* @__PURE__ */ defineComponent({
  __name: "SettingAction",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$h).SettingAction)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$h).Setting)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 2),
        createBaseVNode("div", {
          class: normalizeClass(unref(styles$h).Action)
        }, [
          renderSlot(_ctx.$slots, "action")
        ], 2)
      ], 2);
    };
  }
});
const SkeletonBodyTextContainer = "Polaris-SkeletonBodyText__SkeletonBodyTextContainer";
const SkeletonBodyText = "Polaris-SkeletonBodyText";
const styles$g = {
  SkeletonBodyTextContainer,
  SkeletonBodyText
};
const _sfc_main$w = /* @__PURE__ */ defineComponent({
  __name: "SkeletonBodyText",
  props: {
    lines: { default: 3 }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$g).SkeletonBodyTextContainer)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.lines, (index) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(unref(styles$g).SkeletonBodyText),
            key: index
          }, null, 2);
        }), 128))
      ], 2);
    };
  }
});
const DisplayText = "Polaris-SkeletonDisplayText__DisplayText";
const sizeSmall$3 = "Polaris-SkeletonDisplayText--sizeSmall";
const sizeMedium$2 = "Polaris-SkeletonDisplayText--sizeMedium";
const sizeLarge$4 = "Polaris-SkeletonDisplayText--sizeLarge";
const sizeExtraLarge = "Polaris-SkeletonDisplayText--sizeExtraLarge";
const styles$f = {
  DisplayText,
  sizeSmall: sizeSmall$3,
  sizeMedium: sizeMedium$2,
  sizeLarge: sizeLarge$4,
  sizeExtraLarge
};
const _sfc_main$v = /* @__PURE__ */ defineComponent({
  __name: "SkeletonDisplayText",
  props: {
    size: { default: "medium" },
    maxWidth: {}
  },
  setup(__props) {
    const props = __props;
    const className = computed(
      () => classNames(
        styles$f.DisplayText,
        props.size && styles$f[variationName("size", props.size)]
      )
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        style: normalizeStyle(unref(sanitizeCustomProperties)({ "--pc-skeleton-display-text-max-width": _ctx.maxWidth ?? void 0 }))
      }, null, 6);
    };
  }
});
const Title = "Polaris-SkeletonPage__Title";
const SkeletonTitle = "Polaris-SkeletonPage__SkeletonTitle";
const styles$e = {
  Title,
  SkeletonTitle
};
const _sfc_main$u = /* @__PURE__ */ defineComponent({
  __name: "SkeletonPage",
  props: {
    title: { default: "" },
    fullWidth: { type: Boolean },
    narrowWidth: { type: Boolean },
    primaryAction: { type: Boolean },
    backAction: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const i18n = useI18n();
    const maxWidth = computed(() => {
      if (props.fullWidth) {
        return "none";
      }
      if (props.narrowWidth) {
        return "var(--pc-skeleton-page-max-width-narrow)";
      }
      return "var(--pc-skeleton-page-max-width)";
    });
    return (_ctx, _cache) => {
      const _component_Box = resolveComponent("Box");
      const _component_Text = resolveComponent("Text");
      const _component_InlineStack = resolveComponent("InlineStack");
      const _component_BlockStack = resolveComponent("BlockStack");
      return openBlock(), createBlock(_component_BlockStack, {
        gap: 400,
        inlineAlign: "center"
      }, {
        default: withCtx(() => [
          createVNode(_component_Box, {
            width: "100%",
            padding: 0,
            paddingInlineStart: { sm: "600" },
            paddingInlineEnd: { sm: "600" },
            maxWidth: maxWidth.value,
            "aria-label": unref(i18n).translate("Polaris.SkeletonPage.loadingLabel"),
            role: "status"
          }, {
            default: withCtx(() => [
              createVNode(_component_BlockStack, null, {
                default: withCtx(() => [
                  createVNode(_component_Box, {
                    width: "100%",
                    paddingBlockStart: { xs: "400", md: "500" },
                    paddingBlockEnd: { xs: "400", md: "500" },
                    paddingInlineStart: { xs: "400", sm: "0" },
                    paddingInlineEnd: { xs: "400", sm: "0" }
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_InlineStack, {
                        align: "space-between",
                        blockAlign: "center",
                        gap: 400
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_InlineStack, { gap: 400 }, {
                            default: withCtx(() => [
                              _ctx.backAction ? (openBlock(), createBlock(_component_Box, {
                                key: 0,
                                background: "bg-fill-tertiary",
                                minHeight: "2.25rem",
                                minWidth: "2.25rem",
                                maxWidth: "2.25rem",
                                borderRadius: "100"
                              })) : createCommentVNode("", true),
                              createVNode(_component_Box, {
                                paddingBlockStart: 100,
                                paddingBlockEnd: 100
                              }, {
                                default: withCtx(() => [
                                  _ctx.title ? (openBlock(), createBlock(_component_Text, {
                                    key: 0,
                                    as: "h1",
                                    style: normalizeStyle(unref(styles$e).Title)
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(_ctx.title), 1)
                                    ]),
                                    _: 1
                                  }, 8, ["style"])) : (openBlock(), createBlock(_component_Box, {
                                    key: 1,
                                    background: "bg-fill-tertiary",
                                    minWidth: "120px",
                                    minHeight: "28px",
                                    borderRadius: "100"
                                  }))
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }),
                          _ctx.primaryAction ? (openBlock(), createBlock(_component_Box, {
                            key: 0,
                            id: "SkeletonPage-PrimaryAction",
                            background: "bg-fill-tertiary",
                            minHeight: "2.25rem",
                            minWidth: "6.25rem",
                            borderRadius: "100"
                          })) : createCommentVNode("", true)
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  }),
                  createVNode(_component_Box, {
                    paddingBlockEnd: "200",
                    width: "100%"
                  }, {
                    default: withCtx(() => [
                      renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              })
            ]),
            _: 3
          }, 8, ["maxWidth", "aria-label"])
        ]),
        _: 3
      });
    };
  }
});
const Tabs$1 = "Polaris-SkeletonTabs__Tabs";
const Tab$1 = "Polaris-SkeletonTabs__Tab";
const TabText = "Polaris-SkeletonTabs__TabText";
const fitted$1 = "Polaris-SkeletonTabs--fitted";
const styles$d = {
  Tabs: Tabs$1,
  Tab: Tab$1,
  TabText,
  fitted: fitted$1
};
const _sfc_main$t = /* @__PURE__ */ defineComponent({
  __name: "SkeletonTabs",
  props: {
    count: { default: 2 },
    fitted: { type: Boolean, default: false }
  },
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(classNames)(unref(styles$d).Tabs, _ctx.fitted && unref(styles$d).fitted))
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.count, (index) => {
          return openBlock(), createElementBlock("div", {
            key: index,
            class: normalizeClass(unref(classNames)(unref(styles$d).Tab))
          }, [
            createBaseVNode("div", {
              class: normalizeClass(unref(styles$d).TabText)
            }, null, 2)
          ], 2);
        }), 128))
      ], 2);
    };
  }
});
const SkeletonThumbnail = "Polaris-SkeletonThumbnail";
const sizeExtraSmall$1 = "Polaris-SkeletonThumbnail--sizeExtraSmall";
const sizeSmall$2 = "Polaris-SkeletonThumbnail--sizeSmall";
const sizeMedium$1 = "Polaris-SkeletonThumbnail--sizeMedium";
const sizeLarge$3 = "Polaris-SkeletonThumbnail--sizeLarge";
const styles$c = {
  SkeletonThumbnail,
  sizeExtraSmall: sizeExtraSmall$1,
  sizeSmall: sizeSmall$2,
  sizeMedium: sizeMedium$1,
  sizeLarge: sizeLarge$3
};
const _sfc_main$s = /* @__PURE__ */ defineComponent({
  __name: "SkeletonThumbnail",
  props: {
    size: { default: "medium" }
  },
  setup(__props) {
    const props = __props;
    const className = computed(
      () => classNames(
        styles$c.SkeletonThumbnail,
        props.size && styles$c[variationName("size", props.size)]
      )
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, null, 2);
    };
  }
});
const _hoisted_1$g = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 44 44"
};
const _hoisted_2$d = /* @__PURE__ */ createBaseVNode("path", { d: "M15.542 1.487A21.507 21.507 0 0 0 .5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 0 0-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 1 0-.9-2.863" }, null, -1);
const _hoisted_3$9 = [
  _hoisted_2$d
];
function render$6(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$g, [..._hoisted_3$9]);
}
const SpinnerIconLarge = { render: render$6 };
const _hoisted_1$f = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$c = /* @__PURE__ */ createBaseVNode("path", { d: "M7.229 1.173a9.25 9.25 0 1 0 11.655 11.412 1.25 1.25 0 1 0-2.4-.698 6.75 6.75 0 1 1-8.506-8.329 1.25 1.25 0 1 0-.75-2.385z" }, null, -1);
const _hoisted_3$8 = [
  _hoisted_2$c
];
function render$5(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$f, [..._hoisted_3$8]);
}
const SpinnerIconSmall = { render: render$5 };
const Spinner$1 = "Polaris-Spinner";
const sizeSmall$1 = "Polaris-Spinner--sizeSmall";
const sizeLarge$2 = "Polaris-Spinner--sizeLarge";
const styles$b = {
  Spinner: Spinner$1,
  sizeSmall: sizeSmall$1,
  sizeLarge: sizeLarge$2
};
const _sfc_main$r = /* @__PURE__ */ defineComponent({
  __name: "Spinner",
  props: {
    size: { default: "large" },
    accessibilityLabel: {},
    hasFocusableParent: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const isAfterInitialMount = ref(false);
    const spanAttributes = computed(() => {
      return {
        ...!props.hasFocusableParent && { role: "status" }
      };
    });
    const className = computed(() => {
      return classNames(
        styles$b.Spinner,
        props.size && styles$b[variationName("size", props.size)]
      );
    });
    onMounted(() => {
      isAfterInitialMount.value = true;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createBaseVNode("span", {
          class: normalizeClass(className.value)
        }, [
          _ctx.size === "large" ? (openBlock(), createBlock(unref(SpinnerIconLarge), { key: 0 })) : (openBlock(), createBlock(unref(SpinnerIconSmall), { key: 1 }))
        ], 2),
        createBaseVNode("span", normalizeProps(guardReactiveProps(spanAttributes.value)), [
          isAfterInitialMount.value || !_ctx.hasFocusableParent ? (openBlock(), createBlock(unref(_sfc_main$f), {
            key: 0,
            "visually-hidden": "",
            as: "span"
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(_ctx.accessibilityLabel), 1)
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], 16)
      ], 64);
    };
  }
});
const _sfc_main$q = /* @__PURE__ */ defineComponent({
  __name: "Sticky",
  props: {
    boundingElement: {},
    offset: { type: Boolean },
    disableWhenStacked: { type: Boolean }
  },
  emits: ["sticky-change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    useSlots();
    const stickyManager = inject("sticky-manager", {});
    const isSticky = ref(false);
    const style = ref({});
    const placeHolderNode = ref(null);
    const stickyNode = ref(null);
    onMounted(() => {
      if (!stickyNode.value || !placeHolderNode.value) {
        return;
      }
      stickyManager.registerStickyItem({
        stickyNode: stickyNode.value,
        placeHolderNode: placeHolderNode.value,
        handlePositioning,
        offset: props.offset,
        boundingElement: props.boundingElement,
        disableWhenStacked: props.disableWhenStacked
      });
    });
    onBeforeUnmount(() => {
      if (!stickyNode.value) {
        return;
      }
      stickyManager.unregisterStickyItem(stickyNode.value);
    });
    const handlePositioning = (stick, top = 0, left = 0, width2 = 0) => {
      if (stick && !isSticky.value || !stick && isSticky.value) {
        adjustPlaceHolderNode(stick);
        isSticky.value = !isSticky.value;
        emits("sticky-change", isSticky.value);
        if (!props.boundingElement) {
          return;
        }
        props.boundingElement.toggleAttribute("data-sticky-active");
      }
      style.value = stick ? {
        position: "fixed",
        top: `${top}px`,
        left: `${left}px`,
        width: `${width2}px`
      } : {};
    };
    const adjustPlaceHolderNode = (add) => {
      if (placeHolderNode.value && stickyNode.value) {
        placeHolderNode.value.style.paddingBottom = add ? `${getRectForNode(stickyNode.value).height}px` : "0px";
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("div", {
          ref_key: "placeHolderNode",
          ref: placeHolderNode
        }, null, 512),
        createBaseVNode("div", {
          ref_key: "stickyNode",
          ref: stickyNode,
          style: normalizeStyle(style.value)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 4)
      ]);
    };
  }
});
const Outer = "Polaris-Tabs__Outer";
const Wrapper = "Polaris-Tabs__Wrapper";
const WrapperWithNewButton = "Polaris-Tabs__WrapperWithNewButton";
const ButtonWrapper = "Polaris-Tabs__ButtonWrapper";
const Tabs = "Polaris-Tabs";
const Tab = "Polaris-Tabs__Tab";
const fillSpace = "Polaris-Tabs--fillSpace";
const TabContainer = "Polaris-Tabs__TabContainer";
const fitted = "Polaris-Tabs--fitted";
const titleWithIcon = "Polaris-Tabs--titleWithIcon";
const List = "Polaris-Tabs__List";
const Item$1 = "Polaris-Tabs__Item";
const DisclosureTab = "Polaris-Tabs__DisclosureTab";
const DisclosureActivator = "Polaris-Tabs__DisclosureActivator";
const TabsMeasurer = "Polaris-Tabs__TabsMeasurer";
const NewTab = "Polaris-Tabs__NewTab";
const ActionListWrap = "Polaris-Tabs__ActionListWrap";
const Panel = "Polaris-Tabs__Panel";
const styles$a = {
  Outer,
  Wrapper,
  WrapperWithNewButton,
  ButtonWrapper,
  Tabs,
  Tab,
  "Tab-active": "Polaris-Tabs__Tab--active",
  "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
  "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
  fillSpace,
  TabContainer,
  fitted,
  titleWithIcon,
  List,
  Item: Item$1,
  DisclosureTab,
  "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
  DisclosureActivator,
  TabsMeasurer,
  NewTab,
  ActionListWrap,
  Panel,
  "Panel-hidden": "Polaris-Tabs__Panel--hidden"
};
const _hoisted_1$e = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$b = /* @__PURE__ */ createBaseVNode("path", { d: "M11.25 8.5a.75.75 0 0 0-.75.75v1.25H9.25a.75.75 0 0 0 0 1.5h1.25v1.25a.75.75 0 0 0 1.5 0V12h1.25a.75.75 0 0 0 0-1.5H12V9.25a.75.75 0 0 0-.75-.75" }, null, -1);
const _hoisted_3$7 = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M8.75 16.5a2.751 2.751 0 0 1-2.74-2.51 2.751 2.751 0 0 1-2.51-2.74v-5A2.75 2.75 0 0 1 6.25 3.5h5a2.751 2.751 0 0 1 2.74 2.51 2.751 2.751 0 0 1 2.51 2.74v5a2.75 2.75 0 0 1-2.75 2.75zm0-10.5A2.75 2.75 0 0 0 6 8.75v3.725c-.57-.116-1-.62-1-1.225v-5C5 5.56 5.56 5 6.25 5h5c.605 0 1.11.43 1.225 1zm0 1.5c-.69 0-1.25.56-1.25 1.25v5c0 .69.56 1.25 1.25 1.25h5c.69 0 1.25-.56 1.25-1.25v-5c0-.69-.56-1.25-1.25-1.25z"
}, null, -1);
const _hoisted_4$4 = [
  _hoisted_2$b,
  _hoisted_3$7
];
function render$4(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$e, [..._hoisted_4$4]);
}
const DuplicateIcon = { render: render$4 };
const _hoisted_1$d = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$a = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M15.655 4.344a2.695 2.695 0 0 0-3.81 0l-.599.599-.009-.009-1.06 1.06.008.01-5.88 5.88a2.75 2.75 0 0 0-.805 1.944v1.922a.75.75 0 0 0 .75.75h1.922a2.75 2.75 0 0 0 1.944-.806l7.54-7.539a2.695 2.695 0 0 0 0-3.81Zm-4.409 2.72-5.88 5.88a1.25 1.25 0 0 0-.366.884V15h1.172c.331 0 .65-.132.883-.366l5.88-5.88zm2.75.629.599-.599a1.195 1.195 0 1 0-1.69-1.689l-.598.599z"
}, null, -1);
const _hoisted_3$6 = [
  _hoisted_2$a
];
function render$3(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$d, [..._hoisted_3$6]);
}
const EditIcon = { render: render$3 };
const _hoisted_1$c = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$9 = /* @__PURE__ */ createBaseVNode("path", { d: "M11.5 8.25a.75.75 0 0 1 .75.75v4.25a.75.75 0 0 1-1.5 0V9a.75.75 0 0 1 .75-.75M9.25 9a.75.75 0 0 0-1.5 0v4.25a.75.75 0 0 0 1.5 0z" }, null, -1);
const _hoisted_3$5 = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M7.25 5.25a2.75 2.75 0 0 1 5.5 0h3a.75.75 0 0 1 0 1.5H15v5.45c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C12.72 17 11.88 17 10.2 17h-.4c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C5 14.72 5 13.88 5 12.2V6.75h-.75a.75.75 0 0 1 0-1.5zm1.5 0a1.25 1.25 0 1 1 2.5 0zM6.5 6.75h7v5.45c0 .865-.001 1.423-.036 1.848-.033.408-.09.559-.128.633a1.5 1.5 0 0 1-.655.655c-.074.038-.225.095-.633.128-.425.035-.983.036-1.848.036h-.4c-.865 0-1.423-.001-1.848-.036-.408-.033-.559-.09-.633-.128a1.5 1.5 0 0 1-.656-.655c-.037-.074-.094-.225-.127-.633-.035-.425-.036-.983-.036-1.848z"
}, null, -1);
const _hoisted_4$3 = [
  _hoisted_2$9,
  _hoisted_3$5
];
function render$2(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$c, [..._hoisted_4$3]);
}
const DeleteIcon = { render: render$2 };
const MAX_VIEW_NAME_LENGTH$2 = 40;
const _sfc_main$p = /* @__PURE__ */ defineComponent({
  __name: "DuplicateModal",
  props: {
    open: { type: Boolean },
    isModalLoading: { type: Boolean },
    name: {},
    helpText: {},
    viewNames: {}
  },
  emits: ["close", "click-primary-action", "click-secondary-action", "update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const container = ref(null);
    const modalValue = ref("");
    const model = computed({
      get() {
        return props.open ? props.name.slice(0, MAX_VIEW_NAME_LENGTH$2) : "";
      },
      set(value) {
        modalValue.value = value;
        emits("update:modelValue", value);
      }
    });
    const hasSameNameError = computed(() => {
      var _a;
      return (_a = props.viewNames) == null ? void 0 : _a.some(
        (viewName) => viewName.trim().toLowerCase() === modalValue.value.trim().toLowerCase()
      );
    });
    const isPrimaryActionDisabled = computed(() => {
      return props.isModalLoading || hasSameNameError.value || !modalValue.value || modalValue.value.length > MAX_VIEW_NAME_LENGTH$2;
    });
    const primaryAction = computed(() => ({
      content: i18n.translate("Polaris.Tabs.DuplicateModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled.value
    }));
    const secondaryActions = computed(() => [
      {
        content: i18n.translate("Polaris.Tabs.DuplicateModal.cancel"),
        onAction: handleSecondaryAction
      }
    ]);
    const errorMessage = computed(
      () => hasSameNameError.value ? i18n.translate(
        "Polaris.Tabs.DuplicateModal.errors.sameName",
        { name: modalValue.value }
      ) : void 0
    );
    watch(
      () => props.open,
      (newVal) => {
        if (!container.value)
          return;
        if (newVal) {
          focusFirstFocusableNode(container.value);
        }
      },
      {
        flush: "post"
      }
    );
    const handlePrimaryAction = async () => {
      if (isPrimaryActionDisabled.value) {
        return;
      }
      await emits("click-primary-action", modalValue.value);
      model.value = "";
      emits("close");
    };
    const handleSecondaryAction = () => {
      emits("click-secondary-action");
      model.value = props.name;
      emits("close");
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$14), {
        open: _ctx.open,
        primaryAction: primaryAction.value,
        secondaryActions: secondaryActions.value,
        onClose: _cache[1] || (_cache[1] = ($event) => emits("close"))
      }, {
        title: withCtx(() => [
          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.DuplicateModal.title")), 1)
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$15), null, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1R), { onSubmit: handlePrimaryAction }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$1O), null, {
                    default: withCtx(() => [
                      createBaseVNode("div", {
                        ref_key: "container",
                        ref: container
                      }, [
                        createVNode(unref(_sfc_main$9), {
                          modelValue: model.value,
                          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                          autoComplete: "off",
                          label: unref(i18n).translate("Polaris.Tabs.DuplicateModal.label"),
                          helpText: _ctx.helpText,
                          maxLength: MAX_VIEW_NAME_LENGTH$2,
                          showCharacterCount: true,
                          error: errorMessage.value
                        }, null, 8, ["modelValue", "label", "helpText", "error"])
                      ], 512)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["open", "primaryAction", "secondaryActions"]);
    };
  }
});
const MAX_VIEW_NAME_LENGTH$1 = 40;
const _sfc_main$o = /* @__PURE__ */ defineComponent({
  __name: "RenameModal",
  props: {
    open: { type: Boolean },
    isModalLoading: { type: Boolean },
    name: {},
    helpText: {},
    viewNames: {}
  },
  emits: ["close", "click-primary-action", "click-secondary-action", "update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const container = ref(null);
    const modalValue = ref("");
    const model = computed({
      get() {
        return props.open ? props.name : "";
      },
      set(value) {
        modalValue.value = value;
        emits("update:modelValue", value);
      }
    });
    const hasSameNameError = computed(
      () => {
        var _a;
        return (_a = props.viewNames) == null ? void 0 : _a.filter((viewName) => viewName !== props.name).some(
          (viewName) => viewName.trim().toLowerCase() === modalValue.value.trim().toLowerCase()
        );
      }
    );
    const isPrimaryActionDisabled = computed(
      () => props.isModalLoading || hasSameNameError.value || modalValue.value === props.name || !modalValue.value || modalValue.value.length > MAX_VIEW_NAME_LENGTH$1
    );
    const primaryAction = computed(() => ({
      content: i18n.translate("Polaris.Tabs.RenameModal.create"),
      onAction: handlePrimaryAction,
      disabled: isPrimaryActionDisabled.value
    }));
    const secondaryActions = computed(() => [
      {
        content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
        onAction: handleSecondaryAction
      }
    ]);
    const errorMessage = computed(
      () => hasSameNameError.value ? i18n.translate(
        "Polaris.Tabs.RenameModal.errors.sameName",
        { name: modalValue.value }
      ) : void 0
    );
    watch(
      () => props.open,
      (newVal) => {
        if (!container.value)
          return;
        if (newVal) {
          focusFirstFocusableNode(container.value);
        }
      },
      {
        flush: "post"
      }
    );
    const handlePrimaryAction = async () => {
      if (isPrimaryActionDisabled.value) {
        return;
      }
      await emits("click-primary-action", modalValue.value);
      model.value = "";
      emits("close");
    };
    const handleSecondaryAction = () => {
      emits("click-secondary-action");
      model.value = props.name;
      emits("close");
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$14), {
        open: _ctx.open,
        primaryAction: primaryAction.value,
        secondaryActions: secondaryActions.value,
        onClose: _cache[1] || (_cache[1] = ($event) => emits("close"))
      }, {
        title: withCtx(() => [
          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.RenameModal.title")), 1)
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$15), null, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1R), { onSubmit: handlePrimaryAction }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$1O), null, {
                    default: withCtx(() => [
                      createBaseVNode("div", {
                        ref_key: "container",
                        ref: container
                      }, [
                        createVNode(unref(_sfc_main$9), {
                          modelValue: model.value,
                          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                          autoComplete: "off",
                          label: unref(i18n).translate("Polaris.Tabs.RenameModal.label"),
                          helpText: _ctx.helpText,
                          maxLength: MAX_VIEW_NAME_LENGTH$1,
                          showCharacterCount: true,
                          error: errorMessage.value
                        }, null, 8, ["modelValue", "label", "helpText", "error"])
                      ], 512)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["open", "primaryAction", "secondaryActions"]);
    };
  }
});
const _sfc_main$n = /* @__PURE__ */ defineComponent({
  __name: "Tab",
  props: {
    id: {},
    content: {},
    panelID: {},
    accessibilityLabel: {},
    badge: {},
    url: {},
    isLocked: { type: Boolean },
    disabled: { type: Boolean },
    actions: {},
    viewNames: {},
    isModalLoading: { type: Boolean },
    focused: { type: Boolean },
    siblingTabHasFocus: { type: Boolean },
    selected: { type: Boolean },
    measuring: { type: Boolean },
    tabIndexOverride: {}
  },
  emits: ["tab-action", "focus", "toggle-popover", "toggle-modal"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const breakpoints2 = useBreakpoints();
    const currentInstance = getCurrentInstance();
    const { hasSlot } = useHasSlot();
    const popoverActive = ref(false);
    const activeModalType = ref(null);
    const wasSelected = ref(props.selected);
    const panelFocused = ref(false);
    const nodeRef = ref(null);
    const hasTogglePopover = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onTogglePopover);
    });
    const hasToggleModal = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onTogglerModal);
    });
    const tabIndex = computed(() => {
      if (props.tabIndexOverride != null) {
        return props.tabIndexOverride;
      }
      if (props.selected && !props.siblingTabHasFocus && !props.measuring) {
        return 0;
      } else if (props.focused && !props.measuring) {
        return 0;
      }
      return -1;
    });
    const renameAction = computed(
      () => {
        var _a;
        return (_a = props.actions) == null ? void 0 : _a.find((action) => action.type === "rename");
      }
    );
    const duplicateAction = computed(
      () => {
        var _a;
        return (_a = props.actions) == null ? void 0 : _a.find(
          (action) => action.type === "duplicate"
        );
      }
    );
    const deleteAction = computed(
      () => {
        var _a;
        return (_a = props.actions) == null ? void 0 : _a.find(
          (action) => action.type === "delete"
        );
      }
    );
    const actionContent = computed(() => ({
      rename: {
        icon: InfoIcon,
        content: i18n.translate("Polaris.Tabs.Tab.rename")
      },
      duplicate: {
        icon: DuplicateIcon,
        content: i18n.translate("Polaris.Tabs.Tab.duplicate")
      },
      edit: {
        icon: EditIcon,
        content: i18n.translate("Polaris.Tabs.Tab.edit")
      },
      "edit-columns": {
        icon: LayoutColumns3Icon,
        content: i18n.translate("Polaris.Tabs.Tab.editColumns")
      },
      delete: {
        icon: DeleteIcon,
        content: i18n.translate("Polaris.Tabs.Tab.delete"),
        destructive: true
      }
    }));
    const formattedActions = computed(() => {
      var _a;
      return (_a = props.actions) == null ? void 0 : _a.map(
        ({ type, onAction, onPrimaryAction, ...additionalOptions }) => {
          const isModalActivator = !type.includes("edit");
          return {
            ...actionContent.value[type],
            ...additionalOptions,
            onAction: () => {
              onAction == null ? void 0 : onAction(props.content);
              togglePopoverActive();
              if (isModalActivator) {
                handleModalOpen(type);
              }
            }
          };
        }
      );
    });
    const tabContainerClassNames = computed(() => classNames(
      styles$a.TabContainer,
      props.selected && styles$a.Underline
    ));
    const urlIfNotDisabledOrSelected = computed(
      () => props.disabled || props.selected ? void 0 : props.url
    );
    const tabClassName = computed(() => {
      var _a;
      return classNames(
        styles$a.Tab,
        hasSlot(slots.icon) && styles$a["Tab-iconOnly"],
        popoverActive.value && styles$a["Tab-popoverActive"],
        props.selected && styles$a["Tab-active"],
        props.selected && ((_a = props.actions) == null ? void 0 : _a.length) && styles$a["Tab-hasActions"]
      );
    });
    const isPlainButton = computed(() => {
      var _a;
      return !props.selected || !((_a = props.actions) == null ? void 0 : _a.length);
    });
    const focusPanelID = (panelID) => {
      const panel = document.getElementById(panelID);
      if (panel) {
        panel.focus({ preventScroll: true });
      }
    };
    const togglePopoverActive = () => {
      var _a;
      if (!((_a = props.actions) == null ? void 0 : _a.length)) {
        return;
      }
      popoverActive.value = !popoverActive.value;
    };
    const handleClick = () => {
      if (props.disabled) {
        return;
      }
      if (props.selected) {
        togglePopoverActive();
      } else {
        emits("tab-action");
      }
    };
    const handleModalOpen = (type) => {
      activeModalType.value = type;
    };
    const handleModalClose = () => {
      activeModalType.value = null;
    };
    const handleSaveRenameModal = async (value) => {
      var _a, _b;
      await ((_b = (_a = renameAction.value) == null ? void 0 : _a.onPrimaryAction) == null ? void 0 : _b.call(_a, value));
      setTimeout(() => {
        if (nodeRef.value) {
          focusFirstFocusableNode(nodeRef.value);
        }
      }, 250);
    };
    const handleConfirmDeleteView = async () => {
      var _a, _b;
      await ((_b = (_a = deleteAction.value) == null ? void 0 : _a.onPrimaryAction) == null ? void 0 : _b.call(_a, props.content));
      handleModalClose();
    };
    const handleSaveDuplicateModal = async (duplicateName) => {
      var _a, _b;
      await ((_b = (_a = duplicateAction.value) == null ? void 0 : _a.onPrimaryAction) == null ? void 0 : _b.call(_a, duplicateName));
    };
    const handleKeyDown = (event) => {
      if (event.key === " ") {
        event.preventDefault();
        handleClick();
      }
    };
    const activator = () => {
      return h(
        urlIfNotDisabledOrSelected.value ? resolveComponent("UnstyledLink") : resolveComponent("UnstyledButton"),
        {
          id: props.id,
          className: tabClassName.value,
          tabIndex,
          "aria-selected": props.selected,
          "aria-controls": props.panelID,
          "aria-label": props.accessibilityLabel,
          role: props.tabIndexOverride == null ? "tab" : void 0,
          disabled: props.disabled,
          url: urlIfNotDisabledOrSelected.value,
          onFocus: () => emits("focus"),
          onMouseUp: handleMouseUpByBlurring,
          onClick: handleClick,
          onKeyDown: handleKeyDown
        },
        () => {
          var _a;
          return [
            h(
              resolveComponent("InlineStack"),
              {
                gap: 200,
                align: "center",
                blockAlign: "center",
                wrap: false
              },
              () => [
                h(
                  resolveComponent("Text"),
                  {
                    as: "span",
                    variant: breakpoints2.value.mdDown ? "bodyLg" : "bodySm",
                    fontWeight: "medium"
                  },
                  {
                    default: () => hasSlot(slots.icon) ? slots.icon() : props.content
                  }
                ),
                props.badge ? h(
                  resolveComponent("Badge"),
                  { tone: props.selected ? void 0 : "new" },
                  { default: () => props.badge }
                ) : null
              ]
            ),
            props.selected && ((_a = props.actions) == null ? void 0 : _a.length) ? h(
              "div",
              { class: classNames(styles$a.IconWrap) },
              h(resolveComponent("Icon"), { source: ChevronDownIcon })
            ) : null
          ];
        }
      );
    };
    watch(
      () => [popoverActive.value, hasTogglePopover.value],
      () => {
        emits("toggle-popover", popoverActive.value);
      }
    );
    watch(
      () => [activeModalType.value, hasToggleModal.value],
      () => {
        emits("toggle-modal", Boolean(activeModalType.value));
      }
    );
    watch(
      () => [hasTogglePopover.value, hasToggleModal.value],
      () => {
        return () => {
          emits("toggle-popover", false);
          emits("toggle-modal", false);
        };
      }
    );
    watch(
      () => [
        props.focused,
        props.id,
        props.content,
        props.measuring,
        props.panelID,
        props.selected,
        props.disabled,
        activeModalType.value
      ],
      () => {
        if (props.measuring) {
          return;
        }
        const itemHadFocus = props.focused || document.activeElement && document.activeElement.id === props.id;
        if (itemHadFocus && props.selected && props.panelID != null && !panelFocused.value) {
          focusPanelID(props.panelID);
          panelFocused.value = true;
        }
        if (props.selected && !wasSelected.value && props.panelID != null) {
          focusPanelID(props.panelID);
        } else if (props.focused && nodeRef.value != null && activeModalType == null && !props.disabled) {
          focusFirstFocusableNode(nodeRef.value);
        }
        wasSelected.value = props.selected;
      },
      { immediate: true }
    );
    return (_ctx, _cache) => {
      return unref(hasSlot)(unref(slots).icon) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        isPlainButton.value || _ctx.disabled ? (openBlock(), createBlock(activator, { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createVNode(unref(_sfc_main$P), {
            autofocusTarget: "first-node",
            active: popoverActive.value,
            onClose: togglePopoverActive
          }, {
            activator: withCtx(() => [
              createVNode(activator)
            ]),
            default: withCtx(() => [
              createBaseVNode("div", {
                class: normalizeClass(unref(styles$a).ActionListWrap)
              }, [
                createVNode(unref(_sfc_main$2Z), {
                  actionRole: "menuitem",
                  items: formattedActions.value
                }, null, 8, ["items"])
              ], 2)
            ]),
            _: 1
          }, 8, ["active"]),
          renameAction.value ? (openBlock(), createBlock(unref(_sfc_main$o), {
            key: 0,
            name: _ctx.content,
            open: activeModalType.value === "rename",
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames,
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveRenameModal
          }, null, 8, ["name", "open", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          createBaseVNode("div", null, toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.copy", { name: _ctx.content })), 1),
          duplicateAction.value ? (openBlock(), createBlock(unref(_sfc_main$p), {
            key: 1,
            open: activeModalType.value === "duplicate",
            name: unref(i18n).translate("Polaris.Tabs.Tab.copy", { name: _ctx.content }),
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames || [],
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveDuplicateModal
          }, null, 8, ["open", "name", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          deleteAction.value ? (openBlock(), createBlock(unref(_sfc_main$14), {
            key: 2,
            open: activeModalType.value === "delete",
            primaryAction: {
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.delete"),
              destructive: true,
              disabled: _ctx.isModalLoading,
              onAction: handleConfirmDeleteView
            },
            secondaryActions: [{
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.cancel"),
              onAction: handleModalClose
            }],
            onClose: handleModalClose
          }, {
            title: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.title")), 1)
            ]),
            default: withCtx(() => [
              createVNode(unref(_sfc_main$15), null, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.description", { viewName: _ctx.content })), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["open", "primaryAction", "secondaryActions"])) : createCommentVNode("", true)
        ], 64))
      ], 64)) : (openBlock(), createElementBlock("li", {
        key: 1,
        ref_key: "nodeRef",
        ref: nodeRef,
        role: "presentation",
        class: normalizeClass(tabContainerClassNames.value)
      }, [
        isPlainButton.value || _ctx.disabled ? (openBlock(), createBlock(activator, { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createVNode(unref(_sfc_main$P), {
            autofocusTarget: "first-node",
            active: popoverActive.value,
            onClose: togglePopoverActive
          }, {
            activator: withCtx(() => [
              createVNode(activator)
            ]),
            default: withCtx(() => [
              createBaseVNode("div", {
                class: normalizeClass(unref(styles$a).ActionListWrap)
              }, [
                createVNode(unref(_sfc_main$2Z), {
                  actionRole: "menuitem",
                  items: formattedActions.value
                }, null, 8, ["items"])
              ], 2)
            ]),
            _: 1
          }, 8, ["active"]),
          renameAction.value ? (openBlock(), createBlock(unref(_sfc_main$o), {
            key: 0,
            name: _ctx.content,
            open: activeModalType.value === "rename",
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames,
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveRenameModal
          }, null, 8, ["name", "open", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          duplicateAction.value ? (openBlock(), createBlock(unref(_sfc_main$p), {
            key: 1,
            open: activeModalType.value === "duplicate",
            name: unref(i18n).translate("Polaris.Tabs.Tab.copy", { name: _ctx.content }),
            isModalLoading: _ctx.isModalLoading,
            viewNames: _ctx.viewNames || [],
            onClose: handleModalClose,
            onClickPrimaryAction: handleSaveDuplicateModal
          }, null, 8, ["open", "name", "isModalLoading", "viewNames"])) : createCommentVNode("", true),
          deleteAction.value ? (openBlock(), createBlock(unref(_sfc_main$14), {
            key: 2,
            open: activeModalType.value === "delete",
            primaryAction: {
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.delete"),
              destructive: true,
              disabled: _ctx.isModalLoading,
              onAction: handleConfirmDeleteView
            },
            secondaryActions: [{
              content: unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.cancel"),
              onAction: handleModalClose
            }],
            onClose: handleModalClose
          }, {
            title: withCtx(() => [
              createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.title")), 1)
            ]),
            default: withCtx(() => [
              createVNode(unref(_sfc_main$15), null, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.Tab.deleteModal.description", { viewName: _ctx.content })), 1)
                ]),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["open", "primaryAction", "secondaryActions"])) : createCommentVNode("", true)
        ], 64))
      ], 2));
    };
  }
});
const MAX_VIEW_NAME_LENGTH = 40;
const _sfc_main$m = /* @__PURE__ */ defineComponent({
  __name: "CreateViewModal",
  props: {
    open: { type: Boolean },
    viewNames: {}
  },
  emits: ["close", "click-primary-action", "click-secondary-action", "update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const isTouchDevice = useIsTouchDevice();
    const modalValue = ref("");
    const model = computed({
      get() {
        return "";
      },
      set(value) {
        modalValue.value = value;
        emits("update:modelValue", value);
      }
    });
    const loading2 = ref(false);
    const container = ref(null);
    const hasSameNameError = computed(() => props.viewNames.some(
      (viewName) => viewName.trim().toLowerCase() === modalValue.value.trim().toLowerCase()
    ));
    const isPrimaryActionDisabled = computed(
      () => !modalValue.value || hasSameNameError.value || loading2.value || modalValue.value.length > MAX_VIEW_NAME_LENGTH
    );
    const primaryAction = computed(() => {
      return {
        content: i18n.translate("Polaris.Tabs.CreateViewModal.create"),
        disabled: isPrimaryActionDisabled.value,
        onAction: handlePrimaryAction
      };
    });
    const secondaryActions = computed(() => [
      {
        content: i18n.translate("Polaris.Tabs.CreateViewModal.cancel"),
        onAction: handleSecondaryAction
      }
    ]);
    const errorMessage = computed(
      () => hasSameNameError.value && i18n.translate("Polaris.Tabs.CreateViewModal.errors.sameName", { name: modalValue.value })
    );
    const handlePrimaryAction = async () => {
      if (hasSameNameError.value || isPrimaryActionDisabled.value) {
        return;
      }
      loading2.value = true;
      await emits("click-primary-action", modalValue.value);
      loading2.value = false;
      model.value = "";
      emits("close");
    };
    const handleSecondaryAction = () => {
      emits("click-secondary-action");
      model.value = "";
      emits("close");
    };
    watch(
      () => [props.open, isTouchDevice.value],
      () => {
        if (!container.value || isTouchDevice.value)
          return;
        if (props.open) {
          focusFirstFocusableNode(container.value);
          const timeout = setTimeout(() => {
            if (!container.value)
              return;
            focusFirstFocusableNode(container.value);
          }, 50);
          return () => clearTimeout(timeout);
        }
      },
      {
        flush: "post"
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$14), {
        open: _ctx.open,
        primaryAction: primaryAction.value,
        secondaryActions: secondaryActions.value,
        onClose: _cache[1] || (_cache[1] = ($event) => emits("close"))
      }, {
        title: withCtx(() => [
          createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Tabs.CreateViewModal.title")), 1)
        ]),
        activator: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        default: withCtx(() => [
          createVNode(unref(_sfc_main$15), null, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$1R), { onSubmit: handlePrimaryAction }, {
                default: withCtx(() => [
                  createVNode(unref(_sfc_main$1O), null, {
                    default: withCtx(() => [
                      createBaseVNode("div", {
                        ref_key: "container",
                        ref: container
                      }, [
                        createVNode(unref(_sfc_main$9), {
                          autoComplete: "off",
                          modelValue: model.value,
                          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => model.value = $event),
                          label: unref(i18n).translate("Polaris.Tabs.CreateViewModal.label"),
                          maxLength: MAX_VIEW_NAME_LENGTH,
                          showCharacterCount: true,
                          error: errorMessage.value
                        }, null, 8, ["modelValue", "label", "error"])
                      ], 512)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 3
      }, 8, ["open", "primaryAction", "secondaryActions"]);
    };
  }
});
const _sfc_main$l = /* @__PURE__ */ defineComponent({
  __name: "TabMeasurer",
  props: {
    tabToFocus: {},
    siblingTabHasFocus: { type: Boolean },
    selected: {},
    tabs: {}
  },
  emits: ["measurement"],
  setup(__props, { emit: __emit }) {
    useSlots();
    const emits = __emit;
    const containerNode = ref(null);
    const animationFrame = ref(null);
    const classname = computed(() => classNames(styles$a.Tabs, styles$a.TabsMeasurer));
    const handleMeasurement = () => {
      if (animationFrame.value) {
        cancelAnimationFrame(animationFrame.value);
      }
      animationFrame.value = requestAnimationFrame(() => {
        if (!containerNode.value) {
          return;
        }
        const containerWidth = containerNode.value.offsetWidth - 20 - 28;
        const hiddenTabNodes = containerNode.value.children;
        const hiddenTabNodesArray = Array.from(hiddenTabNodes);
        const hiddenTabWidths = hiddenTabNodesArray.map((node) => {
          const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
          return buttonWidth + 4;
        });
        const disclosureWidth = hiddenTabWidths.pop() || 0;
        emits("measurement", {
          containerWidth,
          disclosureWidth,
          hiddenTabWidths
        });
      });
    };
    onMounted(() => {
      handleMeasurement();
    });
    useEventListener("resize", handleMeasurement);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(classname.value),
        ref_key: "containerNode",
        ref: containerNode
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.tabs, (tab, index) => {
          return openBlock(), createBlock(unref(_sfc_main$n), {
            measuring: true,
            key: `${tab.id}Hidden`,
            id: `${tab.id}`,
            siblingTabHasFocus: _ctx.siblingTabHasFocus,
            focused: index === _ctx.tabToFocus,
            selected: index === _ctx.selected,
            url: tab.url,
            content: tab.content
          }, null, 8, ["id", "siblingTabHasFocus", "focused", "selected", "url", "content"]);
        }), 128)),
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const _hoisted_1$b = ["id", "aria-labelledby"];
const _sfc_main$k = /* @__PURE__ */ defineComponent({
  __name: "Panel",
  props: {
    hidden: { type: Boolean },
    id: {},
    tabID: {}
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles$a.Panel,
      props.hidden && styles$a["Panel-hidden"]
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        role: "tabpanel",
        tabIndex: "-1",
        class: normalizeClass(className.value),
        id: _ctx.id,
        "aria-labelledby": _ctx.tabID
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1$b);
    };
  }
});
const _sfc_main$j = /* @__PURE__ */ defineComponent({
  __name: "List",
  props: {
    focusIndex: {},
    disclosureTabs: {}
  },
  emits: ["click", "keypress"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const handleKeyDown = (event) => {
      const { key } = event;
      if (key === "ArrowLeft" || key === "ArrowRight") {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("ul", {
        class: normalizeClass(unref(styles$a).List),
        onKeydown: handleKeyDown,
        onKeyup: _cache[0] || (_cache[0] = ($event) => emits("keypress", $event))
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.disclosureTabs, (item, index) => {
          return openBlock(), createBlock(unref(_sfc_main$i), {
            key: item.id,
            id: item.id,
            url: item.url,
            focused: index === _ctx.focusIndex,
            accessibilityLabel: item.accessibilityLabel,
            onClick: ($event) => emits("click", item.id)
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(item.content), 1)
            ]),
            _: 2
          }, 1032, ["id", "url", "focused", "accessibilityLabel", "onClick"]);
        }), 128))
      ], 34);
    };
  }
});
const _sfc_main$i = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    id: {},
    focused: { type: Boolean },
    url: {},
    accessibilityLabel: {}
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    const props = __props;
    const focusedNode = ref(null);
    watch(
      () => props.focused,
      () => {
        if (focusedNode.value && focusedNode.value instanceof HTMLElement && props.focused) {
          focusedNode.value.focus();
        }
      }
    );
    const classname = computed(() => classNames(styles$a.Item));
    const sharedProps = computed(() => ({
      id: props.id,
      className: classname,
      "aria-selected": false,
      "aria-label": props.accessibilityLabel
    }));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", null, [
        _ctx.url ? (openBlock(), createBlock(unref(_sfc_main$2v), mergeProps({ key: 0 }, sharedProps.value, {
          ref_key: "focusedNode",
          ref: focusedNode,
          url: _ctx.url,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["url"])) : (openBlock(), createElementBlock("button", mergeProps({ key: 1 }, sharedProps.value, {
          ref_key: "focusedNode",
          ref: focusedNode,
          type: "button",
          onClick: _cache[1] || (_cache[1] = ($event) => emits("click"))
        }), [
          renderSlot(_ctx.$slots, "default")
        ], 16))
      ]);
    };
  }
});
function getVisibleAndHiddenTabIndices(tabs, selected2, disclosureWidth, tabWidths, containerWidth) {
  const sumTabWidths = tabWidths.reduce((sum, width2) => sum + width2, 0);
  const arrayOfTabIndices = tabs.map((_, index) => {
    return index;
  });
  const visibleTabs = [];
  const hiddenTabs = [];
  if (containerWidth > sumTabWidths) {
    visibleTabs.push(...arrayOfTabIndices);
  } else {
    visibleTabs.push(selected2);
    let tabListWidth = tabWidths[selected2];
    arrayOfTabIndices.forEach((currentTabIndex) => {
      if (currentTabIndex !== selected2) {
        const currentTabWidth = tabWidths[currentTabIndex];
        if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
          hiddenTabs.push(currentTabIndex);
          return;
        }
        visibleTabs.push(currentTabIndex);
        tabListWidth += currentTabWidth;
      }
    });
  }
  return {
    visibleTabs,
    hiddenTabs
  };
}
const _hoisted_1$a = ["role"];
const _hoisted_2$8 = { key: 1 };
const CREATE_NEW_VIEW_ID = "create-new-view";
const _sfc_main$h = /* @__PURE__ */ defineComponent({
  __name: "Tabs",
  props: {
    tabs: {},
    selected: {},
    disabled: { type: Boolean },
    canCreateNewView: { type: Boolean },
    newViewAccessibilityLabel: {},
    fitted: { type: Boolean },
    disclosureText: {}
  },
  emits: ["select", "create-new-view"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const breakpoints2 = useBreakpoints();
    const currentInstance = getCurrentInstance();
    const { hasSlot } = useHasSlot();
    const scrollRef = ref(null);
    const wrapRef = ref(null);
    const selectedTabRef = ref(null);
    const state = reactive({
      disclosureWidth: 0,
      containerWidth: Infinity,
      tabWidths: [],
      visibleTabs: [],
      hiddenTabs: [],
      showDisclosure: false,
      tabToFocus: -1,
      isNewViewModalActive: false,
      modalSubmitted: false,
      isTabsFocused: false,
      isTabPopoverOpen: false,
      isTabModalOpen: false
    });
    const prevModalOpen = ref(false);
    const prevPopoverOpen = ref(false);
    const createViewA11yLabel = computed(
      () => props.newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel")
    );
    const tabsToShow = computed(
      () => breakpoints2.value.mdDown ? [...state.visibleTabs, ...state.hiddenTabs] : state.visibleTabs
    );
    const tabData = computed(
      () => tabsToShow.value.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => props.tabs[tabIndex])
    );
    const disclosureActivatorVisible = computed(
      () => state.visibleTabs.length < props.tabs.length && !breakpoints2.value.mdDown
    );
    const classname = computed(() => classNames(
      styles$a.Tabs,
      props.fitted && styles$a.fitted,
      disclosureActivatorVisible.value && styles$a.fillSpace
    ));
    const wrapperClassNames = computed(() => classNames(
      styles$a.Wrapper,
      props.canCreateNewView && styles$a.WrapperWithNewButton
    ));
    const disclosureTabClassName = computed(() => classNames(
      styles$a.DisclosureTab,
      disclosureActivatorVisible.value && styles$a["DisclosureTab-visible"]
    ));
    const disclosureTabs = computed(
      () => state.hiddenTabs.map((tabIndex) => props.tabs[tabIndex])
    );
    const viewNames = computed(() => props.tabs.map(({ content }) => content));
    const handleTogglePopover = (isOpen) => {
      state.isTabPopoverOpen = isOpen;
    };
    const handleToggleModal = (isOpen) => {
      state.isTabModalOpen = isOpen;
    };
    const handleCloseNewViewModal = () => {
      state.isNewViewModalActive = false;
    };
    const handleSaveNewViewModal = (value) => {
      var _a;
      if (!((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onCreateNewView)) {
        return false;
      }
      emits("create-new-view", value);
      state.modalSubmitted = true;
      return value;
    };
    const handleClickNewTab = () => {
      state.isNewViewModalActive = true;
    };
    const handleTabClick = (id) => {
      var _a;
      const tab = props.tabs.find((aTab) => aTab.id === id);
      if (tab == null) {
        return;
      }
      const selectedIndex = props.tabs.indexOf(tab);
      ((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onSelect) && emits("select", selectedIndex);
    };
    const handleFocus = (event) => {
      const target = event.target;
      const isItem = target.classList.contains(styles$a.Item);
      const isInNaturalDOMOrder = target.closest(`[data-tabs-focus-catchment]`) || isItem;
      const isDisclosureActivator = target.classList.contains(
        styles$a.DisclosureActivator
      );
      if (isDisclosureActivator || !isInNaturalDOMOrder) {
        return;
      }
      state.isTabsFocused = true;
    };
    const handleBlur = (event) => {
      var _a, _b, _c;
      const target = event.target;
      const relatedTarget = event.relatedTarget;
      const isInNaturalDOMOrder = (_a = relatedTarget == null ? void 0 : relatedTarget.closest) == null ? void 0 : _a.call(relatedTarget, `.${styles$a.Tabs}`);
      const targetIsATab = (_c = (_b = target == null ? void 0 : target.classList) == null ? void 0 : _b.contains) == null ? void 0 : _c.call(_b, styles$a.Tab);
      const focusReceiverIsAnItem = relatedTarget == null ? void 0 : relatedTarget.classList.contains(styles$a.Item);
      if (!relatedTarget && !state.isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem || !isInNaturalDOMOrder && !state.isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
        state.tabToFocus = -1;
        return;
      }
      state.isTabsFocused = false;
    };
    const handleKeyDown = (event) => {
      if (state.isTabPopoverOpen || state.isTabModalOpen || state.isNewViewModalActive) {
        return;
      }
      const { key } = event;
      if (key === "ArrowLeft" || key === "ArrowRight") {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    const moveToSelectedTab = () => {
      var _a;
      const activeButton = (_a = selectedTabRef.value) == null ? void 0 : _a.querySelector(
        `.${styles$a["Tab-active"]}`
      );
      if (activeButton) {
        moveToActiveTab(activeButton.offsetLeft);
      }
    };
    const handleKeyPress = (event) => {
      if (state.isTabModalOpen || state.isTabPopoverOpen || state.isNewViewModalActive) {
        return;
      }
      const key = event.key;
      const tabsArrayInOrder = state.showDisclosure || breakpoints2.value.mdDown ? state.visibleTabs.concat(state.hiddenTabs) : [...state.visibleTabs];
      let newFocus = tabsArrayInOrder.indexOf(state.tabToFocus);
      if (key === "ArrowRight") {
        newFocus += 1;
        if (newFocus === tabsArrayInOrder.length) {
          newFocus = 0;
        }
      }
      if (key === "ArrowLeft") {
        if (newFocus === -1 || newFocus === 0) {
          newFocus = tabsArrayInOrder.length - 1;
        } else {
          newFocus -= 1;
        }
      }
      const buttonToFocus = tabsArrayInOrder[newFocus];
      if (buttonToFocus != null) {
        state.tabToFocus = buttonToFocus;
      }
    };
    const handleDisclosureActivatorClick = () => {
      state.showDisclosure = !state.showDisclosure;
      state.tabToFocus = state.hiddenTabs[0];
    };
    const handleClose = () => {
      state.showDisclosure = false;
    };
    const handleMeasurement = (measurements) => {
      const {
        hiddenTabWidths: tabWidths,
        containerWidth,
        disclosureWidth
      } = measurements;
      const { visibleTabs, hiddenTabs } = getVisibleAndHiddenTabIndices(
        props.tabs,
        props.selected,
        disclosureWidth,
        tabWidths,
        containerWidth
      );
      state.visibleTabs = visibleTabs;
      state.hiddenTabs = hiddenTabs;
      state.disclosureWidth = disclosureWidth;
      state.containerWidth = containerWidth;
      state.tabWidths = tabWidths;
    };
    const handleListTabClick = (id) => {
      handleTabClick(id);
      handleClose();
      state.isTabsFocused = true;
    };
    const moveToActiveTab = (offsetLeft) => {
      setTimeout(() => {
        var _a, _b;
        if (scrollRef.value && typeof scrollRef.value.scroll === "function") {
          const scrollRefOffset = ((_a = wrapRef == null ? void 0 : wrapRef.value) == null ? void 0 : _a.offsetLeft) || 0;
          (_b = scrollRef == null ? void 0 : scrollRef.value) == null ? void 0 : _b.scroll({
            left: offsetLeft - scrollRefOffset
          });
        }
      }, 0);
    };
    const handleTabFocus = () => {
      if (state.modalSubmitted) {
        state.tabToFocus = props.selected;
        state.modalSubmitted = false;
      }
    };
    onMounted(() => {
      prevModalOpen.value = state.isTabModalOpen;
      prevPopoverOpen.value = state.isTabPopoverOpen;
    });
    watch(
      () => [
        prevPopoverOpen.value,
        state.isTabPopoverOpen,
        prevModalOpen.value,
        state.isTabModalOpen,
        props.selected,
        state.tabToFocus
      ],
      () => {
        const hasModalClosed = prevModalOpen.value && !state.isTabModalOpen;
        const hasPopoverClosed = prevPopoverOpen.value && !state.isTabPopoverOpen;
        if (hasModalClosed) {
          state.isTabsFocused = true;
          state.tabToFocus = props.selected;
        } else if (hasPopoverClosed && !state.isTabModalOpen) {
          state.isTabsFocused = true;
          state.tabToFocus = props.selected;
        }
      }
    );
    watch(
      () => [
        state.containerWidth,
        state.disclosureWidth,
        props.tabs,
        props.selected,
        state.tabWidths
      ],
      () => {
        const { visibleTabs, hiddenTabs } = getVisibleAndHiddenTabIndices(
          props.tabs,
          props.selected,
          state.disclosureWidth,
          state.tabWidths,
          state.containerWidth
        );
        state.visibleTabs = visibleTabs;
        state.hiddenTabs = hiddenTabs;
      },
      { immediate: true }
    );
    watch(
      () => [
        props.selected,
        breakpoints2.value.mdDown
      ],
      () => {
        if (breakpoints2.value.mdDown) {
          moveToSelectedTab();
        }
      }
    );
    watch(
      () => [
        state.isTabsFocused,
        props.selected,
        state.showDisclosure
      ],
      () => {
        if (state.isTabsFocused && !state.showDisclosure) {
          state.tabToFocus = props.selected;
        }
      }
    );
    const activator = () => h(
      resolveComponent("UnstyledButton"),
      {
        type: "button",
        className: classNames(styles$a.DisclosureActivator),
        disabled: props.disabled,
        "aria-label": props.disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
        onClick: handleDisclosureActivatorClick
      },
      () => [
        h(
          resolveComponent("Text"),
          { as: "span", variant: "bodySm", fontWeight: "medium" },
          () => props.disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")
        ),
        h(
          "div",
          {
            class: classNames(
              styles$a.IconWrap,
              disclosureActivatorVisible.value && state.showDisclosure && styles$a["IconWrap-open"]
            )
          },
          h(
            resolveComponent("Icon"),
            { source: ChevronDownIcon, tone: "subdued" }
          )
        )
      ]
    );
    return (_ctx, _cache) => {
      const _component_Box = resolveComponent("Box");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$a).Outer)
      }, [
        createVNode(_component_Box, { padding: { md: "200" } }, {
          default: withCtx(() => [
            createVNode(unref(_sfc_main$l), {
              tabToFocus: state.tabToFocus,
              selected: _ctx.selected,
              tabs: _ctx.tabs,
              siblingTabHasFocus: state.tabToFocus > -1,
              onMeasurement: handleMeasurement
            }, {
              default: withCtx(() => [
                createVNode(activator)
              ]),
              _: 1
            }, 8, ["tabToFocus", "selected", "tabs", "siblingTabHasFocus"]),
            createBaseVNode("div", {
              ref_key: "scrollRef",
              ref: scrollRef,
              class: normalizeClass(wrapperClassNames.value)
            }, [
              createBaseVNode("div", {
                ref_key: "wrapRef",
                ref: wrapRef,
                class: normalizeClass(unref(styles$a).ButtonWrapper)
              }, [
                createBaseVNode("ul", {
                  role: tabData.value.length > 0 ? "tablist" : void 0,
                  class: normalizeClass(classname.value),
                  onFocus: handleFocus,
                  onBlur: handleBlur,
                  onKeydown: handleKeyDown,
                  onKeyup: handleKeyPress,
                  "data-tabs-focus-catchment": ""
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(tabData.value, (_tab, index) => {
                    return openBlock(), createBlock(unref(_sfc_main$n), mergeProps(_ctx.tabs[index], {
                      ref_for: true,
                      ref: "undefined",
                      actions: _ctx.tabs[index].actions,
                      key: `${index}-${_ctx.tabs[index].id}`,
                      id: _ctx.tabs[index].id,
                      panelID: unref(hasSlot)(unref(slots).default) ? _ctx.tabs[index].panelID || `${_ctx.tabs[index].id}-panel` : void 0,
                      disabled: _ctx.disabled || _ctx.tabs[index].disabled,
                      siblingTabHasFocus: state.tabToFocus > -1,
                      focused: index === state.tabToFocus,
                      selected: index === _ctx.selected,
                      accessibilityLabel: _ctx.tabs[index].accessibilityLabel,
                      url: _ctx.tabs[index].url,
                      content: _ctx.tabs[index].content,
                      viewNames: viewNames.value,
                      onTabAction: () => {
                        handleTabClick(_ctx.tabs[index].id);
                      },
                      onToggleModal: handleToggleModal,
                      onTogglePopover: handleTogglePopover
                    }), null, 16, ["actions", "id", "panelID", "disabled", "siblingTabHasFocus", "focused", "selected", "accessibilityLabel", "url", "content", "viewNames", "onTabAction"]);
                  }), 128)),
                  unref(breakpoints2).mdDown || tabsToShow.value.length === 0 ? (openBlock(), createElementBlock("li", {
                    key: 0,
                    role: "presentation",
                    class: normalizeClass(disclosureTabClassName.value)
                  }, [
                    createVNode(unref(_sfc_main$P), {
                      preferredPosition: "below",
                      preferredAlignment: "left",
                      autofocusTarget: "first-node",
                      active: disclosureActivatorVisible.value && state.showDisclosure,
                      onClose: handleClose
                    }, {
                      activator: withCtx(() => [
                        createVNode(activator)
                      ]),
                      default: withCtx(() => [
                        createVNode(unref(_sfc_main$j), {
                          focusIndex: state.hiddenTabs.indexOf(state.tabToFocus),
                          disclosureTabs: disclosureTabs.value,
                          onClick: handleListTabClick,
                          onKeypress: handleKeyPress
                        }, null, 8, ["focusIndex", "disclosureTabs"])
                      ]),
                      _: 1
                    }, 8, ["active"])
                  ], 2)) : createCommentVNode("", true)
                ], 42, _hoisted_1$a),
                _ctx.canCreateNewView && tabsToShow.value.length > 0 ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(styles$a).NewTab)
                }, [
                  createVNode(unref(_sfc_main$m), {
                    open: state.isNewViewModalActive,
                    viewNames: viewNames.value,
                    onClose: handleCloseNewViewModal,
                    onClickPrimaryAction: handleSaveNewViewModal
                  }, {
                    default: withCtx(() => [
                      _ctx.disabled ? (openBlock(), createBlock(unref(_sfc_main$n), {
                        key: 0,
                        id: CREATE_NEW_VIEW_ID,
                        content: createViewA11yLabel.value,
                        actions: [],
                        disabled: _ctx.disabled,
                        tabIndexOverride: 0,
                        onTogglePopover: handleTogglePopover,
                        onToggleModal: handleToggleModal,
                        onTabAction: handleClickNewTab,
                        onFocus: handleTabFocus
                      }, {
                        icon: withCtx(() => [
                          createVNode(unref(_sfc_main$1K), {
                            source: unref(PlusIcon),
                            accessibilityLabel: createViewA11yLabel.value
                          }, null, 8, ["source", "accessibilityLabel"])
                        ]),
                        _: 1
                      }, 8, ["content", "disabled"])) : (openBlock(), createElementBlock("div", _hoisted_2$8, [
                        createVNode(unref(_sfc_main$4), {
                          preferredPosition: "above",
                          content: unref(i18n).translate("Polaris.Tabs.newViewTooltip"),
                          hoverDelay: 400
                        }, {
                          default: withCtx(() => [
                            createVNode(unref(_sfc_main$n), {
                              id: CREATE_NEW_VIEW_ID,
                              content: createViewA11yLabel.value,
                              actions: [],
                              disabled: _ctx.disabled,
                              tabIndexOverride: 0,
                              onTogglePopover: handleTogglePopover,
                              onToggleModal: handleToggleModal,
                              onTabAction: handleClickNewTab,
                              onFocus: handleTabFocus
                            }, {
                              icon: withCtx(() => [
                                createVNode(unref(_sfc_main$1K), {
                                  source: unref(PlusIcon),
                                  accessibilityLabel: createViewA11yLabel.value
                                }, null, 8, ["source", "accessibilityLabel"])
                              ]),
                              _: 1
                            }, 8, ["content", "disabled"])
                          ]),
                          _: 1
                        }, 8, ["content"])
                      ]))
                    ]),
                    _: 1
                  }, 8, ["open", "viewNames"])
                ], 2)) : createCommentVNode("", true)
              ], 2)
            ], 2)
          ]),
          _: 1
        }),
        unref(hasSlot)(unref(slots).default) ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(_ctx.tabs, (_tab, index) => {
          return openBlock(), createElementBlock(Fragment, null, [
            _ctx.selected === index ? (openBlock(), createBlock(unref(_sfc_main$k), {
              key: _ctx.tabs[index].id,
              id: _ctx.tabs[index].panelID || `${_ctx.tabs[index].id}-panel`,
              tabID: _ctx.tabs[index].id
            }, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 2
            }, 1032, ["id", "tabID"])) : (openBlock(), createBlock(unref(_sfc_main$k), {
              hidden: "",
              key: index,
              id: _ctx.tabs[index].panelID || `${_ctx.tabs[index].id}-panel`,
              tabID: _ctx.tabs[index].id
            }, null, 8, ["id", "tabID"]))
          ], 64);
        }), 256)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const Tag = "Polaris-Tag";
const disabled$1 = "Polaris-Tag--disabled";
const clickable = "Polaris-Tag--clickable";
const linkable = "Polaris-Tag--linkable";
const removable = "Polaris-Tag--removable";
const TagText = "Polaris-Tag__TagText";
const Button = "Polaris-Tag__Button";
const Link = "Polaris-Tag__Link";
const LinkText = "Polaris-Tag__LinkText";
const segmented = "Polaris-Tag--segmented";
const sizeLarge$1 = "Polaris-Tag--sizeLarge";
const overlay = "Polaris-Tag--overlay";
const styles$9 = {
  Tag,
  disabled: disabled$1,
  clickable,
  linkable,
  removable,
  TagText,
  Button,
  Link,
  LinkText,
  segmented,
  sizeLarge: sizeLarge$1,
  overlay
};
const _hoisted_1$9 = ["disabled"];
const _hoisted_2$7 = ["aria-disabled"];
const _hoisted_3$4 = ["href"];
const _hoisted_4$2 = ["title"];
const _hoisted_5$1 = ["title"];
const _hoisted_6$1 = ["aria-label", "disabled"];
const _sfc_main$g = /* @__PURE__ */ defineComponent({
  __name: "Tag",
  props: {
    disabled: { type: Boolean, default: false },
    accessibilityLabel: {},
    url: {},
    size: {}
  },
  emits: ["remove", "click"],
  setup(__props, { emit: __emit }) {
    const currentInstance = getCurrentInstance();
    const slots = useSlots();
    const props = __props;
    const emits = __emit;
    const hasEventClick = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onClick);
    });
    const hasEventRemove = computed(() => {
      var _a;
      return Boolean((_a = currentInstance == null ? void 0 : currentInstance.vnode.props) == null ? void 0 : _a.onRemove);
    });
    const segmented2 = computed(() => hasEventClick.value && props.url);
    const className = computed(() => {
      return classNames(
        styles$9.Tag,
        props.disabled && styles$9.disabled,
        hasEventClick.value && styles$9.clickable,
        hasEventRemove.value && styles$9.removable,
        props.url && !props.disabled && styles$9.linkable,
        segmented2.value && styles$9.segmented,
        props.size && styles$9[variationName("size", props.size)]
      );
    });
    const classLink = computed(() => classNames(styles$9.Link, segmented2.value && styles$9.segmented));
    const classRemove = computed(() => classNames(styles$9.Button, segmented2.value && styles$9.segmented));
    const tagTitle = computed(() => {
      if (props.accessibilityLabel) {
        return props.accessibilityLabel;
      }
      if (slots.default && slots.default()[0].children) {
        return slots.default()[0].children;
      }
      return "";
    });
    const ariaLabel = computed(() => {
      return `Remove ${tagTitle.value || ""}`;
    });
    const onMouseUp = handleMouseUpByBlurring;
    return (_ctx, _cache) => {
      const _component_Icon = resolveComponent("Icon");
      return hasEventClick.value ? (openBlock(), createElementBlock("button", {
        key: 0,
        type: "button",
        disabled: _ctx.disabled,
        class: normalizeClass(className.value),
        onClick: _cache[0] || (_cache[0] = ($event) => emits("click"))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 10, _hoisted_1$9)) : (openBlock(), createElementBlock("span", {
        key: 1,
        class: normalizeClass(className.value),
        "aria-disabled": _ctx.disabled
      }, [
        _ctx.url && !_ctx.disabled ? (openBlock(), createElementBlock("a", {
          key: 0,
          class: normalizeClass(classLink.value),
          href: _ctx.url
        }, [
          createBaseVNode("span", {
            title: tagTitle.value,
            class: normalizeClass(unref(styles$9).LinkText)
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 10, _hoisted_4$2)
        ], 10, _hoisted_3$4)) : (openBlock(), createElementBlock("span", {
          key: 1,
          title: tagTitle.value,
          class: normalizeClass(unref(styles$9).TagText)
        }, [
          renderSlot(_ctx.$slots, "default")
        ], 10, _hoisted_5$1)),
        _ctx.size === "large" ? (openBlock(), createElementBlock("span", {
          key: 2,
          class: normalizeClass(unref(styles$9).overlay)
        }, null, 2)) : createCommentVNode("", true),
        hasEventRemove.value ? (openBlock(), createElementBlock("button", {
          key: 3,
          type: "button",
          "aria-label": ariaLabel.value,
          class: normalizeClass(classRemove.value),
          disabled: _ctx.disabled,
          onClick: _cache[1] || (_cache[1] = ($event) => emits("remove")),
          onMouseup: _cache[2] || (_cache[2] = //@ts-ignore
          (...args) => unref(onMouseUp) && unref(onMouseUp)(...args))
        }, [
          createVNode(_component_Icon, { source: unref(XSmallIcon) }, null, 8, ["source"])
        ], 42, _hoisted_6$1)) : createCommentVNode("", true)
      ], 10, _hoisted_2$7));
    };
  }
});
const root = "Polaris-Text--root";
const block = "Polaris-Text--block";
const truncate = "Polaris-Text--truncate";
const visuallyHidden = "Polaris-Text--visuallyHidden";
const start = "Polaris-Text--start";
const center = "Polaris-Text--center";
const end = "Polaris-Text--end";
const justify = "Polaris-Text--justify";
const success = "Polaris-Text--success";
const critical = "Polaris-Text--critical";
const caution = "Polaris-Text--caution";
const subdued = "Polaris-Text--subdued";
const magic = "Polaris-Text--magic";
const headingXs = "Polaris-Text--headingXs";
const headingSm = "Polaris-Text--headingSm";
const headingMd = "Polaris-Text--headingMd";
const headingLg = "Polaris-Text--headingLg";
const headingXl = "Polaris-Text--headingXl";
const heading2xl = "Polaris-Text--heading2xl";
const heading3xl = "Polaris-Text--heading3xl";
const bodyXs = "Polaris-Text--bodyXs";
const bodySm = "Polaris-Text--bodySm";
const bodyMd = "Polaris-Text--bodyMd";
const bodyLg = "Polaris-Text--bodyLg";
const regular = "Polaris-Text--regular";
const medium = "Polaris-Text--medium";
const semibold = "Polaris-Text--semibold";
const bold = "Polaris-Text--bold";
const numeric = "Polaris-Text--numeric";
const styles$8 = {
  root,
  block,
  truncate,
  visuallyHidden,
  start,
  center,
  end,
  justify,
  success,
  critical,
  caution,
  subdued,
  magic,
  "magic-subdued": "Polaris-Text__magic--subdued",
  "text-inverse": "Polaris-Text__text--inverse",
  headingXs,
  headingSm,
  headingMd,
  headingLg,
  headingXl,
  heading2xl,
  heading3xl,
  bodyXs,
  bodySm,
  bodyMd,
  bodyLg,
  regular,
  medium,
  semibold,
  bold,
  "break": "Polaris-Text--break",
  numeric,
  "line-through": "Polaris-Text__line--through"
};
const _sfc_main$f = /* @__PURE__ */ defineComponent({
  __name: "Text",
  props: {
    alignment: {},
    as: {},
    breakWord: { type: Boolean },
    tone: {},
    fontWeight: {},
    id: {},
    numeric: { type: Boolean, default: false },
    truncate: { type: Boolean, default: false },
    variant: {},
    visuallyHidden: { type: Boolean, default: false },
    textDecorationLine: {}
  },
  setup(__props) {
    const props = __props;
    const className = computed(() => classNames(
      styles$8.root,
      props.variant && styles$8[props.variant],
      props.fontWeight && styles$8[props.fontWeight],
      (props.alignment || props.truncate) && styles$8.block,
      props.alignment && styles$8[props.alignment],
      props.breakWord && styles$8.breakWord,
      props.tone && styles$8[props.tone],
      props.numeric && styles$8.numeric,
      props.truncate && styles$8.truncate,
      props.visuallyHidden && styles$8.visuallyHidden,
      props.textDecorationLine && styles$8[props.textDecorationLine]
    ));
    const element = computed(() => {
      if (props.as) {
        return props.as;
      }
      return props.visuallyHidden ? "span" : "p";
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(element.value), {
        class: normalizeClass(className.value),
        id: _ctx.id
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["class", "id"]);
    };
  }
});
const TextContainer = "Polaris-TextContainer";
const spacingTight = "Polaris-TextContainer--spacingTight";
const spacingLoose = "Polaris-TextContainer--spacingLoose";
const styles$7 = {
  TextContainer,
  spacingTight,
  spacingLoose
};
const _sfc_main$e = /* @__PURE__ */ defineComponent({
  __name: "TextContainer",
  props: {
    spacing: {}
  },
  setup(__props) {
    const props = __props;
    const className = computed(
      () => classNames(
        styles$7.TextContainer,
        props.spacing && styles$7[variationName("spacing", props.spacing)]
      )
    );
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const Connected = "Polaris-Connected";
const Item = "Polaris-Connected__Item";
const styles$6 = {
  Connected,
  Item,
  "Item-primary": "Polaris-Connected__Item--primary",
  "Item-focused": "Polaris-Connected__Item--focused"
};
const _sfc_main$d = /* @__PURE__ */ defineComponent({
  __name: "Item",
  props: {
    position: {}
  },
  setup(__props) {
    const props = __props;
    const {
      value: focused2,
      setTrue: forceTrueFocused,
      setFalse: forceFalseFocused
    } = useToggle(false);
    const className = computed(() => classNames(
      styles$6.Item,
      focused2 && styles$6["Item-focused"],
      props.position === "primary" ? styles$6["Item-primary"] : styles$6["Item-connection"]
    ));
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(className.value),
        onBlur: _cache[0] || (_cache[0] = //@ts-ignore
        (...args) => unref(forceTrueFocused) && unref(forceTrueFocused)(...args)),
        onFocus: _cache[1] || (_cache[1] = //@ts-ignore
        (...args) => unref(forceFalseFocused) && unref(forceFalseFocused)(...args))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 34);
    };
  }
});
const _sfc_main$c = /* @__PURE__ */ defineComponent({
  __name: "Connected",
  setup(__props) {
    const slots = useSlots();
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles$6).Connected)
      }, [
        unref(slots).left ? (openBlock(), createBlock(unref(_sfc_main$d), {
          key: 0,
          position: "left"
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "left")
          ]),
          _: 3
        })) : createCommentVNode("", true),
        createVNode(unref(_sfc_main$d), { position: "primary" }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }),
        unref(slots).right ? (openBlock(), createBlock(unref(_sfc_main$d), {
          key: 1,
          position: "right"
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "right")
          ]),
          _: 3
        })) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const _hoisted_1$8 = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$6 = /* @__PURE__ */ createBaseVNode("path", { d: "M13.03 6.97a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0" }, null, -1);
const _hoisted_3$3 = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14m0-1.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11"
}, null, -1);
const _hoisted_4$1 = [
  _hoisted_2$6,
  _hoisted_3$3
];
function render$1(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$8, [..._hoisted_4$1]);
}
const XCircleIcon = { render: render$1 };
const TextField = "Polaris-TextField";
const ClearButton = "Polaris-TextField__ClearButton";
const Loading = "Polaris-TextField__Loading";
const disabled = "Polaris-TextField--disabled";
const error = "Polaris-TextField--error";
const readOnly = "Polaris-TextField--readOnly";
const Input = "Polaris-TextField__Input";
const Backdrop = "Polaris-TextField__Backdrop";
const multiline = "Polaris-TextField--multiline";
const hasValue = "Polaris-TextField--hasValue";
const focus = "Polaris-TextField--focus";
const VerticalContent = "Polaris-TextField__VerticalContent";
const InputAndSuffixWrapper = "Polaris-TextField__InputAndSuffixWrapper";
const toneMagic = "Polaris-TextField--toneMagic";
const Prefix = "Polaris-TextField__Prefix";
const Suffix = "Polaris-TextField__Suffix";
const AutoSizeWrapper = "Polaris-TextField__AutoSizeWrapper";
const AutoSizeWrapperWithSuffix = "Polaris-TextField__AutoSizeWrapperWithSuffix";
const suggestion = "Polaris-TextField--suggestion";
const borderless = "Polaris-TextField--borderless";
const slim = "Polaris-TextField--slim";
const PrefixIcon = "Polaris-TextField__PrefixIcon";
const CharacterCount = "Polaris-TextField__CharacterCount";
const AlignFieldBottom = "Polaris-TextField__AlignFieldBottom";
const Spinner = "Polaris-TextField__Spinner";
const SpinnerIcon = "Polaris-TextField__SpinnerIcon";
const Resizer = "Polaris-TextField__Resizer";
const DummyInput = "Polaris-TextField__DummyInput";
const Segment = "Polaris-TextField__Segment";
const monospaced = "Polaris-TextField--monospaced";
const styles$5 = {
  TextField,
  ClearButton,
  Loading,
  disabled,
  error,
  readOnly,
  Input,
  Backdrop,
  multiline,
  hasValue,
  focus,
  VerticalContent,
  InputAndSuffixWrapper,
  toneMagic,
  Prefix,
  Suffix,
  AutoSizeWrapper,
  AutoSizeWrapperWithSuffix,
  suggestion,
  borderless,
  slim,
  "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
  "Input-suffixed": "Polaris-TextField__Input--suffixed",
  "Input-alignRight": "Polaris-TextField__Input--alignRight",
  "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
  "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
  "Input-autoSize": "Polaris-TextField__Input--autoSize",
  PrefixIcon,
  CharacterCount,
  AlignFieldBottom,
  Spinner,
  SpinnerIcon,
  Resizer,
  DummyInput,
  Segment,
  monospaced
};
const _hoisted_1$7 = ["innerHTML"];
const _hoisted_2$5 = ["innerHTML"];
const _sfc_main$b = /* @__PURE__ */ defineComponent({
  __name: "Resizer",
  props: {
    contents: {},
    currentHeight: {},
    minimumLines: {},
    onHeightChange: { type: Function }
  },
  emits: ["height-change"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const contentNode = ref(null);
    const minimumLinesNode = ref(null);
    const animationFrame = ref();
    const currentHeight = ref(props.currentHeight ?? null);
    if (props.currentHeight !== currentHeight.value) {
      currentHeight.value = props.currentHeight || null;
    }
    const finalContents = computed(() => {
      return props.contents ? `${props.contents.replace(REPLACE_REGEX2, replaceEntity)}<br>` : "<br>";
    });
    const contentsForMinimumLines = computed(() => {
      if (!props.minimumLines)
        return "";
      let content = "";
      for (let line = 0; line < props.minimumLines; line++) {
        content += "<br>";
      }
      return content;
    });
    onMounted(() => {
      useEventListener("resize", handleHeightCheck);
      if (animationFrame.value) {
        cancelAnimationFrame(animationFrame.value);
      }
    });
    const handleHeightCheck = () => {
      if (animationFrame.value) {
        cancelAnimationFrame(animationFrame.value);
      }
      animationFrame.value = requestAnimationFrame(() => {
        if (!contentNode.value || !minimumLinesNode.value) {
          return;
        }
        const newHeight = Math.max(
          contentNode.value.offsetHeight,
          minimumLinesNode.value.offsetHeight
        );
        if (newHeight !== currentHeight.value) {
          emits("height-change", newHeight);
        }
      });
    };
    const ENTITIES_TO_REPLACE = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      "\n": "<br>",
      "\r": ""
    };
    const REPLACE_REGEX2 = new RegExp(
      `[${Object.keys(ENTITIES_TO_REPLACE).join()}]`,
      "g"
    );
    function replaceEntity(entity) {
      return ENTITIES_TO_REPLACE[entity];
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        "aria-hidden": "",
        class: normalizeClass(unref(styles$5).Resizer)
      }, [
        createBaseVNode("div", {
          ref_key: "contentNode",
          ref: contentNode,
          class: normalizeClass(unref(styles$5).DummyInput),
          innerHTML: finalContents.value
        }, null, 10, _hoisted_1$7),
        _ctx.minimumLines ? (openBlock(), createElementBlock("div", {
          key: 0,
          ref_key: "minimumLinesNode",
          ref: minimumLinesNode,
          class: normalizeClass(unref(styles$5).DummyInput),
          innerHTML: contentsForMinimumLines.value
        }, null, 10, _hoisted_2$5)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const _sfc_main$a = /* @__PURE__ */ defineComponent({
  __name: "Spinner",
  emits: ["change", "click", "mousedown", "mouseup", "blur"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const emits = __emit;
    const spinnerRef = ref(null);
    const handleStep = (step) => {
      emits("change", step);
    };
    const handleMouseDown = (e, step) => {
      if (e.button !== 0)
        return;
      emits("mousedown", step);
    };
    const onClick = (e) => {
      emits("click", e);
    };
    const onMouseUp = () => {
      emits("mouseup");
    };
    const onBlur = (e) => {
      emits("blur", e);
    };
    __expose({
      spinnerWrapperRef: spinnerRef,
      handleStep
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "spinnerRef",
        ref: spinnerRef,
        class: normalizeClass(unref(styles$5).Spinner),
        "aria-hidden": "",
        onClick
      }, [
        createBaseVNode("div", {
          role: "button",
          class: normalizeClass(unref(styles$5).Segment),
          tabindex: "-1",
          onClick: _cache[0] || (_cache[0] = ($event) => handleStep(1)),
          onMousedown: _cache[1] || (_cache[1] = ($event) => handleMouseDown($event, 1)),
          onMouseup: onMouseUp,
          onBlur
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(styles$5).SpinnerIcon)
          }, [
            createVNode(unref(_sfc_main$1K), { source: unref(ChevronUpIcon) }, null, 8, ["source"])
          ], 2)
        ], 34),
        createBaseVNode("div", {
          role: "button",
          class: normalizeClass(unref(styles$5).Segment),
          tabindex: "-1",
          onClick: _cache[2] || (_cache[2] = ($event) => handleStep(-1)),
          onMousedown: _cache[3] || (_cache[3] = ($event) => handleMouseDown($event, -1)),
          onMouseup: onMouseUp,
          onBlur
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(styles$5).SpinnerIcon)
          }, [
            createVNode(unref(_sfc_main$1K), { source: unref(ChevronDownIcon) }, null, 8, ["source"])
          ], 2)
        ], 34)
      ], 2);
    };
  }
});
const _hoisted_1$6 = ["id"];
const _hoisted_2$4 = ["data-auto-size-value"];
const _hoisted_3$2 = ["id"];
const _hoisted_4 = ["id"];
const _hoisted_5 = ["id"];
const _hoisted_6 = ["id"];
const _hoisted_7 = ["aria-label", "aria-live"];
const _hoisted_8 = ["id"];
const _hoisted_9 = ["disabled"];
const _sfc_main$9 = /* @__PURE__ */ defineComponent({
  __name: "TextField",
  props: /* @__PURE__ */ mergeModels({
    prefix: {},
    suffix: {},
    verticalContent: {},
    placeholder: {},
    value: {},
    helpText: {},
    label: {},
    labelAction: {},
    labelHidden: { type: Boolean },
    disabled: { type: Boolean },
    clearButton: { type: Boolean },
    selectTextOnFocus: { type: Boolean },
    suggestion: {},
    readOnly: { type: Boolean },
    autoFocus: { type: Boolean },
    focused: { type: Boolean },
    multiline: { type: [Boolean, Number] },
    error: { type: [String, Array, Boolean] },
    type: { default: "text" },
    name: {},
    id: {},
    role: {},
    step: {},
    largeStep: {},
    autoComplete: {},
    max: {},
    maxLength: {},
    maxHeight: {},
    min: {},
    minLength: {},
    pattern: {},
    inputMode: {},
    spellCheck: { type: Boolean },
    ariaOwns: {},
    ariaExpanded: { type: Boolean },
    ariaControls: {},
    ariaActiveDescendant: {},
    ariaAutocomplete: {},
    showCharacterCount: { type: Boolean },
    align: {},
    requiredIndicator: { type: Boolean },
    monospaced: { type: Boolean },
    variant: { default: "inherit" },
    size: { default: "medium" },
    tone: {},
    autoSize: { type: Boolean },
    loading: { type: Boolean },
    readonly: { type: Boolean }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: /* @__PURE__ */ mergeModels(["clear-button-click", "input", "change", "spinner-change", "focus", "blur"], ["update:modelValue"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const slots = useSlots();
    const emits = __emit;
    const i18n = useI18n();
    const { hasSlot } = useHasSlot();
    const model = useModel(__props, "modelValue");
    const isAfterInitial = ref(false);
    const height2 = ref(null);
    const focus2 = ref(props.focused);
    const buttonPressTimer = ref();
    const uniqId = useId();
    const id = props.id || uniqId;
    const textFieldRef = ref(null);
    const inputRef = ref(null);
    const textAreaRef = ref(null);
    const prefixRef = ref(null);
    const suffixRef = ref(null);
    const loadingRef = ref(null);
    const verticalContentRef = ref(null);
    const spinnerRef = ref(null);
    const inputElm = computed(() => {
      return props.multiline ? textAreaRef.value : inputRef.value;
    });
    watch(
      () => [props.focused, props.verticalContent, inputElm.value],
      () => {
        if (!inputElm.value || !props.focused)
          return;
        if (props.focused) {
          inputElm.value.focus();
        } else {
          inputElm.value.blur();
        }
      },
      { immediate: true }
    );
    watch(
      () => [focus2.value, model.value, props.type, props.suggestion],
      () => {
        const isSupportedInputType = props.type === "text" || props.type === "tel" || props.type === "search" || props.type === "url" || props.type === "password";
        if (!inputRef.value || !isSupportedInputType || !props.suggestion || !model.value)
          return;
        inputRef.value.setSelectionRange(model.value.length, props.suggestion.length);
      },
      { flush: "post" }
    );
    onMounted(() => {
      isAfterInitial.value = true;
    });
    const hasLabel = computed(() => hasSlot(slots.label) || props.label);
    const hasHelpText = computed(() => hasSlot(slots.helpText) || props.helpText);
    const hasSuffix = computed(() => hasSlot(slots.suffix) || props.suffix);
    const hasPrefix = computed(() => hasSlot(slots.prefix) || props.prefix);
    const hasVerticalContent = computed(() => hasSlot(slots.verticalContent) || props.verticalContent);
    const normalizedValue = computed(() => props.suggestion ? props.suggestion : model.value);
    const normalizedStep = computed(() => {
      return props.step || 1;
    });
    const normalizedMax = computed(() => {
      return props.max || Infinity;
    });
    const normalizedMin = computed(() => {
      return props.min || -Infinity;
    });
    const className = computed(() => classNames(
      styles$5.TextField,
      Boolean(normalizedValue.value) && styles$5.hasValue,
      props.disabled && styles$5.disabled,
      props.readOnly && styles$5.readOnly,
      props.error && styles$5.error,
      props.tone && styles$5[variationName("tone", props.tone)],
      props.multiline && styles$5.multiline,
      focus2.value && !props.disabled && styles$5.focus,
      props.variant !== "inherit" && styles$5[props.variant],
      props.size === "slim" && styles$5.slim
    ));
    const inputType = computed(() => {
      return props.type === "currency" ? "text" : props.type;
    });
    const isNumericType = computed(() => {
      return props.type === "number" || props.type === "integer";
    });
    const clearButtonVisible = computed(() => normalizedValue.value !== "");
    const style = computed(() => {
      return props.multiline && height2.value ? { height: `${height2.value}px`, maxHeight: `${props.maxHeight}px` } : void 0;
    });
    const describedBy = computed(() => {
      const output = [];
      if (props.error) {
        output.push(`${id}Error`);
      }
      if (hasHelpText.value) {
        output.push(helpTextID(`${id}`));
      }
      if (props.showCharacterCount) {
        output.push(`${id}-CharacterCounter`);
      }
      return output;
    });
    const labelledBy = computed(() => {
      const output = [];
      if (hasPrefix.value) {
        output.push(`${id}-Prefix`);
      }
      if (hasSuffix.value) {
        output.push(`${id}-Suffix`);
      }
      if (hasVerticalContent.value) {
        output.push(`${id}-VerticalContent`);
      }
      output.unshift(labelId(`${id}`));
      return output;
    });
    const inputClassName = computed(() => classNames(
      styles$5.Input,
      props.align && styles$5[variationName("Input-align", props.align)],
      hasSuffix.value && styles$5["Input-suffixed"],
      props.clearButton && styles$5["Input-hasClearButton"],
      props.monospaced && styles$5.monospaced,
      props.suggestion && styles$5.suggestion,
      props.autoSize && styles$5["Input-autoSize"]
    ));
    const autoSizeClassName = computed(() => classNames(
      styles$5.AutoSizeWrapper,
      hasSuffix.value && styles$5.AutoSizeWrapperWithSuffix
    ));
    const characterCount = computed(() => {
      var _a;
      return (_a = normalizedValue.value) == null ? void 0 : _a.length;
    });
    const characterCountLabel = computed(() => {
      return props.maxLength ? i18n.translate("Polaris.TextField.characterCountWithMaxLength", {
        count: characterCount.value || 0,
        limit: props.maxLength
      }) : i18n.translate("Polaris.TextField.characterCount", {
        count: characterCount.value || 0
      });
    });
    const characterCountClassName = computed(() => classNames(
      styles$5.CharacterCount,
      props.multiline && styles$5.AlignFieldBottom
    ));
    const characterCountText = computed(
      () => !props.maxLength ? characterCount.value : `${characterCount.value}/${props.maxLength}`
    );
    const backdropClassName = computed(() => classNames(
      styles$5.Backdrop,
      slots.connectedLeft && styles$5["Backdrop-connectedLeft"],
      slots.connectedRight && styles$5["Backdrop-connectedRight"]
    ));
    const isIconPrefix = computed(() => {
      var _a;
      const prefixElm = slots.prefix && slots.prefix()[0];
      return (_a = prefixElm == null ? void 0 : prefixElm.type) == null ? void 0 : _a.__name;
    });
    const handleNumberChange = (steps, stepAmount = normalizedStep.value) => {
      const dpl = (num) => {
        const dec = String(num).split(".")[1];
        return dec ? dec.length : 0;
      };
      const numericValue = model.value ? parseFloat(model.value) : 0;
      if (isNaN(numericValue)) {
        return;
      }
      const decimalPlaces = props.type === "integer" ? 0 : Math.max(dpl(numericValue), dpl(stepAmount));
      const newValue = Math.min(
        Number(normalizedMax.value),
        Math.max(numericValue + steps * stepAmount, Number(normalizedMin.value))
      );
      model.value = String(newValue.toFixed(decimalPlaces));
      emits("spinner-change", model.value, `${id}`);
      emits("change", model.value, `${id}`);
    };
    const handleSpinnerButtonRelease = () => {
      if (buttonPressTimer.value) {
        clearInterval(buttonPressTimer.value);
      }
    };
    const handleSpinnerButtonPress = (step) => {
      const minInterval = 50;
      const decrementBy = 10;
      let interval = 200;
      const { handleStep } = spinnerRef.value || {};
      const onChangeInterval = () => {
        if (interval > minInterval) {
          interval -= decrementBy;
        }
        handleStep && handleStep(step);
        buttonPressTimer.value = window.setTimeout(onChangeInterval, interval);
      };
      buttonPressTimer.value = window.setTimeout(onChangeInterval, interval);
      document.addEventListener("mouseup", handleSpinnerButtonRelease, { once: true });
    };
    const handleExpandingResize = (heightValue) => {
      height2.value = heightValue;
    };
    const handleOnFocus = (e) => {
      var _a;
      focus2.value = true;
      if (props.selectTextOnFocus && !props.suggestion) {
        (_a = inputElm.value) == null ? void 0 : _a.select();
      }
      emits("focus", e);
    };
    useEventListener("wheel", handleOnWheel, inputRef.value);
    function handleOnWheel(e) {
      if (document.activeElement === e.target && isNumericType.value) {
        e.stopPropagation();
      }
    }
    const input = () => h(props.multiline ? "textarea" : "input", {
      name: props.name,
      id: `${id}`,
      disabled: props.disabled,
      readOnly: props.readOnly,
      role: props.role,
      autoFocus: props.autoFocus,
      value: normalizedValue.value || props.value,
      placeholder: props.placeholder,
      style: style.value,
      autoComplete: props.autoComplete,
      class: inputClassName.value,
      ref: props.multiline ? textAreaRef : inputRef,
      min: props.min,
      max: props.max,
      step: props.step,
      minLength: props.minLength,
      maxLength: props.maxLength,
      spellCheck: props.spellCheck,
      pattern: props.pattern,
      inputMode: props.inputMode,
      type: inputType.value,
      rows: getRows(props.multiline),
      size: props.autoSize ? 1 : void 0,
      "aria-describedby": describedBy.value.join(" "),
      "aria-labelledby": labelledBy.value.join(" "),
      "aria-invalid": Boolean(props.error),
      "aria-owns": props.ariaOwns,
      "aria-activedescendant": props.ariaActiveDescendant,
      "aria-autocomplete": props.ariaAutocomplete,
      "aria-controls": props.ariaControls,
      "aria-expanded": props.ariaExpanded,
      "aria-required": props.requiredIndicator,
      ...normalizeAriaMultiline(props.multiline),
      onFocus: handleOnFocus,
      onBlur: handleOnBlur,
      onClick: handleClickChild,
      onKeyPress: handleKeyPress,
      onKeyDown: handleKeyDown,
      onChange: !props.suggestion ? handleChange : void 0,
      onInput: handleInput,
      "data-1p-ignore": props.autoComplete === "off" || void 0,
      "data-lpignore": props.autoComplete === "off" || void 0,
      "data-form-type": props.autoComplete === "off" ? "other" : void 0
    });
    function handleChange(e) {
      emits("change", e.target.value, `${id}`);
    }
    function handleInput(e) {
      model.value = e.target.value;
      emits("input", e, e.target.value);
      if (props.suggestion) {
        e.target.value = props.suggestion;
        handleChange(e);
      }
    }
    function handleClick(e) {
      var _a, _b, _c;
      const { target } = e;
      if (!target)
        return;
      const inputRefRole = (_a = inputRef.value) == null ? void 0 : _a.getAttribute("role");
      if (target === inputRef.value && inputRefRole === "combobox") {
        (_b = inputRef.value) == null ? void 0 : _b.focus();
        handleOnFocus(e);
        return;
      }
      if (isPrefixOrSuffix(target) || isVerticalContent(target) || isInput(target) || isSpinner(target) || isLoadingSpinner(target) || focus2.value) {
        return;
      }
      (_c = inputElm.value) == null ? void 0 : _c.focus();
    }
    function handleClickChild(event) {
      var _a;
      if (!event.target)
        return;
      if (!isSpinner(event.target) && !isInput(event.target)) {
        event.stopPropagation();
      }
      if (isPrefixOrSuffix(event.target) || isVerticalContent(event.target) || isInput(event.target) || isLoadingSpinner(event.target) || focus2.value) {
        return;
      }
      focus2.value = true;
      (_a = inputElm.value) == null ? void 0 : _a.focus();
    }
    function handleClearButtonPress() {
      emits("clear-button-click", `${id}`);
    }
    function handleKeyPress(event) {
      const { key, which } = event;
      const numbersSpec = /[\d.,eE+-]$/;
      const integerSpec = /[\deE+-]$/;
      if (!isNumericType || which === Key.Enter || props.type === "number" && numbersSpec.test(key) || props.type === "integer" && integerSpec.test(key)) {
        return;
      }
      event.preventDefault();
    }
    function handleKeyDown(event) {
      if (!isNumericType) {
        return;
      }
      const { key, which } = event;
      if (props.type === "integer" && (key === "ArrowUp" || which === Key.UpArrow)) {
        handleNumberChange(1);
        event.preventDefault();
      }
      if (props.type === "integer" && (key === "ArrowDown" || which === Key.DownArrow)) {
        handleNumberChange(-1);
        event.preventDefault();
      }
      if ((which === Key.Home || key === "Home") && props.min) {
        model.value = String(props.min);
        emits("spinner-change", model.value, `${id}`);
        emits("change", model.value, `${id}`);
      }
      if ((which === Key.End || key === "End") && props.max !== void 0) {
        model.value = String(props.max);
        emits("spinner-change", model.value, `${id}`);
        emits("change", model.value, `${id}`);
      }
      if ((which === Key.PageUp || key === "PageUp") && props.largeStep !== void 0) {
        handleNumberChange(1, props.largeStep);
      }
      if ((which === Key.PageDown || key === "PageDown") && props.largeStep !== void 0) {
        handleNumberChange(-1, props.largeStep);
      }
    }
    function handleOnBlur(event) {
      var _a;
      focus2.value = false;
      if ((_a = textFieldRef.value) == null ? void 0 : _a.contains(event.relatedTarget)) {
        return;
      }
      emits("blur", event);
    }
    function isInput(target) {
      const input2 = inputElm.value;
      return target instanceof HTMLElement && input2 && (input2.contains(target) || input2.contains(document.activeElement));
    }
    function isPrefixOrSuffix(target) {
      return target instanceof Element && (prefixRef.value && prefixRef.value.contains(target) || suffixRef.value && suffixRef.value.contains(target));
    }
    function isSpinner(target) {
      const { spinnerWrapperRef } = spinnerRef.value || {};
      return target instanceof Element && spinnerWrapperRef && spinnerWrapperRef.contains(target);
    }
    function isLoadingSpinner(target) {
      return target instanceof Element && loadingRef.value && loadingRef.value.contains(target);
    }
    function isVerticalContent(target) {
      return target instanceof Element && verticalContentRef.value && (verticalContentRef.value.contains(target) || verticalContentRef.value.contains(document.activeElement));
    }
    function getRows(multiline2) {
      if (!multiline2)
        return void 0;
      return typeof multiline2 === "number" ? multiline2 : 1;
    }
    function normalizeAriaMultiline(multiline2) {
      if (!multiline2)
        return void 0;
      return Boolean(multiline2) || typeof multiline2 === "number" && multiline2 > 0 ? { "aria-multiline": true } : void 0;
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1n), {
        id: `${unref(id)}`,
        error: _ctx.error,
        action: _ctx.labelAction,
        "label-hidden": _ctx.labelHidden,
        "required-indicator": _ctx.requiredIndicator,
        disabled: _ctx.disabled,
        "read-only": _ctx.readOnly
      }, createSlots({
        default: withCtx(() => [
          createVNode(unref(_sfc_main$c), null, createSlots({
            default: withCtx(() => [
              createBaseVNode("div", {
                class: normalizeClass(className.value),
                onClick: handleClick,
                ref_key: "textFieldRef",
                ref: textFieldRef
              }, [
                hasPrefix.value ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(unref(classNames)(unref(styles$5).Prefix, isIconPrefix.value && unref(styles$5).PrefixIcon)),
                  id: `${unref(id)}-Prefix`,
                  ref_key: "prefixRef",
                  ref: prefixRef
                }, [
                  unref(hasSlot)(unref(slots).prefix) ? renderSlot(_ctx.$slots, "prefix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(_ctx.prefix), 1)
                  ], 64))
                ], 10, _hoisted_1$6)) : createCommentVNode("", true),
                _ctx.autoSize ? (openBlock(), createElementBlock("div", {
                  key: 1,
                  class: normalizeClass(unref(styles$5).InputAndSuffixWrapper)
                }, [
                  createBaseVNode("div", {
                    class: normalizeClass(autoSizeClassName.value),
                    "data-auto-size-value": model.value || _ctx.placeholder
                  }, [
                    hasVerticalContent.value ? (openBlock(), createElementBlock("div", {
                      key: 0,
                      class: normalizeClass(unref(styles$5).VerticalContent),
                      id: `${unref(id)}-VerticalContent`,
                      ref_key: "verticalContentRef",
                      ref: verticalContentRef,
                      onClick: handleClickChild
                    }, [
                      unref(hasSlot)(unref(slots).verticalContent) ? renderSlot(_ctx.$slots, "verticalContent", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                        createTextVNode(toDisplayString(_ctx.verticalContent), 1)
                      ], 64)),
                      (openBlock(), createBlock(resolveDynamicComponent(input)))
                    ], 10, _hoisted_3$2)) : (openBlock(), createBlock(resolveDynamicComponent(input), { key: 1 }))
                  ], 10, _hoisted_2$4),
                  hasSuffix.value ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(unref(styles$5).Suffix),
                    id: `${unref(id)}-Suffix`,
                    ref_key: "suffixRef",
                    ref: suffixRef
                  }, [
                    unref(hasSlot)(unref(slots).suffix) ? renderSlot(_ctx.$slots, "suffix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(_ctx.suffix), 1)
                    ], 64))
                  ], 10, _hoisted_4)) : createCommentVNode("", true)
                ], 2)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                  hasVerticalContent.value ? (openBlock(), createElementBlock("div", {
                    key: 0,
                    class: normalizeClass(unref(styles$5).VerticalContent),
                    id: `${unref(id)}-VerticalContent`,
                    ref_key: "verticalContentRef",
                    ref: verticalContentRef,
                    onClick: handleClickChild
                  }, [
                    unref(hasSlot)(unref(slots).verticalContent) ? renderSlot(_ctx.$slots, "verticalContent", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(_ctx.verticalContent), 1)
                    ], 64)),
                    (openBlock(), createBlock(resolveDynamicComponent(input)))
                  ], 10, _hoisted_5)) : (openBlock(), createBlock(resolveDynamicComponent(input), { key: 1 })),
                  hasSuffix.value ? (openBlock(), createElementBlock("div", {
                    key: 2,
                    class: normalizeClass(unref(styles$5).Suffix),
                    id: `${unref(id)}-Suffix`,
                    ref_key: "suffixRef",
                    ref: suffixRef
                  }, [
                    unref(hasSlot)(unref(slots).suffix) ? renderSlot(_ctx.$slots, "suffix", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(_ctx.suffix), 1)
                    ], 64))
                  ], 10, _hoisted_6)) : createCommentVNode("", true)
                ], 64)),
                props.showCharacterCount ? (openBlock(), createElementBlock("div", {
                  key: 3,
                  class: normalizeClass(characterCountClassName.value),
                  "aria-label": characterCountLabel.value,
                  "aria-live": focus2.value ? "polite" : "off",
                  "aria-atomic": "true",
                  onClick: handleClickChild
                }, toDisplayString(characterCountText.value), 11, _hoisted_7)) : createCommentVNode("", true),
                _ctx.loading ? (openBlock(), createElementBlock("div", {
                  key: 4,
                  class: normalizeClass(unref(styles$5).Loading),
                  id: `${unref(id)}-Loading`,
                  ref_key: "loadingRef",
                  ref: loadingRef
                }, [
                  createVNode(unref(_sfc_main$r), { size: "small" })
                ], 10, _hoisted_8)) : createCommentVNode("", true),
                _ctx.clearButton && clearButtonVisible.value ? (openBlock(), createElementBlock("button", {
                  key: 5,
                  type: "button",
                  class: normalizeClass(unref(styles$5).ClearButton),
                  disabled: _ctx.disabled,
                  onClick: handleClearButtonPress
                }, [
                  createVNode(unref(_sfc_main$f), {
                    as: "span",
                    "visually-hidden": ""
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(unref(i18n).translate("Polaris.Common.clear")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(unref(_sfc_main$1K), {
                    source: unref(XCircleIcon),
                    tone: "base"
                  }, null, 8, ["source"])
                ], 10, _hoisted_9)) : createCommentVNode("", true),
                isNumericType.value && _ctx.step !== 0 && !_ctx.disabled && !_ctx.readOnly ? (openBlock(), createBlock(unref(_sfc_main$a), {
                  key: 6,
                  ref_key: "spinnerRef",
                  ref: spinnerRef,
                  onClick: handleClickChild,
                  onChange: handleNumberChange,
                  onMousedown: handleSpinnerButtonPress,
                  onMouseup: handleSpinnerButtonRelease,
                  onBlur: handleOnBlur
                }, null, 512)) : createCommentVNode("", true),
                createBaseVNode("div", {
                  class: normalizeClass(backdropClassName.value)
                }, null, 2),
                _ctx.multiline && isAfterInitial.value ? (openBlock(), createBlock(unref(_sfc_main$b), {
                  key: 7,
                  contents: normalizedValue.value || _ctx.placeholder,
                  "current-height": height2.value,
                  "minimum-lines": typeof _ctx.multiline === "number" ? _ctx.multiline : 1,
                  onHeightChange: handleExpandingResize
                }, null, 8, ["contents", "current-height", "minimum-lines"])) : createCommentVNode("", true)
              ], 2)
            ]),
            _: 2
          }, [
            Boolean(unref(slots).connectedLeft) ? {
              name: "left",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "connectedLeft")
              ]),
              key: "0"
            } : void 0,
            Boolean(unref(slots).connectedRight) ? {
              name: "right",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "connectedRight")
              ]),
              key: "1"
            } : void 0
          ]), 1024)
        ]),
        _: 2
      }, [
        hasLabel.value ? {
          name: "label",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).label) ? renderSlot(_ctx.$slots, "label", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ], 64))
          ]),
          key: "0"
        } : void 0,
        hasHelpText.value ? {
          name: "helpText",
          fn: withCtx(() => [
            unref(hasSlot)(unref(slots).helpText) ? renderSlot(_ctx.$slots, "helpText", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createTextVNode(toDisplayString(_ctx.helpText), 1)
            ], 64))
          ]),
          key: "1"
        } : void 0
      ]), 1032, ["id", "error", "action", "label-hidden", "required-indicator", "disabled", "read-only"]);
    };
  }
});
const Thumbnail$1 = "Polaris-Thumbnail";
const sizeExtraSmall = "Polaris-Thumbnail--sizeExtraSmall";
const sizeSmall = "Polaris-Thumbnail--sizeSmall";
const sizeMedium = "Polaris-Thumbnail--sizeMedium";
const sizeLarge = "Polaris-Thumbnail--sizeLarge";
const transparent = "Polaris-Thumbnail--transparent";
const styles$4 = {
  Thumbnail: Thumbnail$1,
  sizeExtraSmall,
  sizeSmall,
  sizeMedium,
  sizeLarge,
  transparent
};
const _sfc_main$8 = /* @__PURE__ */ defineComponent({
  __name: "Thumbnail",
  props: {
    size: { default: "medium" },
    source: {},
    alt: {},
    transparent: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const className = computed(
      () => classNames(
        styles$4.Thumbnail,
        props.size && styles$4[variationName("size", props.size)],
        props.transparent && styles$4.transparent
      )
    );
    return (_ctx, _cache) => {
      const _component_Image = resolveComponent("Image");
      const _component_Icon = resolveComponent("Icon");
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(className.value)
      }, [
        typeof _ctx.source === "string" ? (openBlock(), createBlock(_component_Image, {
          key: 0,
          alt: _ctx.alt,
          source: _ctx.source
        }, null, 8, ["alt", "source"])) : (openBlock(), createBlock(_component_Icon, {
          key: 1,
          accessibilityLabel: _ctx.alt,
          source: _ctx.source
        }, null, 8, ["accessibilityLabel", "source"]))
      ], 2);
    };
  }
});
const _sfc_main$7 = {};
const _hoisted_1$5 = /* @__PURE__ */ createBaseVNode("path", {
  d: "m0 2 6.967 7.25a3 3 0 0 0 4.243.083L18.829 2h-1.442l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2H0Z",
  fill: "#D4D4D4"
}, null, -1);
const _hoisted_2$3 = /* @__PURE__ */ createBaseVNode("path", {
  d: "M1.387 0h16v2l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2V0Z",
  fill: "var(--p-color-bg-surface)"
}, null, -1);
function _sfc_render$1(_ctx, _cache) {
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1$5,
    _hoisted_2$3
  ], 64);
}
const TailDownPathsVue = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$1]]);
const _sfc_main$6 = {};
const _hoisted_1$4 = /* @__PURE__ */ createBaseVNode("path", {
  d: "M18.829 8.171 11.862.921A3 3 0 0 0 7.619.838L0 8.171h1.442l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557h1.387Z",
  fill: "#E3E3E3"
}, null, -1);
const _hoisted_2$2 = /* @__PURE__ */ createBaseVNode("path", {
  d: "M17.442 10.171h-16v-2l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557v2Z",
  fill: "var(--p-color-bg-surface)"
}, null, -1);
function _sfc_render(_ctx, _cache) {
  return openBlock(), createElementBlock(Fragment, null, [
    _hoisted_1$4,
    _hoisted_2$2
  ], 64);
}
const TailUpPaths = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render]]);
const TooltipOverlay = "Polaris-Tooltip-TooltipOverlay";
const Tail = "Polaris-Tooltip-TooltipOverlay__Tail";
const positionedAbove = "Polaris-Tooltip-TooltipOverlay--positionedAbove";
const measuring = "Polaris-Tooltip-TooltipOverlay--measuring";
const measured = "Polaris-Tooltip-TooltipOverlay--measured";
const instant = "Polaris-Tooltip-TooltipOverlay--instant";
const Content = "Polaris-Tooltip-TooltipOverlay__Content";
const wide = "Polaris-Tooltip-TooltipOverlay--wide";
const styles$3 = {
  TooltipOverlay,
  Tail,
  positionedAbove,
  measuring,
  measured,
  instant,
  Content,
  "default": "Polaris-Tooltip-TooltipOverlay--default",
  wide
};
const _hoisted_1$3 = ["id", "aria-label"];
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  __name: "TooltipOverlay",
  props: {
    id: {},
    active: { type: Boolean },
    activator: {},
    accessibilityLabel: {},
    width: {},
    padding: {},
    borderRadius: {},
    zIndexOverride: {},
    onClose: {},
    instant: { type: Boolean },
    preventInteraction: { type: Boolean },
    preferredPosition: { default: "above" }
  },
  setup(__props) {
    const i18n = useI18n();
    const props = __props;
    const overlayRef = ref(null);
    const overlayDetails = computed(() => {
      var _a;
      return (_a = overlayRef.value) == null ? void 0 : _a.overlayDetails;
    });
    const containerClassName = computed(() => {
      var _a, _b, _c;
      return classNames(
        styles$3.TooltipOverlay,
        ((_a = overlayDetails.value) == null ? void 0 : _a.measuring) && styles$3.measuring,
        !((_b = overlayDetails.value) == null ? void 0 : _b.measuring) && styles$3.measured,
        props.instant && styles$3.instant,
        ((_c = overlayDetails.value) == null ? void 0 : _c.positioning) === "above" && styles$3.positionedAbove
      );
    });
    const contentClassName = computed(() => classNames(
      styles$3.Content,
      props.width && styles$3[props.width]
    ));
    const contentStyles = computed(() => {
      var _a, _b;
      return ((_a = overlayDetails.value) == null ? void 0 : _a.measuring) ? void 0 : { minHeight: (_b = overlayDetails.value) == null ? void 0 : _b.desiredHeight };
    });
    const style = computed(() => {
      var _a;
      return {
        "--pc-tooltip-chevron-x-pos": `${(_a = overlayDetails.value) == null ? void 0 : _a.chevronOffset}px`,
        "--pc-tooltip-border-radius": props.borderRadius ? `var(--p-border-radius-${props.borderRadius})` : void 0,
        "--pc-tooltip-padding": props.padding && props.padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${props.padding})`
      };
    });
    return (_ctx, _cache) => {
      return _ctx.active ? (openBlock(), createBlock(unref(_sfc_main$K), {
        key: 0,
        ref_key: "overlayRef",
        ref: overlayRef,
        active: _ctx.active,
        activator: _ctx.activator,
        "preferred-position": _ctx.preferredPosition,
        "prevent-interaction": _ctx.preventInteraction,
        "z-index-override": _ctx.zIndexOverride
      }, {
        default: withCtx(() => {
          var _a;
          return [
            createBaseVNode("div", mergeProps({
              style: style.value,
              class: containerClassName.value
            }, unref(layer).props), [
              (openBlock(), createElementBlock("svg", {
                class: normalizeClass(unref(styles$3).Tail),
                width: "19",
                height: "11",
                fill: "none"
              }, [
                ((_a = overlayDetails.value) == null ? void 0 : _a.positioning) === "above" ? (openBlock(), createBlock(TailDownPathsVue, { key: 0 })) : (openBlock(), createBlock(TailUpPaths, { key: 1 }))
              ], 2)),
              createBaseVNode("div", {
                id: _ctx.id,
                role: "tooltip",
                class: normalizeClass(contentClassName.value),
                style: normalizeStyle({ ...contentStyles.value, ...style.value }),
                "aria-label": _ctx.accessibilityLabel && unref(i18n).translate("Polaris.Tooltip.overlayLabel", { label: _ctx.accessibilityLabel })
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 14, _hoisted_1$3)
            ], 16)
          ];
        }),
        _: 3
      }, 8, ["active", "activator", "preferred-position", "prevent-interaction", "z-index-override"])) : createCommentVNode("", true);
    };
  }
});
const TooltipContainer = "Polaris-Tooltip__TooltipContainer";
const HasUnderline = "Polaris-Tooltip__HasUnderline";
const styles$2 = {
  TooltipContainer,
  HasUnderline
};
const HOVER_OUT_TIMEOUT = 150;
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "Tooltip",
  props: {
    content: {},
    active: { type: Boolean, default: void 0 },
    hoverDelay: {},
    dismissOnMouseOut: {},
    preferredPosition: { default: "above" },
    activatorWrapper: { default: "span" },
    accessibilityLabel: {},
    width: { default: "default" },
    padding: { default: "default" },
    borderRadius: {},
    zIndexOverride: {},
    hasUnderline: { type: Boolean },
    persistOnClick: { type: Boolean }
  },
  emits: ["open", "close"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const { presenceList, addPresence, removePresence } = useEphemeralPresenceManagerContext();
    const id = useId();
    const {
      value: active2,
      setTrue: setActiveTrue,
      setFalse: handleBlur
    } = useToggle(Boolean(props.active));
    const {
      value: persist,
      toggle: togglePersisting
    } = useToggle(Boolean(props.active) && Boolean(props.persistOnClick));
    const activatorNode = ref(null);
    const activatorContainer = ref(null);
    const mouseEntered = ref(false);
    const shouldAnimate = ref(!props.active);
    const hoverDelayTimeout = ref(void 0);
    const hoverOutTimeout = ref(void 0);
    const wrapperClassName = computed(
      () => classNames(
        props.activatorWrapper === "div" && styles$2.TooltipContainer,
        props.hasUnderline && styles$2.hasUnderline
      )
    );
    const handleFocus = () => {
      if (props.active !== false) {
        setActiveTrue();
      }
    };
    const handleOpen = () => {
      shouldAnimate.value = !presenceList.value.tooltip && active2.value;
      emits("open");
      addPresence("tooltip");
    };
    const handleClose = () => {
      emits("close");
      shouldAnimate.value = false;
      hoverOutTimeout.value = setTimeout(() => {
        removePresence("tooltip");
      }, HOVER_OUT_TIMEOUT);
    };
    const handleKeyUp = (event) => {
      if (event.key !== "Escape")
        return;
      emits("close");
      handleBlur();
      props.persistOnClick && togglePersisting();
    };
    function setActivator(node) {
      const activatorContainerRef = activatorContainer;
      if (node == null) {
        activatorContainerRef.current = null;
        activatorNode.value = null;
        return;
      }
      node.firstElementChild instanceof HTMLElement && (activatorNode.value = node.firstElementChild);
      activatorContainerRef.current = node;
    }
    function handleMouseEnter() {
      mouseEntered.value = true;
      if (props.hoverDelay && !presenceList.value.tooltip) {
        hoverDelayTimeout.value = setTimeout(() => {
          handleOpen();
          handleFocus();
        }, props.hoverDelay);
      } else {
        handleOpen();
        handleFocus();
      }
    }
    function handleMouseLeave() {
      if (hoverDelayTimeout.value) {
        clearTimeout(hoverDelayTimeout.value);
        hoverDelayTimeout.value = void 0;
      }
      mouseEntered.value = false;
      handleClose();
      if (!persist.value) {
        handleBlur();
      }
    }
    function handleMouseEnterFix() {
      !mouseEntered.value && handleMouseEnter();
    }
    onMounted(
      () => {
        setActivator(activatorContainer.value);
        const firstFocusable = activatorContainer.value ? findFirstFocusableNode(activatorContainer.value) : null;
        const accessibilityNode = firstFocusable || activatorContainer.value;
        if (!accessibilityNode)
          return;
        accessibilityNode.tabIndex = 0;
        accessibilityNode.setAttribute("aria-describedby", String(id));
        accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true");
        if (hoverDelayTimeout.value) {
          clearTimeout(hoverDelayTimeout.value);
          hoverDelayTimeout.value = void 0;
        }
        if (hoverOutTimeout.value) {
          clearTimeout(hoverOutTimeout.value);
          hoverOutTimeout.value = void 0;
        }
      }
    );
    watch(
      () => [props.active, active2.value],
      () => {
        if (props.active === false && active2.value) {
          handleClose();
          handleBlur();
        }
      }
    );
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.activatorWrapper), {
        ref_key: "activatorContainer",
        ref: activatorContainer,
        class: normalizeClass(wrapperClassName.value),
        onFocus: _cache[0] || (_cache[0] = () => {
          handleOpen();
          handleFocus();
        }),
        onBlur: _cache[1] || (_cache[1] = () => {
          unref(handleBlur)();
          handleClose();
        }),
        onMouseleave: handleMouseLeave,
        onMouseenter: handleMouseEnterFix,
        onMousedown: _cache[2] || (_cache[2] = ($event) => _ctx.persistOnClick ? unref(togglePersisting)() : void 0),
        onKeyup: handleKeyUp
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default"),
          activatorNode.value ? (openBlock(), createBlock(unref(_sfc_main$L), {
            key: 0,
            "id-prefix": "tooltip"
          }, {
            default: withCtx(() => [
              createVNode(unref(_sfc_main$5), {
                id: String(unref(id)),
                topBarOffset: "",
                preferredPosition: _ctx.preferredPosition,
                activator: activatorNode.value,
                active: unref(active2),
                accessibilityLabel: _ctx.accessibilityLabel,
                preventInteraction: _ctx.dismissOnMouseOut,
                width: _ctx.width,
                padding: _ctx.padding,
                borderRadius: _ctx.borderRadius,
                zIndexOverride: _ctx.zIndexOverride,
                instant: !shouldAnimate.value
              }, {
                default: withCtx(() => [
                  unref(slots).content ? renderSlot(_ctx.$slots, "content", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(_ctx.content), 1)
                  ], 64))
                ]),
                _: 3
              }, 8, ["id", "preferredPosition", "activator", "active", "accessibilityLabel", "preventInteraction", "width", "padding", "borderRadius", "zIndexOverride", "instant"])
            ]),
            _: 3
          })) : createCommentVNode("", true)
        ]),
        _: 3
      }, 40, ["class"]);
    };
  }
});
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "TrapFocus",
  props: {
    trapping: { type: Boolean, default: true }
  },
  setup(__props) {
    const props = __props;
    const { canSafelyFocus } = useFocusManager({ trapping: props.trapping });
    const wrapperNode = ref(null);
    const disableFocus = ref(true);
    watch([() => props.trapping], () => {
      disableFocus.value = canSafelyFocus.value && !(wrapperNode.value && wrapperNode.value.contains(document.activeElement)) ? !props.trapping : true;
    });
    const handleFocusIn = (event) => {
      if (!props.trapping || !wrapperNode.value || wrapperNode.value.contains(document.activeElement) || event.target instanceof Element && event.target.matches(`${portal.selector} *`)) {
        return;
      }
      if (canSafelyFocus.value && event.target instanceof HTMLElement && wrapperNode.value !== event.target && wrapperNode.value.contains(event.target)) {
        focusFirstFocusableNode(wrapperNode.value);
      }
    };
    const handleTab = (event) => {
      if (!props.trapping || !wrapperNode.value) {
        return;
      }
      const firstFocusableNode = findFirstKeyboardFocusableNode(wrapperNode.value);
      const lastFocusableNode = findLastKeyboardFocusableNode(wrapperNode.value);
      if (event.target === lastFocusableNode && !event.shiftKey) {
        event.preventDefault();
        focusFirstKeyboardFocusableNode(wrapperNode.value);
      }
      if (event.target === firstFocusableNode && event.shiftKey) {
        event.preventDefault();
        focusLastKeyboardFocusableNode(wrapperNode.value);
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(_sfc_main$1T), {
        disabled: disableFocus.value,
        root: wrapperNode.value
      }, {
        default: withCtx(() => [
          createBaseVNode("div", {
            ref_key: "wrapperNode",
            ref: wrapperNode
          }, [
            createVNode(unref(_sfc_main$1Z), {
              event: "focusin",
              handler: handleFocusIn
            }),
            createVNode(unref(_sfc_main$1p), {
              "key-code": unref(Key).Tab,
              handler: handleTab,
              "key-event": "keydown"
            }, null, 8, ["key-code"]),
            renderSlot(_ctx.$slots, "default")
          ], 512)
        ]),
        _: 3
      }, 8, ["disabled", "root"]);
    };
  }
});
const Truncate = "Polaris-Truncate";
const styles$1 = {
  Truncate
};
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "Truncate",
  setup(__props) {
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(unref(styles$1).Truncate)
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
const MINUTE = 60;
const HOUR = MINUTE * 60;
function ensureTwoDigits(num) {
  return num > 9 ? String(num) : `0${num}`;
}
function secondsToTimeComponents(seconds) {
  return {
    hours: Math.floor(seconds / HOUR),
    minutes: Math.floor(seconds % HOUR / MINUTE),
    seconds: seconds % MINUTE
  };
}
function secondsToTimestamp(numSeconds) {
  const { hours, minutes, seconds } = secondsToTimeComponents(numSeconds);
  const hasHours = numSeconds > HOUR;
  const hoursText = hasHours ? `${hours}:` : "";
  const minutesText = `${hasHours ? ensureTwoDigits(minutes) : minutes}:`;
  const secondsText = `${ensureTwoDigits(seconds)}`;
  return `${hoursText}${minutesText}${secondsText}`;
}
function secondsToDurationTranslationKey(numSeconds) {
  const { hours, minutes, seconds } = secondsToTimeComponents(numSeconds);
  let durationKey = "Polaris.VideoThumbnail.playButtonA11yLabel.duration";
  if (hours) {
    durationKey += `.hours.${hours > 1 ? "other" : "one"}`;
    if (seconds) {
      if (minutes > 1) {
        durationKey += `${seconds > 1 ? ".minutesAndSeconds" : ".minutesAndSecond"}`;
      } else if (minutes === 1) {
        durationKey += `${seconds > 1 ? ".minuteAndSeconds" : ".minuteAndSecond"}`;
      } else {
        durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}`;
      }
    } else if (minutes) {
      durationKey += `${minutes > 1 ? ".andMinutes" : ".andMinute"}`;
    } else {
      durationKey += ".only";
    }
  } else if (minutes) {
    durationKey += `.minutes.${minutes > 1 ? "other" : "one"}`;
    if (seconds) {
      durationKey += `${seconds > 1 ? ".andSeconds" : ".andSecond"}`;
    } else {
      durationKey += ".only";
    }
  } else if (seconds) {
    durationKey += seconds > 1 ? ".seconds.other" : ".seconds.one";
  }
  return durationKey;
}
const _hoisted_1$2 = {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 20 20"
};
const _hoisted_2$1 = /* @__PURE__ */ createBaseVNode("path", {
  "fill-rule": "evenodd",
  d: "M15.375 8.485c1.167.674 1.167 2.358 0 3.031l-7.5 4.33c-1.167.674-2.625-.168-2.625-1.515v-8.66c0-1.348 1.458-2.19 2.625-1.516zm-.75 1.732a.25.25 0 0 0 0-.433l-7.5-4.33a.25.25 0 0 0-.375.217v8.66a.25.25 0 0 0 .375.216z"
}, null, -1);
const _hoisted_3$1 = [
  _hoisted_2$1
];
function render(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$2, [..._hoisted_3$1]);
}
const PlayIcon$1 = { render };
const Thumbnail = "Polaris-VideoThumbnail__Thumbnail";
const ThumbnailContainer = "Polaris-VideoThumbnail__ThumbnailContainer";
const PlayButton = "Polaris-VideoThumbnail__PlayButton";
const Timestamp = "Polaris-VideoThumbnail__Timestamp";
const PlayIcon = "Polaris-VideoThumbnail__PlayIcon";
const Progress = "Polaris-VideoThumbnail__Progress";
const Indicator = "Polaris-VideoThumbnail__Indicator";
const ProgressBar = "Polaris-VideoThumbnail__ProgressBar";
const Label = "Polaris-VideoThumbnail__Label";
const styles = {
  Thumbnail,
  ThumbnailContainer,
  PlayButton,
  Timestamp,
  PlayIcon,
  Progress,
  Indicator,
  ProgressBar,
  Label
};
const _hoisted_1$1 = ["value"];
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "VideoThumbnail",
  props: {
    thumbnailUrl: {},
    videoLength: { default: 0 },
    videoProgress: { default: 0 },
    showVideoProgress: { type: Boolean, default: false },
    accessibilityLabel: {}
  },
  emits: ["click", "before-start-playing"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const i18n = useI18n();
    const mediaQuery = inject("media-query", void 0);
    const isNavigationCollapsed = computed(() => (mediaQuery == null ? void 0 : mediaQuery.isNavigationCollapsed) || false);
    const buttonLabel = computed(() => {
      if (props.accessibilityLabel) {
        return props.accessibilityLabel;
      } else if (props.videoLength) {
        const { hours, minutes, seconds } = secondsToTimeComponents(props.videoLength);
        return i18n.translate(
          "Polaris.VideoThumbnail.playButtonA11yLabel.defaultWithDuration",
          {
            duration: i18n.translate(secondsToDurationTranslationKey(props.videoLength), {
              hourCount: hours,
              minuteCount: minutes,
              secondCount: seconds
            })
          }
        );
      }
      return i18n.translate(
        "Polaris.VideoThumbnail.playButtonA11yLabel.default"
      );
    });
    const progressValue = computed(() => {
      if (props.videoProgress > 0 && props.videoLength > 0) {
        const progress = parseFloat((props.videoProgress / props.videoLength).toFixed(2));
        return progress > 1 ? 1 : progress;
      }
      return 0;
    });
    const progressValuePercents = computed(() => Math.round(progressValue.value * 100));
    return (_ctx, _cache) => {
      const _component_Icon = resolveComponent("Icon");
      const _component_Text = resolveComponent("Text");
      const _component_LegacyStack = resolveComponent("LegacyStack");
      const _component_Button = resolveComponent("Button");
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(styles).ThumbnailContainer)
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(styles).Thumbnail),
          style: normalizeStyle({ backgroundImage: `url(${_ctx.thumbnailUrl})` })
        }, null, 6),
        createVNode(_component_Button, {
          type: "button",
          class: normalizeClass(unref(styles).PlayButton),
          "aria-label": buttonLabel.value,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("click")),
          onMouseenter: _cache[1] || (_cache[1] = ($event) => emits("before-start-playing")),
          onFocus: _cache[2] || (_cache[2] = ($event) => emits("before-start-playing")),
          onTouchstart: _cache[3] || (_cache[3] = ($event) => emits("before-start-playing"))
        }, {
          default: withCtx(() => [
            _ctx.videoLength ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(unref(styles).Timestamp)
            }, [
              createVNode(_component_LegacyStack, {
                alignment: "center",
                spacing: "extraTight"
              }, {
                default: withCtx(() => [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(styles).PlayIcon)
                  }, [
                    createVNode(_component_Icon, { source: unref(PlayIcon$1) }, null, 8, ["source"])
                  ], 2),
                  createVNode(_component_Text, {
                    as: "p",
                    fontWeight: "semibold",
                    variant: isNavigationCollapsed.value ? "bodyLg" : "bodyMd"
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(unref(secondsToTimestamp)(_ctx.videoLength)), 1)
                    ]),
                    _: 1
                  }, 8, ["variant"])
                ]),
                _: 1
              })
            ], 2)) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["class", "aria-label"]),
        _ctx.showVideoProgress ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(styles).Progress)
        }, [
          createBaseVNode("progress", {
            max: "100",
            class: normalizeClass(unref(styles).ProgressBar),
            value: progressValuePercents.value
          }, null, 10, _hoisted_1$1),
          createBaseVNode("div", {
            class: normalizeClass(unref(styles).Indicator),
            style: normalizeStyle({ transform: `scaleX(${progressValue.value})` })
          }, [
            createBaseVNode("span", {
              class: normalizeClass(unref(styles).Label)
            }, toDisplayString(progressValuePercents.value + "%"), 3)
          ], 6)
        ], 2)) : createCommentVNode("", true)
      ], 2);
    };
  }
});
const components = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AccountConnection: _sfc_main$32,
  ActionList: _sfc_main$2Z,
  ActionListSection: _sfc_main$2_,
  AppProvider: _sfc_main$2Y,
  Autocomplete: _sfc_main$2O,
  AutocompleteTextField: _sfc_main$2M,
  Avatar: _sfc_main$2L,
  Backdrop: _sfc_main$2K,
  Badge: _sfc_main$2J,
  Banner: _sfc_main$2I,
  BannerLayout: _sfc_main$2H,
  Bleed: _sfc_main$2D,
  BlockStack: _sfc_main$2C,
  Box: _sfc_main$2B,
  Breadcrumbs: _sfc_main$2A,
  BulkActions: _sfc_main$2w,
  Button: _sfc_main$2t,
  ButtonFrom: _sfc_main$2s,
  ButtonGroup: _sfc_main$2q,
  ButtonGroupItem: _sfc_main$2r,
  CalloutCard: _sfc_main$2p,
  Card: _sfc_main$2n,
  CheckableButton: _sfc_main$2m,
  Checkbox: _sfc_main$2l,
  Choice: _sfc_main$2k,
  ChoiceList: _sfc_main$2j,
  Collapsible: _sfc_main$2i,
  ColorPicker: _sfc_main$2e,
  Combobox: _sfc_main$2N,
  ComboboxTextField: _sfc_main$2M,
  DataTable: _sfc_main$2a,
  DatePicker: _sfc_main$26,
  Dd: _sfc_main$23,
  DefaultBanner: _sfc_main$2G,
  DescriptionList: _sfc_main$25,
  Divider: _sfc_main$22,
  DropZone: _sfc_main$21,
  DropZoneFileUpload: _sfc_main$20,
  Dt: _sfc_main$24,
  EmptySearchResult: _sfc_main$1$,
  EmptyState: _sfc_main$1_,
  EventListener: _sfc_main$1Z,
  ExceptionList: _sfc_main$1Y,
  FilterPill: _sfc_main$1X,
  Filters: _sfc_main$1U,
  FiltersBar: _sfc_main$1V,
  Focus: _sfc_main$1T,
  FooterHelp: _sfc_main$1S,
  Form: _sfc_main$1R,
  FormLayout: _sfc_main$1O,
  FormLayoutGroup: _sfc_main$1P,
  FormLayoutItem: _sfc_main$1Q,
  FullscreenBar: _sfc_main$1N,
  Grid: _sfc_main$1M,
  GridCell: _sfc_main$1L,
  Icon: _sfc_main$1K,
  Image: _sfc_main$1J,
  IndexFilters: _sfc_main$1C,
  IndexFiltersMode,
  IndexProvider: _sfc_main$1B,
  IndexTable: _sfc_main$1v,
  IndexTableCell: _sfc_main$1A,
  IndexTableRow: _sfc_main$1y,
  Indicator: _sfc_main$1u,
  InlineError: _sfc_main$1t,
  InlineGrid: _sfc_main$1s,
  InlineIconBanner: _sfc_main$2F,
  InlineStack: _sfc_main$1r,
  Item: _sfc_main$30,
  KeyboardKey: _sfc_main$1q,
  KeypressListener: _sfc_main$1p,
  Label: _sfc_main$1o,
  Labelled: _sfc_main$1n,
  Layout: _sfc_main$1l,
  LayoutAnnotatedSection: _sfc_main$1k,
  LayoutSection: _sfc_main$1m,
  LegacyCard: _sfc_main$1g,
  LegacyCardHeader: _sfc_main$1j,
  LegacyCardSection: _sfc_main$1i,
  LegacyCardSubsection: _sfc_main$1h,
  LegacyStack: _sfc_main$1e,
  LegacyStackItem: _sfc_main$1f,
  Link: _sfc_main$1d,
  List: _sfc_main$1c,
  ListItem: _sfc_main$1b,
  Listbox: _sfc_main$2V,
  ListboxAction: _sfc_main$2S,
  ListboxHeader: _sfc_main$2R,
  ListboxLoading: _sfc_main$2Q,
  ListboxOption: _sfc_main$2T,
  ListboxSection: _sfc_main$2P,
  ListboxTextOption: _sfc_main$2U,
  MediaCard: _sfc_main$1a,
  Modal: _sfc_main$14,
  ModalSection: _sfc_main$15,
  OptionList: _sfc_main$12,
  Page: _sfc_main$S,
  PageActions: _sfc_main$R,
  Pagination: _sfc_main$Q,
  Pane: _sfc_main$N,
  Popover: _sfc_main$P,
  PopoverOverlay: _sfc_main$M,
  PopoverSection: _sfc_main$O,
  Portal: _sfc_main$L,
  PositionedOverlay: _sfc_main$K,
  ProgressBar: _sfc_main$J,
  RadioButton: _sfc_main$I,
  RangeSlider: _sfc_main$F,
  ResourceItem: _sfc_main$E,
  ResourceList: _sfc_main$D,
  ScrollLock: _sfc_main$A,
  ScrollTo: _sfc_main$C,
  Scrollable: _sfc_main$B,
  SearchField: _sfc_main$1W,
  Select: _sfc_main$z,
  SelectAllActions: _sfc_main$y,
  SettingAction: _sfc_main$x,
  ShadowBevel: _sfc_main$2o,
  SkeletonBodyText: _sfc_main$w,
  SkeletonDisplayText: _sfc_main$v,
  SkeletonPage: _sfc_main$u,
  SkeletonTabs: _sfc_main$t,
  SkeletonThumbnail: _sfc_main$s,
  Spinner: _sfc_main$r,
  Sticky: _sfc_main$q,
  Tabs: _sfc_main$h,
  Tag: _sfc_main$g,
  Text: _sfc_main$f,
  TextContainer: _sfc_main$e,
  TextField: _sfc_main$9,
  Thumbnail: _sfc_main$8,
  Tooltip: _sfc_main$4,
  TooltipOverlay: _sfc_main$5,
  TrapFocus: _sfc_main$3,
  Truncate: _sfc_main$2,
  TruncateText: _sfc_main$31,
  UnstyledButton: _sfc_main$2u,
  UnstyledLink: _sfc_main$2v,
  VideoThumbnail: _sfc_main$1,
  WithinContentContainerBanner: _sfc_main$2E
}, Symbol.toStringTag, { value: "Module" }));
const PolarisVue = {
  install(Vue) {
    Object.entries(components).forEach(([name, component]) => {
      Vue.component(name, component);
    });
  }
};
const Polaris = {
  ActionMenu: {
    Actions: {
      moreActions: "More actions"
    },
    RollupActions: {
      rollupButton: "View actions"
    }
  },
  ActionList: {
    SearchField: {
      clearButtonLabel: "Clear",
      search: "Search",
      placeholder: "Search actions"
    }
  },
  Avatar: {
    label: "Avatar",
    labelWithInitials: "Avatar with initials {initials}"
  },
  Autocomplete: {
    spinnerAccessibilityLabel: "Loading",
    ellipsis: "{content}…"
  },
  Badge: {
    PROGRESS_LABELS: {
      incomplete: "Incomplete",
      partiallyComplete: "Partially complete",
      complete: "Complete"
    },
    TONE_LABELS: {
      info: "Info",
      success: "Success",
      warning: "Warning",
      critical: "Critical",
      attention: "Attention",
      "new": "New",
      readOnly: "Read-only",
      enabled: "Enabled"
    },
    progressAndTone: "{toneLabel} {progressLabel}"
  },
  Banner: {
    dismissButton: "Dismiss notification"
  },
  Button: {
    spinnerAccessibilityLabel: "Loading"
  },
  Common: {
    checkbox: "checkbox",
    undo: "Undo",
    cancel: "Cancel",
    clear: "Clear",
    close: "Close",
    submit: "Submit",
    more: "More"
  },
  ContextualSaveBar: {
    save: "Save",
    discard: "Discard"
  },
  DataTable: {
    sortAccessibilityLabel: "sort {direction} by",
    navAccessibilityLabel: "Scroll table {direction} one column",
    totalsRowHeading: "Totals",
    totalRowHeading: "Total"
  },
  DatePicker: {
    previousMonth: "Show previous month, {previousMonthName} {showPreviousYear}",
    nextMonth: "Show next month, {nextMonth} {nextYear}",
    today: "Today ",
    start: "Start of range",
    end: "End of range",
    months: {
      january: "January",
      february: "February",
      march: "March",
      april: "April",
      may: "May",
      june: "June",
      july: "July",
      august: "August",
      september: "September",
      october: "October",
      november: "November",
      december: "December"
    },
    days: {
      monday: "Monday",
      tuesday: "Tuesday",
      wednesday: "Wednesday",
      thursday: "Thursday",
      friday: "Friday",
      saturday: "Saturday",
      sunday: "Sunday"
    },
    daysAbbreviated: {
      monday: "Mo",
      tuesday: "Tu",
      wednesday: "We",
      thursday: "Th",
      friday: "Fr",
      saturday: "Sa",
      sunday: "Su"
    }
  },
  DiscardConfirmationModal: {
    title: "Discard all unsaved changes",
    message: "If you discard changes, you’ll delete any edits you made since you last saved.",
    primaryAction: "Discard changes",
    secondaryAction: "Continue editing"
  },
  DropZone: {
    single: {
      overlayTextFile: "Drop file to upload",
      overlayTextImage: "Drop image to upload",
      overlayTextVideo: "Drop video to upload",
      actionTitleFile: "Add file",
      actionTitleImage: "Add image",
      actionTitleVideo: "Add video",
      actionHintFile: "or drop file to upload",
      actionHintImage: "or drop image to upload",
      actionHintVideo: "or drop video to upload",
      labelFile: "Upload file",
      labelImage: "Upload image",
      labelVideo: "Upload video"
    },
    allowMultiple: {
      overlayTextFile: "Drop files to upload",
      overlayTextImage: "Drop images to upload",
      overlayTextVideo: "Drop videos to upload",
      actionTitleFile: "Add files",
      actionTitleImage: "Add images",
      actionTitleVideo: "Add videos",
      actionHintFile: "or drop files to upload",
      actionHintImage: "or drop images to upload",
      actionHintVideo: "or drop videos to upload",
      labelFile: "Upload files",
      labelImage: "Upload images",
      labelVideo: "Upload videos"
    },
    errorOverlayTextFile: "File type is not valid",
    errorOverlayTextImage: "Image type is not valid",
    errorOverlayTextVideo: "Video type is not valid"
  },
  EmptySearchResult: {
    altText: "Empty search results"
  },
  Frame: {
    skipToContent: "Skip to content",
    navigationLabel: "Navigation",
    Navigation: {
      closeMobileNavigationLabel: "Close navigation"
    }
  },
  FullscreenBar: {
    back: "Back",
    accessibilityLabel: "Exit fullscreen mode"
  },
  Filters: {
    moreFilters: "More filters",
    moreFiltersWithCount: "More filters ({count})",
    filter: "Filter {resourceName}",
    noFiltersApplied: "No filters applied",
    cancel: "Cancel",
    done: "Done",
    clearAllFilters: "Clear all filters",
    clear: "Clear",
    clearLabel: "Clear {filterName}",
    addFilter: "Add filter",
    clearFilters: "Clear all",
    searchInView: "in:{viewName}"
  },
  FilterPill: {
    clear: "Clear"
  },
  IndexFilters: {
    searchFilterTooltip: "Search and filter",
    searchFilterTooltipWithShortcut: "Search and filter (F)",
    searchFilterAccessibilityLabel: "Search and filter results",
    sort: "Sort your results",
    addView: "Add a new view",
    newView: "Custom search",
    SortButton: {
      ariaLabel: "Sort the results",
      tooltip: "Sort",
      title: "Sort by",
      sorting: {
        asc: "Ascending",
        desc: "Descending",
        az: "A-Z",
        za: "Z-A"
      }
    },
    EditColumnsButton: {
      tooltip: "Edit columns",
      accessibilityLabel: "Customize table column order and visibility"
    },
    UpdateButtons: {
      cancel: "Cancel",
      update: "Update",
      save: "Save",
      saveAs: "Save as",
      modal: {
        title: "Save view as",
        label: "Name",
        sameName: "A view with this name already exists. Please choose a different name.",
        save: "Save",
        cancel: "Cancel"
      }
    }
  },
  IndexProvider: {
    defaultItemSingular: "Item",
    defaultItemPlural: "Items",
    allItemsSelected: "All {itemsLength}+ {resourceNamePlural} are selected",
    selected: "{selectedItemsCount} selected",
    a11yCheckboxDeselectAllSingle: "Deselect {resourceNameSingular}",
    a11yCheckboxSelectAllSingle: "Select {resourceNameSingular}",
    a11yCheckboxDeselectAllMultiple: "Deselect all {itemsLength} {resourceNamePlural}",
    a11yCheckboxSelectAllMultiple: "Select all {itemsLength} {resourceNamePlural}"
  },
  IndexTable: {
    emptySearchTitle: "No {resourceNamePlural} found",
    emptySearchDescription: "Try changing the filters or search term",
    onboardingBadgeText: "New",
    resourceLoadingAccessibilityLabel: "Loading {resourceNamePlural}…",
    selectAllLabel: "Select all {resourceNamePlural}",
    selected: "{selectedItemsCount} selected",
    undo: "Undo",
    selectAllItems: "Select all {itemsLength}+ {resourceNamePlural}",
    selectItem: "Select {resourceName}",
    selectButtonText: "Select",
    sortAccessibilityLabel: "sort {direction} by"
  },
  Loading: {
    label: "Page loading bar"
  },
  Modal: {
    iFrameTitle: "body markup",
    modalWarning: "These required properties are missing from Modal: {missingProps}"
  },
  Page: {
    Header: {
      rollupActionsLabel: "View actions for {title}",
      pageReadyAccessibilityLabel: "{title}. This page is ready"
    }
  },
  Pagination: {
    previous: "Previous",
    next: "Next",
    pagination: "Pagination"
  },
  ProgressBar: {
    negativeWarningMessage: "Values passed to the progress prop shouldn’t be negative. Resetting {progress} to 0.",
    exceedWarningMessage: "Values passed to the progress prop shouldn’t exceed 100. Setting {progress} to 100."
  },
  ResourceList: {
    sortingLabel: "Sort by",
    defaultItemSingular: "item",
    defaultItemPlural: "items",
    showing: "Showing {itemsCount} {resource}",
    showingTotalCount: "Showing {itemsCount} of {totalItemsCount} {resource}",
    loading: "Loading {resource}",
    selected: "{selectedItemsCount} selected",
    allItemsSelected: "All {itemsLength}+ {resourceNamePlural} in your store are selected",
    allFilteredItemsSelected: "All {itemsLength}+ {resourceNamePlural} in this filter are selected",
    selectAllItems: "Select all {itemsLength}+ {resourceNamePlural} in your store",
    selectAllFilteredItems: "Select all {itemsLength}+ {resourceNamePlural} in this filter",
    emptySearchResultTitle: "No {resourceNamePlural} found",
    emptySearchResultDescription: "Try changing the filters or search term",
    selectButtonText: "Select",
    a11yCheckboxDeselectAllSingle: "Deselect {resourceNameSingular}",
    a11yCheckboxSelectAllSingle: "Select {resourceNameSingular}",
    a11yCheckboxDeselectAllMultiple: "Deselect all {itemsLength} {resourceNamePlural}",
    a11yCheckboxSelectAllMultiple: "Select all {itemsLength} {resourceNamePlural}",
    Item: {
      actionsDropdownLabel: "Actions for {accessibilityLabel}",
      actionsDropdown: "Actions dropdown",
      viewItem: "View details for {itemName}"
    },
    BulkActions: {
      actionsActivatorLabel: "Actions",
      moreActionsActivatorLabel: "More actions"
    }
  },
  SkeletonPage: {
    loadingLabel: "Page loading"
  },
  Tabs: {
    newViewAccessibilityLabel: "Create new view",
    newViewTooltip: "Create view",
    toggleTabsLabel: "More views",
    Tab: {
      rename: "Rename view",
      duplicate: "Duplicate view",
      edit: "Edit view",
      editColumns: "Edit columns",
      "delete": "Delete view",
      copy: "Copy of {name}",
      deleteModal: {
        title: "Delete view?",
        description: "This can’t be undone. {viewName} view will no longer be available in your admin.",
        cancel: "Cancel",
        "delete": "Delete view"
      }
    },
    RenameModal: {
      title: "Rename view",
      label: "Name",
      cancel: "Cancel",
      create: "Save",
      errors: {
        sameName: "A view with this name already exists. Please choose a different name."
      }
    },
    DuplicateModal: {
      title: "Duplicate view",
      label: "Name",
      cancel: "Cancel",
      create: "Create view",
      errors: {
        sameName: "A view with this name already exists. Please choose a different name."
      }
    },
    CreateViewModal: {
      title: "Create new view",
      label: "Name",
      cancel: "Cancel",
      create: "Create view",
      errors: {
        sameName: "A view with this name already exists. Please choose a different name."
      }
    }
  },
  Tag: {
    ariaLabel: "Remove {children}"
  },
  TextField: {
    characterCount: "{count} characters",
    characterCountWithMaxLength: "{count} of {limit} characters used"
  },
  TooltipOverlay: {
    accessibilityLabel: "Tooltip: {label}"
  },
  TopBar: {
    toggleMenuLabel: "Toggle menu",
    SearchField: {
      clearButtonLabel: "Clear",
      search: "Search"
    }
  },
  MediaCard: {
    dismissButton: "Dismiss",
    popoverButton: "Actions"
  },
  VideoThumbnail: {
    playButtonA11yLabel: {
      "default": "Play video",
      defaultWithDuration: "Play video of length {duration}",
      duration: {
        hours: {
          other: {
            only: "{hourCount} hours",
            andMinutes: "{hourCount} hours and {minuteCount} minutes",
            andMinute: "{hourCount} hours and {minuteCount} minute",
            minutesAndSeconds: "{hourCount} hours, {minuteCount} minutes, and {secondCount} seconds",
            minutesAndSecond: "{hourCount} hours, {minuteCount} minutes, and {secondCount} second",
            minuteAndSeconds: "{hourCount} hours, {minuteCount} minute, and {secondCount} seconds",
            minuteAndSecond: "{hourCount} hours, {minuteCount} minute, and {secondCount} second",
            andSeconds: "{hourCount} hours and {secondCount} seconds",
            andSecond: "{hourCount} hours and {secondCount} second"
          },
          one: {
            only: "{hourCount} hour",
            andMinutes: "{hourCount} hour and {minuteCount} minutes",
            andMinute: "{hourCount} hour and {minuteCount} minute",
            minutesAndSeconds: "{hourCount} hour, {minuteCount} minutes, and {secondCount} seconds",
            minutesAndSecond: "{hourCount} hour, {minuteCount} minutes, and {secondCount} second",
            minuteAndSeconds: "{hourCount} hour, {minuteCount} minute, and {secondCount} seconds",
            minuteAndSecond: "{hourCount} hour, {minuteCount} minute, and {secondCount} second",
            andSeconds: "{hourCount} hour and {secondCount} seconds",
            andSecond: "{hourCount} hour and {secondCount} second"
          }
        },
        minutes: {
          other: {
            only: "{minuteCount} minutes",
            andSeconds: "{minuteCount} minutes and {secondCount} seconds",
            andSecond: "{minuteCount} minutes and {secondCount} second"
          },
          one: {
            only: "{minuteCount} minute",
            andSeconds: "{minuteCount} minute and {secondCount} seconds",
            andSecond: "{minuteCount} minute and {secondCount} second"
          }
        },
        seconds: {
          other: "{secondCount} seconds",
          one: "{secondCount} second"
        }
      }
    }
  }
};
const lang = {
  Polaris
};
const _hoisted_1 = { class: "preview-wrapper" };
const _hoisted_2 = /* @__PURE__ */ createBaseVNode("div", { id: "preview" }, null, -1);
const _hoisted_3 = [
  _hoisted_2
];
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "Preview",
  setup(__props) {
    var _a;
    const { params } = useData();
    const isAppProvider = ((_a = params.value) == null ? void 0 : _a.component) === "AppProvider";
    const exampleComponent = defineAsyncComponent(
      () => {
        var _a2, _b;
        return __variableDynamicImportRuntimeHelper(/* @__PURE__ */ Object.assign({ "../components/AccountConnection/Default.vue": () => __vitePreload(() => import("./Default.oWf_xsiP.js"), true ? __vite__mapDeps([0,1]) : void 0), "../components/ActionList/InPopover.vue": () => __vitePreload(() => import("./InPopover.hgEGQT-K.js"), true ? __vite__mapDeps([2,1]) : void 0), "../components/ActionList/WithDestructive.vue": () => __vitePreload(() => import("./WithDestructive.49rOhE_N.js"), true ? __vite__mapDeps([3,4,1]) : void 0), "../components/ActionList/WithHelpText.vue": () => __vitePreload(() => import("./WithHelpText.Lqnb2gSg.js"), true ? __vite__mapDeps([5,1]) : void 0), "../components/ActionList/WithIconAndSuffix.vue": () => __vitePreload(() => import("./WithIconAndSuffix.5f3KoZOB.js"), true ? __vite__mapDeps([6,4,1]) : void 0), "../components/ActionList/WithIconOrImage.vue": () => __vitePreload(() => import("./WithIconOrImage.0Rv4sbnc.js"), true ? __vite__mapDeps([7,1]) : void 0), "../components/ActionList/WithPrefix.vue": () => __vitePreload(() => import("./WithPrefix.MZGujmzy.js"), true ? __vite__mapDeps([8,1]) : void 0), "../components/ActionList/WithSections.vue": () => __vitePreload(() => import("./WithSections.LjCNZ6SN.js"), true ? __vite__mapDeps([9,4,1]) : void 0), "../components/AppProvider/Default.vue": () => __vitePreload(() => import("./Default.ELN26UG-.js"), true ? __vite__mapDeps([10,1]) : void 0), "../components/AppProvider/I18n.vue": () => __vitePreload(() => import("./I18n.uWUzldpn.js"), true ? __vite__mapDeps([11,1]) : void 0), "../components/Autocomplete/Default.vue": () => __vitePreload(() => import("./Default.mCCEqM4P.js"), true ? __vite__mapDeps([12,1]) : void 0), "../components/Autocomplete/MultipleSections.vue": () => __vitePreload(() => import("./MultipleSections.Ua-oOy0r.js"), true ? __vite__mapDeps([13,1]) : void 0), "../components/Autocomplete/MultipleTags.vue": () => __vitePreload(() => import("./MultipleTags.MjXfs-JQ.js"), true ? __vite__mapDeps([14,1]) : void 0), "../components/Autocomplete/WithAction.vue": () => __vitePreload(() => import("./WithAction.KZPW16aS.js"), true ? __vite__mapDeps([15,16,1]) : void 0), "../components/Autocomplete/WithDestructiveAction.vue": () => __vitePreload(() => import("./WithDestructiveAction.TYtRRFoU.js"), true ? __vite__mapDeps([17,1]) : void 0), "../components/Autocomplete/WithEmptyState.vue": () => __vitePreload(() => import("./WithEmptyState.xAn1pjwY.js"), true ? __vite__mapDeps([18,1]) : void 0), "../components/Autocomplete/WithLazyLoading.vue": () => __vitePreload(() => import("./WithLazyLoading.iyaySvmm.js"), true ? __vite__mapDeps([19,1]) : void 0), "../components/Autocomplete/WithLoading.vue": () => __vitePreload(() => import("./WithLoading.w23_LlmW.js"), true ? __vite__mapDeps([20,1]) : void 0), "../components/Autocomplete/WithWrappingAction.vue": () => __vitePreload(() => import("./WithWrappingAction.gVnAmuQl.js"), true ? __vite__mapDeps([21,16,1]) : void 0), "../components/Avatar/Default.vue": () => __vitePreload(() => import("./Default.PpNHCuEv.js"), true ? __vite__mapDeps([22,1]) : void 0), "../components/Avatar/ExtraSmall.vue": () => __vitePreload(() => import("./ExtraSmall.CxaNi-gL.js"), true ? __vite__mapDeps([23,1]) : void 0), "../components/Avatar/Initial.vue": () => __vitePreload(() => import("./Initial.hNr0XFpg.js"), true ? __vite__mapDeps([24,1]) : void 0), "../components/Badge/Attention.vue": () => __vitePreload(() => import("./Attention.tPTR6hPi.js"), true ? __vite__mapDeps([25,1]) : void 0), "../components/Badge/Complete.vue": () => __vitePreload(() => import("./Complete.6Q4qL1Yz.js"), true ? __vite__mapDeps([26,1]) : void 0), "../components/Badge/Critical.vue": () => __vitePreload(() => import("./Critical.FfX9vBhw.js"), true ? __vite__mapDeps([27,1]) : void 0), "../components/Badge/Default.vue": () => __vitePreload(() => import("./Default.QDvSyH6t.js"), true ? __vite__mapDeps([28,1]) : void 0), "../components/Badge/Incomplete.vue": () => __vitePreload(() => import("./Incomplete.pNFyRIZo.js"), true ? __vite__mapDeps([29,1]) : void 0), "../components/Badge/Info.vue": () => __vitePreload(() => import("./Info.RhM1iR2s.js"), true ? __vite__mapDeps([30,1]) : void 0), "../components/Badge/Partially.vue": () => __vitePreload(() => import("./Partially.FIVelWmB.js"), true ? __vite__mapDeps([31,1]) : void 0), "../components/Badge/Small.vue": () => __vitePreload(() => import("./Small.pyxYwyQs.js"), true ? __vite__mapDeps([32,1]) : void 0), "../components/Badge/Success.vue": () => __vitePreload(() => import("./Success.KVmO39IU.js"), true ? __vite__mapDeps([33,1]) : void 0), "../components/Badge/Warning.vue": () => __vitePreload(() => import("./Warning.ODEz3N8y.js"), true ? __vite__mapDeps([34,1]) : void 0), "../components/Badge/WithOverride.vue": () => __vitePreload(() => import("./WithOverride.hhtgOt5n.js"), true ? __vite__mapDeps([35,1]) : void 0), "../components/Banner/BannerCritical.vue": () => __vitePreload(() => import("./BannerCritical.PO0whPJk.js"), true ? __vite__mapDeps([36,1]) : void 0), "../components/Banner/BannerDismissible.vue": () => __vitePreload(() => import("./BannerDismissible.wV38yEmq.js"), true ? __vite__mapDeps([37,1]) : void 0), "../components/Banner/BannerInCard.vue": () => __vitePreload(() => import("./BannerInCard.ohKu-JHS.js"), true ? __vite__mapDeps([38,1]) : void 0), "../components/Banner/BannerInformational.vue": () => __vitePreload(() => import("./BannerInformational.EqW7aP7s.js"), true ? __vite__mapDeps([39,1]) : void 0), "../components/Banner/BannerSuccess.vue": () => __vitePreload(() => import("./BannerSuccess.3SamhSVs.js"), true ? __vite__mapDeps([40,1]) : void 0), "../components/Banner/BannerWarning.vue": () => __vitePreload(() => import("./BannerWarning.i5yQEFt-.js"), true ? __vite__mapDeps([41,1]) : void 0), "../components/Banner/BannerWithFocus.vue": () => __vitePreload(() => import("./BannerWithFocus.BsLkrOQ_.js"), true ? __vite__mapDeps([42,1]) : void 0), "../components/Banner/BannerWithFooterCallToAction.vue": () => __vitePreload(() => import("./BannerWithFooterCallToAction.H232bM1m.js"), true ? __vite__mapDeps([43,1]) : void 0), "../components/Banner/Default.vue": () => __vitePreload(() => import("./Default.jb-pK555.js"), true ? __vite__mapDeps([44,1]) : void 0), "../components/Bleed/Default.vue": () => __vitePreload(() => import("./Default.QRiSpwZA.js"), true ? __vite__mapDeps([45,1]) : void 0), "../components/Bleed/Direction.vue": () => __vitePreload(() => import("./Direction.slFOsvL8.js"), true ? __vite__mapDeps([46,47,1]) : void 0), "../components/Bleed/PreviewPlaceholder.vue": () => __vitePreload(() => import("./PreviewPlaceholder.g_bHMiSg.js"), true ? __vite__mapDeps([48,47,1]) : void 0), "../components/Bleed/Vertical.vue": () => __vitePreload(() => import("./Vertical.CYSqjMEd.js"), true ? __vite__mapDeps([49,1]) : void 0), "../components/BlockStack/Align.vue": () => __vitePreload(() => import("./Align.3Omqz4Na.js"), true ? __vite__mapDeps([50,51,1]) : void 0), "../components/BlockStack/Gap.vue": () => __vitePreload(() => import("./Gap.F62co9Ok.js"), true ? __vite__mapDeps([52,1]) : void 0), "../components/BlockStack/InlineAlign.vue": () => __vitePreload(() => import("./InlineAlign.PQp7PuJZ.js"), true ? __vite__mapDeps([53,51,1]) : void 0), "../components/BlockStack/PreviewPlaceholder.vue": () => __vitePreload(() => import("./PreviewPlaceholder.Z8JKeTHh.js"), true ? __vite__mapDeps([54,51,1]) : void 0), "../components/Box/Border.vue": () => __vitePreload(() => import("./Border.ziqxgis_.js"), true ? __vite__mapDeps([55,1]) : void 0), "../components/Box/BorderRadius.vue": () => __vitePreload(() => import("./BorderRadius.gJCgqVv8.js"), true ? __vite__mapDeps([56,1]) : void 0), "../components/Box/Color.vue": () => __vitePreload(() => import("./Color.Y8C_biFI.js"), true ? __vite__mapDeps([57,1]) : void 0), "../components/Box/Padding.vue": () => __vitePreload(() => import("./Padding.RWpHVl6a.js"), true ? __vite__mapDeps([58,59,1]) : void 0), "../components/Box/Placeholder.vue": () => __vitePreload(() => import("./Placeholder.x2DSnaTi.js"), true ? __vite__mapDeps([60,59,1]) : void 0), "../components/Box/Shadow.vue": () => __vitePreload(() => import("./Shadow.N1F3rbjQ.js"), true ? __vite__mapDeps([61,1]) : void 0), "../components/Button/Default.vue": () => __vitePreload(() => import("./Default.HmhCwiRN.js"), true ? __vite__mapDeps([62,1]) : void 0), "../components/Button/Disabled.vue": () => __vitePreload(() => import("./Disabled.EIJvQ8qs.js"), true ? __vite__mapDeps([63,1]) : void 0), "../components/Button/FullWidth.vue": () => __vitePreload(() => import("./FullWidth.qqff0ZiT.js"), true ? __vite__mapDeps([64,1]) : void 0), "../components/Button/IconOnly.vue": () => __vitePreload(() => import("./IconOnly.GfnNzN7D.js"), true ? __vite__mapDeps([65,1]) : void 0), "../components/Button/Large.vue": () => __vitePreload(() => import("./Large.cWN0hp-R.js"), true ? __vite__mapDeps([66,1]) : void 0), "../components/Button/Loading.vue": () => __vitePreload(() => import("./Loading.KH8I1o5D.js"), true ? __vite__mapDeps([67,1]) : void 0), "../components/Button/Plain.vue": () => __vitePreload(() => import("./Plain.7_eygy-L.js"), true ? __vite__mapDeps([68,1]) : void 0), "../components/Button/PlainCritical.vue": () => __vitePreload(() => import("./PlainCritical.0cWpB3sn.js"), true ? __vite__mapDeps([69,1]) : void 0), "../components/Button/PlainDisclosure.vue": () => __vitePreload(() => import("./PlainDisclosure._E4BvD9g.js"), true ? __vite__mapDeps([70,1]) : void 0), "../components/Button/Pressed.vue": () => __vitePreload(() => import("./Pressed.6mhlkuJH.js"), true ? __vite__mapDeps([71,1]) : void 0), "../components/Button/Primary.vue": () => __vitePreload(() => import("./Primary.kUBFZkx7.js"), true ? __vite__mapDeps([72,1]) : void 0), "../components/Button/PrimaryCritical.vue": () => __vitePreload(() => import("./PrimaryCritical.sb_pOst8.js"), true ? __vite__mapDeps([73,1]) : void 0), "../components/Button/RightAlignedDisclosure.vue": () => __vitePreload(() => import("./RightAlignedDisclosure.JZ_GJfRJ.js"), true ? __vite__mapDeps([74,1]) : void 0), "../components/Button/SelectDisclosure.vue": () => __vitePreload(() => import("./SelectDisclosure.MYgGwYl8.js"), true ? __vite__mapDeps([75,1]) : void 0), "../components/Button/Split.vue": () => __vitePreload(() => import("./Split.SoL14X_8.js"), true ? __vite__mapDeps([76,1]) : void 0), "../components/Button/Tertiary.vue": () => __vitePreload(() => import("./Tertiary.IBPE0CFB.js"), true ? __vite__mapDeps([77,1]) : void 0), "../components/Button/TextAligned.vue": () => __vitePreload(() => import("./TextAligned.4J5p_7DQ.js"), true ? __vite__mapDeps([78,1]) : void 0), "../components/Button/WithIcon.vue": () => __vitePreload(() => import("./WithIcon.zPKpLxE-.js"), true ? __vite__mapDeps([79,1]) : void 0), "../components/ButtonGroup/Default.vue": () => __vitePreload(() => import("./Default.5fLo0RVt.js"), true ? __vite__mapDeps([80,1]) : void 0), "../components/ButtonGroup/Pressed.vue": () => __vitePreload(() => import("./Pressed.qGHXVI-l.js"), true ? __vite__mapDeps([81,1]) : void 0), "../components/ButtonGroup/Segmented.vue": () => __vitePreload(() => import("./Segmented.Xgv6spJ_.js"), true ? __vite__mapDeps([82,1]) : void 0), "../components/CalloutCard/CalloutCardDismissable.vue": () => __vitePreload(() => import("./CalloutCardDismissable.dKB5S1GX.js"), true ? __vite__mapDeps([83,1]) : void 0), "../components/CalloutCard/CalloutCardWithSecondaryAction.vue": () => __vitePreload(() => import("./CalloutCardWithSecondaryAction.UnL93k-z.js"), true ? __vite__mapDeps([84,1]) : void 0), "../components/CalloutCard/Default.vue": () => __vitePreload(() => import("./Default.E3NtbNC7.js"), true ? __vite__mapDeps([85,1]) : void 0), "../components/CalloutCard/WithIconableActions.vue": () => __vitePreload(() => import("./WithIconableActions.-mdOFyDV.js"), true ? __vite__mapDeps([86,1]) : void 0), "../components/Card/AllElement.vue": () => __vitePreload(() => import("./AllElement.9mSYgEVN.js"), true ? __vite__mapDeps([87,1]) : void 0), "../components/Card/Background.vue": () => __vitePreload(() => import("./Background.d-nI68DS.js"), true ? __vite__mapDeps([88,1]) : void 0), "../components/Card/CriticalFooterAction.vue": () => __vitePreload(() => import("./CriticalFooterAction.xvIzcUu2.js"), true ? __vite__mapDeps([89,1]) : void 0), "../components/Card/Default.vue": () => __vitePreload(() => import("./Default.-o-rYzqU.js"), true ? __vite__mapDeps([90,1]) : void 0), "../components/Card/FlushedSection.vue": () => __vitePreload(() => import("./FlushedSection.9xIlC4-O.js"), true ? __vite__mapDeps([91,1]) : void 0), "../components/Card/MultipleSection.vue": () => __vitePreload(() => import("./MultipleSection.tc08Vujk.js"), true ? __vite__mapDeps([92,1]) : void 0), "../components/Card/MultipleTitledSection.vue": () => __vitePreload(() => import("./MultipleTitledSection.ox5PwVpF.js"), true ? __vite__mapDeps([93,1]) : void 0), "../components/Card/ResponsiveBorderRadius.vue": () => __vitePreload(() => import("./ResponsiveBorderRadius.IVaidNuP.js"), true ? __vite__mapDeps([94,1]) : void 0), "../components/Card/SectionAndAction.vue": () => __vitePreload(() => import("./SectionAndAction.xDHd6quu.js"), true ? __vite__mapDeps([95,1]) : void 0), "../components/Card/SectionAndCriticalAction.vue": () => __vitePreload(() => import("./SectionAndCriticalAction.2wXkAYq5.js"), true ? __vite__mapDeps([96,1]) : void 0), "../components/Card/SubduedSection.vue": () => __vitePreload(() => import("./SubduedSection.QDbK2R2N.js"), true ? __vite__mapDeps([97,1]) : void 0), "../components/Card/Subsection.vue": () => __vitePreload(() => import("./Subsection.1J-mDGGo.js"), true ? __vite__mapDeps([98,1]) : void 0), "../components/Card/VaryingPadding.vue": () => __vitePreload(() => import("./VaryingPadding.QDqvv05G.js"), true ? __vite__mapDeps([99,1]) : void 0), "../components/Card/WithCustomFooterAction.vue": () => __vitePreload(() => import("./WithCustomFooterAction.i9OvUngP.js"), true ? __vite__mapDeps([100,1]) : void 0), "../components/Card/WithFooterAction.vue": () => __vitePreload(() => import("./WithFooterAction.qY39sD7M.js"), true ? __vite__mapDeps([101,1]) : void 0), "../components/Card/WithHeaderAction.vue": () => __vitePreload(() => import("./WithHeaderAction.un5-9xuA.js"), true ? __vite__mapDeps([102,1]) : void 0), "../components/Card/WithMultipleFooterAction.vue": () => __vitePreload(() => import("./WithMultipleFooterAction.RuaTT06f.js"), true ? __vite__mapDeps([103,1]) : void 0), "../components/Card/WithSection.vue": () => __vitePreload(() => import("./WithSection.YX3aM1pF.js"), true ? __vite__mapDeps([104,1]) : void 0), "../components/Card/WithSeparateHeader.vue": () => __vitePreload(() => import("./WithSeparateHeader.u1uj5Xax.js"), true ? __vite__mapDeps([105,1]) : void 0), "../components/Checkbox/Default.vue": () => __vitePreload(() => import("./Default.ciCbAfmp.js"), true ? __vite__mapDeps([106,1]) : void 0), "../components/ChoiceList/ChildrenContent.vue": () => __vitePreload(() => import("./ChildrenContent.KhbnJwna.js"), true ? __vite__mapDeps([107,1]) : void 0), "../components/ChoiceList/Default.vue": () => __vitePreload(() => import("./Default.4MQB9u3-.js"), true ? __vite__mapDeps([108,1]) : void 0), "../components/ChoiceList/DynamicChildrenContent.vue": () => __vitePreload(() => import("./DynamicChildrenContent.MkGWKpcm.js"), true ? __vite__mapDeps([109,1]) : void 0), "../components/ChoiceList/MultiChoice.vue": () => __vitePreload(() => import("./MultiChoice.RUD50-os.js"), true ? __vite__mapDeps([110,1]) : void 0), "../components/ChoiceList/WithError.vue": () => __vitePreload(() => import("./WithError.ddF8FHJ4.js"), true ? __vite__mapDeps([111,1]) : void 0), "../components/Collapsible/Default.vue": () => __vitePreload(() => import("./Default.KePa9I8m.js"), true ? __vite__mapDeps([112,1]) : void 0), "../components/ColorPicker/Default.vue": () => __vitePreload(() => import("./Default.9R7NYuv8.js"), true ? __vite__mapDeps([113,1]) : void 0), "../components/ColorPicker/FullWidth.vue": () => __vitePreload(() => import("./FullWidth.Wv1jXp7-.js"), true ? __vite__mapDeps([114,1]) : void 0), "../components/ColorPicker/HexValue.vue": () => __vitePreload(() => import("./HexValue.q6NGArXo.js"), true ? __vite__mapDeps([115,1]) : void 0), "../components/ColorPicker/RgbValue.vue": () => __vitePreload(() => import("./RgbValue.yR6RjBVh.js"), true ? __vite__mapDeps([116,1]) : void 0), "../components/ColorPicker/Transparent.vue": () => __vitePreload(() => import("./Transparent.xPZigkPP.js"), true ? __vite__mapDeps([117,1]) : void 0), "../components/Combobox/Default.vue": () => __vitePreload(() => import("./Default.58akC258.js"), true ? __vite__mapDeps([118,1]) : void 0), "../components/Combobox/ManualSelection.vue": () => __vitePreload(() => import("./ManualSelection.0VL4bJzd.js"), true ? __vite__mapDeps([119,1]) : void 0), "../components/Combobox/MultiSelect.vue": () => __vitePreload(() => import("./MultiSelect.ORtRyPwz.js"), true ? __vite__mapDeps([120,1]) : void 0), "../components/Combobox/MultiSelectAndManualSelection.vue": () => __vitePreload(() => import("./MultiSelectAndManualSelection.cMvokMlp.js"), true ? __vite__mapDeps([121,1]) : void 0), "../components/Combobox/MultiSelectAndVerticalContent.vue": () => __vitePreload(() => import("./MultiSelectAndVerticalContent.dKd2_scF.js"), true ? __vite__mapDeps([122,1]) : void 0), "../components/Combobox/WithLoading.vue": () => __vitePreload(() => import("./WithLoading.KbhdQ1nX.js"), true ? __vite__mapDeps([123,1]) : void 0), "../components/DataTable/AllElements.vue": () => __vitePreload(() => import("./AllElements.ZywZc9MY.js"), true ? __vite__mapDeps([124,1]) : void 0), "../components/DataTable/Default.vue": () => __vitePreload(() => import("./Default.UtloQBU7.js"), true ? __vite__mapDeps([125,1]) : void 0), "../components/DataTable/Sortable.vue": () => __vitePreload(() => import("./Sortable._-GBP6Tn.js"), true ? __vite__mapDeps([126,1]) : void 0), "../components/DataTable/StickyHeader.vue": () => __vitePreload(() => import("./StickyHeader.FC6M5K1H.js"), true ? __vite__mapDeps([127,1]) : void 0), "../components/DataTable/WithCustomTotalsHeading.vue": () => __vitePreload(() => import("./WithCustomTotalsHeading.iBJDrOjX.js"), true ? __vite__mapDeps([128,1]) : void 0), "../components/DataTable/WithFixedFirstColumns.vue": () => __vitePreload(() => import("./WithFixedFirstColumns.cN6A64Mk.js"), true ? __vite__mapDeps([129,1]) : void 0), "../components/DataTable/WithFooter.vue": () => __vitePreload(() => import("./WithFooter.cHgojxEW.js"), true ? __vite__mapDeps([130,1]) : void 0), "../components/DataTable/WithPagination.vue": () => __vitePreload(() => import("./WithPagination.1-z-Gmnq.js"), true ? __vite__mapDeps([131,1]) : void 0), "../components/DataTable/WithRowHeadingLinks.vue": () => __vitePreload(() => import("./WithRowHeadingLinks.RB3MXnV6.js"), true ? __vite__mapDeps([132,1]) : void 0), "../components/DataTable/WithTotalsInFooter.vue": () => __vitePreload(() => import("./WithTotalsInFooter.qRAtcUn8.js"), true ? __vite__mapDeps([133,1]) : void 0), "../components/DataTable/ZebraStriping.vue": () => __vitePreload(() => import("./ZebraStriping.pQO-iUvX.js"), true ? __vite__mapDeps([134,1]) : void 0), "../components/DatePicker/Default.vue": () => __vitePreload(() => import("./Default.QiaWmDrk.js"), true ? __vite__mapDeps([135,1]) : void 0), "../components/DatePicker/MultiMonthRanged.vue": () => __vitePreload(() => import("./MultiMonthRanged.qTv2nsVB.js"), true ? __vite__mapDeps([136,1]) : void 0), "../components/DatePicker/Ranged.vue": () => __vitePreload(() => import("./Ranged.MvJz1kJk.js"), true ? __vite__mapDeps([137,1]) : void 0), "../components/DatePicker/WithDisabledDates.vue": () => __vitePreload(() => import("./WithDisabledDates.mt-YMCsK.js"), true ? __vite__mapDeps([138,1]) : void 0), "../components/DatePicker/WithSpecificDisabledDates.vue": () => __vitePreload(() => import("./WithSpecificDisabledDates.-bT3GWDZ.js"), true ? __vite__mapDeps([139,1]) : void 0), "../components/DescriptionList/Default.vue": () => __vitePreload(() => import("./Default.yay1MJUs.js"), true ? __vite__mapDeps([140,1]) : void 0), "../components/Divider/Default.vue": () => __vitePreload(() => import("./Default.S-0F5unh.js"), true ? __vite__mapDeps([141,1]) : void 0), "../components/DropZone/AcceptsSvgOnly.vue": () => __vitePreload(() => import("./AcceptsSvgOnly.b0xkkkaG.js"), true ? __vite__mapDeps([142,1]) : void 0), "../components/DropZone/CustomFileDialogTrigger.vue": () => __vitePreload(() => import("./CustomFileDialogTrigger.dKG3RNUF.js"), true ? __vite__mapDeps([143,144,1]) : void 0), "../components/DropZone/CustomFileUploadText.vue": () => __vitePreload(() => import("./CustomFileUploadText.Ku5uO0ez.js"), true ? __vite__mapDeps([145,144,1]) : void 0), "../components/DropZone/Default.vue": () => __vitePreload(() => import("./Default.IW9w5V6k.js"), true ? __vite__mapDeps([146,144,1]) : void 0), "../components/DropZone/MediumSized.vue": () => __vitePreload(() => import("./MediumSized.Vi57JzH5.js"), true ? __vite__mapDeps([147,1]) : void 0), "../components/DropZone/Nested.vue": () => __vitePreload(() => import("./Nested.pv1582E3.js"), true ? __vite__mapDeps([148,144,1]) : void 0), "../components/DropZone/SmallSized.vue": () => __vitePreload(() => import("./SmallSized.GCoOpByX.js"), true ? __vite__mapDeps([149,1]) : void 0), "../components/DropZone/WithDropOnPage.vue": () => __vitePreload(() => import("./WithDropOnPage.DSZEfgg7.js"), true ? __vite__mapDeps([150,144,1]) : void 0), "../components/DropZone/WithImageUpload.vue": () => __vitePreload(() => import("./WithImageUpload.0qWaYLQV.js"), true ? __vite__mapDeps([151,1]) : void 0), "../components/DropZone/WithLabel.vue": () => __vitePreload(() => import("./WithLabel.rD7OfOvn.js"), true ? __vite__mapDeps([152,1]) : void 0), "../components/DropZone/WithSingleUpload.vue": () => __vitePreload(() => import("./WithSingleUpload.XmAvXZCE.js"), true ? __vite__mapDeps([153,144,1]) : void 0), "../components/EmptyState/Default.vue": () => __vitePreload(() => import("./Default.k0ZvraM0.js"), true ? __vite__mapDeps([154,1]) : void 0), "../components/EmptyState/FullWidthLayout.vue": () => __vitePreload(() => import("./FullWidthLayout.-C4V0teA.js"), true ? __vite__mapDeps([155,1]) : void 0), "../components/EmptyState/WithSubduedFooterContent.vue": () => __vitePreload(() => import("./WithSubduedFooterContent.mjgLO-3P.js"), true ? __vite__mapDeps([156,1]) : void 0), "../components/ExceptionList/Default.vue": () => __vitePreload(() => import("./Default.PAWVekgO.js"), true ? __vite__mapDeps([157,144,1]) : void 0), "../components/Filters/Disabled.vue": () => __vitePreload(() => import("./Disabled.iJwUMuTL.js"), true ? __vite__mapDeps([158,1]) : void 0), "../components/Filters/SomeDisabled.vue": () => __vitePreload(() => import("./SomeDisabled.otc47VbY.js"), true ? __vite__mapDeps([159,1]) : void 0), "../components/Filters/WithAdditionalFilterSections.vue": () => __vitePreload(() => import("./WithAdditionalFilterSections.lXb4Xpq1.js"), true ? __vite__mapDeps([160,1]) : void 0), "../components/Filters/WithChildrenContent.vue": () => __vitePreload(() => import("./WithChildrenContent.r-Lna_VZ.js"), true ? __vite__mapDeps([161,1]) : void 0), "../components/Filters/WithDataTable.vue": () => __vitePreload(() => import("./WithDataTable.fNZM30Ew.js"), true ? __vite__mapDeps([162,1]) : void 0), "../components/Filters/WithFilterBarHidden.vue": () => __vitePreload(() => import("./WithFilterBarHidden.vSer9tyF.js"), true ? __vite__mapDeps([163,1]) : void 0), "../components/Filters/WithQueryFieldDisabled.vue": () => __vitePreload(() => import("./WithQueryFieldDisabled.SbsuTLam.js"), true ? __vite__mapDeps([164,1]) : void 0), "../components/Filters/WithQueryFieldHidden.vue": () => __vitePreload(() => import("./WithQueryFieldHidden.n457zUZD.js"), true ? __vite__mapDeps([165,1]) : void 0), "../components/Filters/WithResourceList.vue": () => __vitePreload(() => import("./WithResourceList.U0N7kgbo.js"), true ? __vite__mapDeps([166,1]) : void 0), "../components/FooterHelp/Default.vue": () => __vitePreload(() => import("./Default.t9hNtAuX.js"), true ? __vite__mapDeps([167,1]) : void 0), "../components/Form/FormSubmit.vue": () => __vitePreload(() => import("./FormSubmit.VY64lUmP.js"), true ? __vite__mapDeps([168,1]) : void 0), "../components/Form/WithoutValidation.vue": () => __vitePreload(() => import("./WithoutValidation.8SFsNmvQ.js"), true ? __vite__mapDeps([169,1]) : void 0), "../components/FormLayout/CondensedFieldGroup.vue": () => __vitePreload(() => import("./CondensedFieldGroup.Bk5tlvJ3.js"), true ? __vite__mapDeps([170,1]) : void 0), "../components/FormLayout/Default.vue": () => __vitePreload(() => import("./Default.-Hsysdzo.js"), true ? __vite__mapDeps([171,1]) : void 0), "../components/FormLayout/FieldGroup.vue": () => __vitePreload(() => import("./FieldGroup.Z6BIVwPD.js"), true ? __vite__mapDeps([172,1]) : void 0), "../components/FullscreenBar/NoChildren.vue": () => __vitePreload(() => import("./NoChildren.-KEYy8Y4.js"), true ? __vite__mapDeps([173,1]) : void 0), "../components/FullscreenBar/WithChildren.vue": () => __vitePreload(() => import("./WithChildren.HyQLywBf.js"), true ? __vite__mapDeps([174,1]) : void 0), "../components/Grid/CustomLayout.vue": () => __vitePreload(() => import("./CustomLayout.TrYRto7i.js"), true ? __vite__mapDeps([175,1]) : void 0), "../components/Grid/ThreeOneThirdColumn.vue": () => __vitePreload(() => import("./ThreeOneThirdColumn.jYJzht3d.js"), true ? __vite__mapDeps([176,1]) : void 0), "../components/Grid/TwoColumn.vue": () => __vitePreload(() => import("./TwoColumn.mhCZPkPE.js"), true ? __vite__mapDeps([177,1]) : void 0), "../components/Grid/TwoThirdColumn.vue": () => __vitePreload(() => import("./TwoThirdColumn.y4QkIigq.js"), true ? __vite__mapDeps([178,1]) : void 0), "../components/Icon/Colored.vue": () => __vitePreload(() => import("./Colored.DiKJToVg.js"), true ? __vite__mapDeps([179,16,1]) : void 0), "../components/Icon/CustomSvg.vue": () => __vitePreload(() => import("./CustomSvg.tohhxFhI.js"), true ? __vite__mapDeps([180,1]) : void 0), "../components/Icon/CustomSvgColor.vue": () => __vitePreload(() => import("./CustomSvgColor.nIY2oCdG.js"), true ? __vite__mapDeps([181,1]) : void 0), "../components/Icon/Default.vue": () => __vitePreload(() => import("./Default._QYuihWP.js"), true ? __vite__mapDeps([182,16,1]) : void 0), "../components/IndexFilters/Default.vue": () => __vitePreload(() => import("./Default.T9qx-qLB.js"), true ? __vite__mapDeps([183,184,1]) : void 0), "../components/IndexFilters/Disabled.vue": () => __vitePreload(() => import("./Disabled.osqqUMPX.js"), true ? __vite__mapDeps([185,184,1]) : void 0), "../components/IndexFilters/FilteringMode.vue": () => __vitePreload(() => import("./FilteringMode.WHLEWuCe.js"), true ? __vite__mapDeps([186,184,1]) : void 0), "../components/IndexFilters/WithNoFilters.vue": () => __vitePreload(() => import("./WithNoFilters.sLIlMZkY.js"), true ? __vite__mapDeps([187,184,1]) : void 0), "../components/IndexFilters/WithNoSearchOrFilters.vue": () => __vitePreload(() => import("./WithNoSearchOrFilters.GuF9HxgX.js"), true ? __vite__mapDeps([188,184,1]) : void 0), "../components/IndexFilters/WithPinned.vue": () => __vitePreload(() => import("./WithPinned.4Ldx8T1X.js"), true ? __vite__mapDeps([189,184,1]) : void 0), "../components/IndexTable/Default.vue": () => __vitePreload(() => import("./Default.LW5HhECF.js"), true ? __vite__mapDeps([190,184,1]) : void 0), "../components/IndexTable/SmallScreen.vue": () => __vitePreload(() => import("./SmallScreen.IUdgTFdL.js"), true ? __vite__mapDeps([191,184,1]) : void 0), "../components/IndexTable/SmallScreenWithElements.vue": () => __vitePreload(() => import("./SmallScreenWithElements.SZxsvZwg.js"), true ? __vite__mapDeps([192,184,1,193]) : void 0), "../components/IndexTable/WithBulkActions.vue": () => __vitePreload(() => import("./WithBulkActions.Mcya4pis.js"), true ? __vite__mapDeps([194,184,1]) : void 0), "../components/IndexTable/WithBulkActionsAndSelectionAcrossPages.vue": () => __vitePreload(() => import("./WithBulkActionsAndSelectionAcrossPages.uUyYkZjP.js"), true ? __vite__mapDeps([195,184,1]) : void 0), "../components/IndexTable/WithDisabledRows.vue": () => __vitePreload(() => import("./WithDisabledRows.SFbUrM7k.js"), true ? __vite__mapDeps([196,184,1]) : void 0), "../components/IndexTable/WithEditColumns.vue": () => __vitePreload(() => import("./WithEditColumns.IiCOGo4K.js"), true ? __vite__mapDeps([197,184,1,193]) : void 0), "../components/IndexTable/WithEmptyState.vue": () => __vitePreload(() => import("./WithEmptyState.koeWIUE9.js"), true ? __vite__mapDeps([198,1]) : void 0), "../components/IndexTable/WithFiltering.vue": () => __vitePreload(() => import("./WithFiltering.BLsOimwM.js"), true ? __vite__mapDeps([199,184,1,193]) : void 0), "../components/IndexTable/WithLoadingState.vue": () => __vitePreload(() => import("./WithLoadingState.bbLtEGEW.js"), true ? __vite__mapDeps([200,184,1,193]) : void 0), "../components/IndexTable/WithMultipleBulkActions.vue": () => __vitePreload(() => import("./WithMultipleBulkActions.R9zHcc3d.js"), true ? __vite__mapDeps([201,184,1]) : void 0), "../components/IndexTable/WithNestedRows.vue": () => __vitePreload(() => import("./WithNestedRows.tK1GWFTy.js"), true ? __vite__mapDeps([202,184,1]) : void 0), "../components/IndexTable/WithPagination.vue": () => __vitePreload(() => import("./WithPagination.VfcPvh62.js"), true ? __vite__mapDeps([203,184,1]) : void 0), "../components/IndexTable/WithPaginationAndBulkActions.vue": () => __vitePreload(() => import("./WithPaginationAndBulkActions.bxuMXIHB.js"), true ? __vite__mapDeps([204,184,1]) : void 0), "../components/IndexTable/WithRowNavigationLink.vue": () => __vitePreload(() => import("./WithRowNavigationLink.wUIbMPHa.js"), true ? __vite__mapDeps([205,184,1]) : void 0), "../components/IndexTable/WithSelectionNoBulkActions.vue": () => __vitePreload(() => import("./WithSelectionNoBulkActions.LT2tasUy.js"), true ? __vite__mapDeps([206,184,1]) : void 0), "../components/IndexTable/WithStickyLastColumn.vue": () => __vitePreload(() => import("./WithStickyLastColumn.ondcpm2D.js"), true ? __vite__mapDeps([207,184,1]) : void 0), "../components/IndexTable/WithStickyScrollBar.vue": () => __vitePreload(() => import("./WithStickyScrollBar.Wpoxnu8M.js"), true ? __vite__mapDeps([208,184,1]) : void 0), "../components/IndexTable/WithSubheaders.vue": () => __vitePreload(() => import("./WithSubheaders.yF3-OpV7.js"), true ? __vite__mapDeps([209,184,1]) : void 0), "../components/IndexTable/WithViewsSearchFilterSort.vue": () => __vitePreload(() => import("./WithViewsSearchFilterSort.x-Vsu211.js"), true ? __vite__mapDeps([210,184,1,193]) : void 0), "../components/IndexTable/WithoutCheckboxes.vue": () => __vitePreload(() => import("./WithoutCheckboxes.18V3cAnG.js"), true ? __vite__mapDeps([211,1]) : void 0), "../components/InlineError/Default.vue": () => __vitePreload(() => import("./Default.ZkQMIHKd.js"), true ? __vite__mapDeps([212,1]) : void 0), "../components/InlineGrid/ColumnNumber.vue": () => __vitePreload(() => import("./ColumnNumber.BXXYb8Ue.js"), true ? __vite__mapDeps([213,214,1]) : void 0), "../components/InlineGrid/ColumnWidth.vue": () => __vitePreload(() => import("./ColumnWidth.Nyy0-XqC.js"), true ? __vite__mapDeps([215,214,1]) : void 0), "../components/InlineGrid/Gap.vue": () => __vitePreload(() => import("./Gap.qVMxVd8c.js"), true ? __vite__mapDeps([216,214,1]) : void 0), "../components/InlineGrid/PreviewPlaceholder.vue": () => __vitePreload(() => import("./PreviewPlaceholder.2nGoIS2P.js"), true ? __vite__mapDeps([217,214,1]) : void 0), "../components/InlineStack/Align.vue": () => __vitePreload(() => import("./Align.50BBJP6k.js"), true ? __vite__mapDeps([218,219,1]) : void 0), "../components/InlineStack/BlockAlign.vue": () => __vitePreload(() => import("./BlockAlign.lo9rYgtY.js"), true ? __vite__mapDeps([220,219,1]) : void 0), "../components/InlineStack/Gap.vue": () => __vitePreload(() => import("./Gap.r-8Wgkrf.js"), true ? __vite__mapDeps([221,219,1]) : void 0), "../components/InlineStack/NonWrapping.vue": () => __vitePreload(() => import("./NonWrapping.ZGl0Nmc7.js"), true ? __vite__mapDeps([222,219,1]) : void 0), "../components/InlineStack/PreviewPlaceholder.vue": () => __vitePreload(() => import("./PreviewPlaceholder.cLcNRks2.js"), true ? __vite__mapDeps([223,219,1]) : void 0), "../components/InlineStack/WithDirection.vue": () => __vitePreload(() => import("./WithDirection.W_oCjhVD.js"), true ? __vite__mapDeps([224,219,1]) : void 0), "../components/KeyboardKey/Default.vue": () => __vitePreload(() => import("./Default.p-3CXo3i.js"), true ? __vite__mapDeps([225,1]) : void 0), "../components/Layout/Annotated.vue": () => __vitePreload(() => import("./Annotated.QGxOdt0-.js"), true ? __vite__mapDeps([226,1]) : void 0), "../components/Layout/AnnotatedBanner.vue": () => __vitePreload(() => import("./AnnotatedBanner.SP31E57J.js"), true ? __vite__mapDeps([227,1]) : void 0), "../components/Layout/AnnotatedSections.vue": () => __vitePreload(() => import("./AnnotatedSections.HFFcnPm1.js"), true ? __vite__mapDeps([228,1]) : void 0), "../components/Layout/OneColumn.vue": () => __vitePreload(() => import("./OneColumn.c5lMjnDI.js"), true ? __vite__mapDeps([229,1]) : void 0), "../components/Layout/ThreeColumnsEqual.vue": () => __vitePreload(() => import("./ThreeColumnsEqual.fhG04YZ9.js"), true ? __vite__mapDeps([230,1]) : void 0), "../components/Layout/TwoColumnsEqual.vue": () => __vitePreload(() => import("./TwoColumnsEqual.46fNDJH6.js"), true ? __vite__mapDeps([231,1]) : void 0), "../components/Layout/TwoColumnsPrimary.vue": () => __vitePreload(() => import("./TwoColumnsPrimary.eeYDbGWr.js"), true ? __vite__mapDeps([232,1]) : void 0), "../components/LegacyCard/Default.vue": () => __vitePreload(() => import("./Default.X-rJ6U3O.js"), true ? __vite__mapDeps([233,1]) : void 0), "../components/LegacyCard/LegacyCardWithAllElements.vue": () => __vitePreload(() => import("./LegacyCardWithAllElements.HkV85HdG.js"), true ? __vite__mapDeps([234,1]) : void 0), "../components/LegacyCard/LegacyCardWithCustomFooterActions.vue": () => __vitePreload(() => import("./LegacyCardWithCustomFooterActions.czY1q8i4.js"), true ? __vite__mapDeps([235,1]) : void 0), "../components/LegacyCard/LegacyCardWithCustomTitle.vue": () => __vitePreload(() => import("./LegacyCardWithCustomTitle.VXMxbqqU.js"), true ? __vite__mapDeps([236,1]) : void 0), "../components/LegacyCard/LegacyCardWithDestructiveAction.vue": () => __vitePreload(() => import("./LegacyCardWithDestructiveAction.hON_Hvol.js"), true ? __vite__mapDeps([237,1]) : void 0), "../components/LegacyCard/LegacyCardWithDestructiveFooterAction.vue": () => __vitePreload(() => import("./LegacyCardWithDestructiveFooterAction.AqnVDFyx.js"), true ? __vite__mapDeps([238,1]) : void 0), "../components/LegacyCard/LegacyCardWithFlushedSections.vue": () => __vitePreload(() => import("./LegacyCardWithFlushedSections.K5g6-85K.js"), true ? __vite__mapDeps([239,1]) : void 0), "../components/LegacyCard/LegacyCardWithFooterActions.vue": () => __vitePreload(() => import("./LegacyCardWithFooterActions.uoF5-AEe.js"), true ? __vite__mapDeps([240,1]) : void 0), "../components/LegacyCard/LegacyCardWithHeaderActions.vue": () => __vitePreload(() => import("./LegacyCardWithHeaderActions.D_EGjPTc.js"), true ? __vite__mapDeps([241,1]) : void 0), "../components/LegacyCard/LegacyCardWithMultipleFooterActions.vue": () => __vitePreload(() => import("./LegacyCardWithMultipleFooterActions.CwPSNZv-.js"), true ? __vite__mapDeps([242,1]) : void 0), "../components/LegacyCard/LegacyCardWithMultipleSections.vue": () => __vitePreload(() => import("./LegacyCardWithMultipleSections.qzyOLfEj.js"), true ? __vite__mapDeps([243,1]) : void 0), "../components/LegacyCard/LegacyCardWithMultipleTitledSections.vue": () => __vitePreload(() => import("./LegacyCardWithMultipleTitledSections.8CtSMBk-.js"), true ? __vite__mapDeps([244,1]) : void 0), "../components/LegacyCard/LegacyCardWithSectionsAndActions.vue": () => __vitePreload(() => import("./LegacyCardWithSectionsAndActions.EN2V7qRV.js"), true ? __vite__mapDeps([245,1]) : void 0), "../components/LegacyCard/LegacyCardWithSeparateHeader.vue": () => __vitePreload(() => import("./LegacyCardWithSeparateHeader.w3dG-lsX.js"), true ? __vite__mapDeps([246,1]) : void 0), "../components/LegacyCard/LegacyCardWithSubduedForSecondaryContent.vue": () => __vitePreload(() => import("./LegacyCardWithSubduedForSecondaryContent.VecD1pWk.js"), true ? __vite__mapDeps([247,1]) : void 0), "../components/LegacyCard/LegacyCardWithSubduedSection.vue": () => __vitePreload(() => import("./LegacyCardWithSubduedSection.tzwu5mpO.js"), true ? __vite__mapDeps([248,1]) : void 0), "../components/LegacyCard/LegacyCardWithSubsection.vue": () => __vitePreload(() => import("./LegacyCardWithSubsection.nxRqhsbD.js"), true ? __vite__mapDeps([249,1]) : void 0), "../components/LegacyStack/Default.vue": () => __vitePreload(() => import("./Default.W6Wz96CD.js"), true ? __vite__mapDeps([250,1]) : void 0), "../components/LegacyStack/FillEven.vue": () => __vitePreload(() => import("./FillEven.7eWvKON3.js"), true ? __vite__mapDeps([251,1]) : void 0), "../components/LegacyStack/FillSpace.vue": () => __vitePreload(() => import("./FillSpace.I2GEwbgf.js"), true ? __vite__mapDeps([252,1]) : void 0), "../components/LegacyStack/NonWrap.vue": () => __vitePreload(() => import("./NonWrap.9bxiJ5ED.js"), true ? __vite__mapDeps([253,1]) : void 0), "../components/LegacyStack/SingleItemFill.vue": () => __vitePreload(() => import("./SingleItemFill.GS9WxwfY.js"), true ? __vite__mapDeps([254,1]) : void 0), "../components/LegacyStack/Spacing.vue": () => __vitePreload(() => import("./Spacing.nDSC6WnW.js"), true ? __vite__mapDeps([255,1]) : void 0), "../components/LegacyStack/VerticalCenter.vue": () => __vitePreload(() => import("./VerticalCenter.3yHen2Oq.js"), true ? __vite__mapDeps([256,1]) : void 0), "../components/Link/Default.vue": () => __vitePreload(() => import("./Default.sKI5bO7F.js"), true ? __vite__mapDeps([257,1]) : void 0), "../components/Link/External.vue": () => __vitePreload(() => import("./External.GM1IHXun.js"), true ? __vite__mapDeps([258,1]) : void 0), "../components/Link/Monochrome.vue": () => __vitePreload(() => import("./Monochrome.f0CzLl3D.js"), true ? __vite__mapDeps([259,1]) : void 0), "../components/Link/MonochromeBanner.vue": () => __vitePreload(() => import("./MonochromeBanner.eWsuAHFP.js"), true ? __vite__mapDeps([260,1]) : void 0), "../components/List/ExtraTight.vue": () => __vitePreload(() => import("./ExtraTight.gOSmvLoy.js"), true ? __vite__mapDeps([261,1]) : void 0), "../components/List/ListBulleted.vue": () => __vitePreload(() => import("./ListBulleted.n-Zrv8Kv.js"), true ? __vite__mapDeps([262,1]) : void 0), "../components/List/ListNumber.vue": () => __vitePreload(() => import("./ListNumber.y5joGFWw.js"), true ? __vite__mapDeps([263,1]) : void 0), "../components/Listbox/Default.vue": () => __vitePreload(() => import("./Default.6-xhxY0B.js"), true ? __vite__mapDeps([264,1]) : void 0), "../components/Listbox/WithAction.vue": () => __vitePreload(() => import("./WithAction.TYZDbQGN.js"), true ? __vite__mapDeps([265,16,1]) : void 0), "../components/Listbox/WithCustomElement.vue": () => __vitePreload(() => import("./WithCustomElement.LHbbu-zw.js"), true ? __vite__mapDeps([266,1]) : void 0), "../components/Listbox/WithLoading.vue": () => __vitePreload(() => import("./WithLoading.RdBFbG1D.js"), true ? __vite__mapDeps([267,1]) : void 0), "../components/Listbox/WithSearch.vue": () => __vitePreload(() => import("./WithSearch.wU7B7l7h.js"), true ? __vite__mapDeps([268,1]) : void 0), "../components/MediaCard/Default.vue": () => __vitePreload(() => import("./Default.qoF3Hpcz.js"), true ? __vite__mapDeps([269,1]) : void 0), "../components/MediaCard/MediaCardPortraitVideoCard.vue": () => __vitePreload(() => import("./MediaCardPortraitVideoCard.TPjiPptQ.js"), true ? __vite__mapDeps([270,1]) : void 0), "../components/MediaCard/MediaCardVideoCard.vue": () => __vitePreload(() => import("./MediaCardVideoCard.d8kDV5qZ.js"), true ? __vite__mapDeps([271,1]) : void 0), "../components/MediaCard/MediaCardWithNoActions.vue": () => __vitePreload(() => import("./MediaCardWithNoActions.dkaKoiL0.js"), true ? __vite__mapDeps([272,1]) : void 0), "../components/MediaCard/MediaCardWithSecondaryAction.vue": () => __vitePreload(() => import("./MediaCardWithSecondaryAction.4R5mhyEn.js"), true ? __vite__mapDeps([273,1]) : void 0), "../components/MediaCard/MediaCardWithSmallVisual.vue": () => __vitePreload(() => import("./MediaCardWithSmallVisual.W021VHuB.js"), true ? __vite__mapDeps([274,1]) : void 0), "../components/Modal/Default.vue": () => __vitePreload(() => import("./Default.FDzCYSKv.js"), true ? __vite__mapDeps([275,1]) : void 0), "../components/Modal/Large.vue": () => __vitePreload(() => import("./Large.adzmcrhv.js"), true ? __vite__mapDeps([276,144,1]) : void 0), "../components/Modal/Small.vue": () => __vitePreload(() => import("./Small.WAei-xw_.js"), true ? __vite__mapDeps([277,144,1]) : void 0), "../components/Modal/WithDestructivePrimary.vue": () => __vitePreload(() => import("./WithDestructivePrimary.OK5vQ2N6.js"), true ? __vite__mapDeps([278,1]) : void 0), "../components/Modal/WithPrimary.vue": () => __vitePreload(() => import("./WithPrimary.0VSlBVHd.js"), true ? __vite__mapDeps([279,1]) : void 0), "../components/Modal/WithPrimaryAndSecondary.vue": () => __vitePreload(() => import("./WithPrimaryAndSecondary.l92WM3gu.js"), true ? __vite__mapDeps([280,1]) : void 0), "../components/Modal/WithScrollListener.vue": () => __vitePreload(() => import("./WithScrollListener.GlklQ5VA.js"), true ? __vite__mapDeps([281,1]) : void 0), "../components/Modal/WithoutTitle.vue": () => __vitePreload(() => import("./WithoutTitle._k3BTlRZ.js"), true ? __vite__mapDeps([282,1]) : void 0), "../components/OptionList/Default.vue": () => __vitePreload(() => import("./Default.NJrKA5bU.js"), true ? __vite__mapDeps([283,1]) : void 0), "../components/OptionList/InPopover.vue": () => __vitePreload(() => import("./InPopover.cATaJXRq.js"), true ? __vite__mapDeps([284,1]) : void 0), "../components/OptionList/Multiple.vue": () => __vitePreload(() => import("./Multiple.QwYqg0xJ.js"), true ? __vite__mapDeps([285,1]) : void 0), "../components/OptionList/WithSection.vue": () => __vitePreload(() => import("./WithSection.CUZ6v9DP.js"), true ? __vite__mapDeps([286,1]) : void 0), "../components/Page/Default.vue": () => __vitePreload(() => import("./Default.RUMrdTMk.js"), true ? __vite__mapDeps([287,1]) : void 0), "../components/Page/PageFullWidth.vue": () => __vitePreload(() => import("./PageFullWidth.h5qJPtz0.js"), true ? __vite__mapDeps([288,1]) : void 0), "../components/Page/PageNarrowWidth.vue": () => __vitePreload(() => import("./PageNarrowWidth.uugmZKRn.js"), true ? __vite__mapDeps([289,1]) : void 0), "../components/Page/PageWithActionGroups.vue": () => __vitePreload(() => import("./PageWithActionGroups.XNa_v2oh.js"), true ? __vite__mapDeps([290,1]) : void 0), "../components/Page/PageWithContentAfterTitle.vue": () => __vitePreload(() => import("./PageWithContentAfterTitle.DIBWpwZ7.js"), true ? __vite__mapDeps([291,1]) : void 0), "../components/Page/PageWithCustomPrimaryAction.vue": () => __vitePreload(() => import("./PageWithCustomPrimaryAction.lIuZTFXM.js"), true ? __vite__mapDeps([292,1]) : void 0), "../components/Page/PageWithCustomSecondaryAction.vue": () => __vitePreload(() => import("./PageWithCustomSecondaryAction.up4fVyxm.js"), true ? __vite__mapDeps([293,1]) : void 0), "../components/Page/PageWithDestructiveSecondaryAction.vue": () => __vitePreload(() => import("./PageWithDestructiveSecondaryAction.Z_YU5r5q.js"), true ? __vite__mapDeps([294,1]) : void 0), "../components/Page/PageWithExternalLink.vue": () => __vitePreload(() => import("./PageWithExternalLink.Xx4jsbOw.js"), true ? __vite__mapDeps([295,1]) : void 0), "../components/Page/PageWithSubtitle.vue": () => __vitePreload(() => import("./PageWithSubtitle.odwH0Z2I.js"), true ? __vite__mapDeps([296,1]) : void 0), "../components/Page/PageWithTooltipAction.vue": () => __vitePreload(() => import("./PageWithTooltipAction.dfP1Eqhp.js"), true ? __vite__mapDeps([297,1]) : void 0), "../components/Page/PageWithoutPagination.vue": () => __vitePreload(() => import("./PageWithoutPagination.y_xdzEQF.js"), true ? __vite__mapDeps([298,1]) : void 0), "../components/Page/PageWithoutPrimaryActionInHeader.vue": () => __vitePreload(() => import("./PageWithoutPrimaryActionInHeader.EpbTJBSe.js"), true ? __vite__mapDeps([299,1]) : void 0), "../components/PageActions/Default.vue": () => __vitePreload(() => import("./Default.Me4O4cj2.js"), true ? __vite__mapDeps([300,1]) : void 0), "../components/PageActions/WithCustomPrimaryAction.vue": () => __vitePreload(() => import("./WithCustomPrimaryAction.rsJDiawO.js"), true ? __vite__mapDeps([301,1]) : void 0), "../components/PageActions/WithCustomSecondaryAction.vue": () => __vitePreload(() => import("./WithCustomSecondaryAction.6FdbzSn4.js"), true ? __vite__mapDeps([302,1]) : void 0), "../components/PageActions/WithPrimaryOnly.vue": () => __vitePreload(() => import("./WithPrimaryOnly.8_ORcIby.js"), true ? __vite__mapDeps([303,1]) : void 0), "../components/Pagination/Default.vue": () => __vitePreload(() => import("./Default.7LOdzjVa.js"), true ? __vite__mapDeps([304,1]) : void 0), "../components/Pagination/Keyboard.vue": () => __vitePreload(() => import("./Keyboard.z_be2zss.js"), true ? __vite__mapDeps([305,1]) : void 0), "../components/Pagination/PaginationWithKeyboardNavigation.vue": () => __vitePreload(() => import("./PaginationWithKeyboardNavigation.dvCYgEcZ.js"), true ? __vite__mapDeps([306,1]) : void 0), "../components/Pagination/PaginationWithLabel.vue": () => __vitePreload(() => import("./PaginationWithLabel.gZeI7k-n.js"), true ? __vite__mapDeps([307,1]) : void 0), "../components/Pagination/PaginationWithTableType.vue": () => __vitePreload(() => import("./PaginationWithTableType.gPhBqkVc.js"), true ? __vite__mapDeps([308,1]) : void 0), "../components/Pagination/TableType.vue": () => __vitePreload(() => import("./TableType.GcVTQveG.js"), true ? __vite__mapDeps([309,1]) : void 0), "../components/Pagination/WithLabel.vue": () => __vitePreload(() => import("./WithLabel.nl5Ca3FI.js"), true ? __vite__mapDeps([310,1]) : void 0), "../components/Popover/WithActionList.vue": () => __vitePreload(() => import("./WithActionList.dxVx7IMO.js"), true ? __vite__mapDeps([311,1]) : void 0), "../components/Popover/WithContentAndActions.vue": () => __vitePreload(() => import("./WithContentAndActions.XZ7hBz-J.js"), true ? __vite__mapDeps([312,1]) : void 0), "../components/Popover/WithFormComponents.vue": () => __vitePreload(() => import("./WithFormComponents.mht_k5nO.js"), true ? __vite__mapDeps([313,1]) : void 0), "../components/ProgressBar/Default.vue": () => __vitePreload(() => import("./Default.US4hy8sz.js"), true ? __vite__mapDeps([314,1]) : void 0), "../components/ProgressBar/ProgressBarColored.vue": () => __vitePreload(() => import("./ProgressBarColored.P0rTcWj2.js"), true ? __vite__mapDeps([315,1]) : void 0), "../components/ProgressBar/ProgressBarNonAnimated.vue": () => __vitePreload(() => import("./ProgressBarNonAnimated.nGODjTn_.js"), true ? __vite__mapDeps([316,1]) : void 0), "../components/ProgressBar/ProgressBarSmall.vue": () => __vitePreload(() => import("./ProgressBarSmall.k3MLya5J.js"), true ? __vite__mapDeps([317,1]) : void 0), "../components/RadioButton/Default.vue": () => __vitePreload(() => import("./Default.qvI0sXLC.js"), true ? __vite__mapDeps([318,1]) : void 0), "../components/RangeSlider/Default.vue": () => __vitePreload(() => import("./Default.7Zg_cpi7.js"), true ? __vite__mapDeps([319,1]) : void 0), "../components/RangeSlider/MinMax.vue": () => __vitePreload(() => import("./MinMax.dAD6bBEM.js"), true ? __vite__mapDeps([320,1]) : void 0), "../components/RangeSlider/PrefixSuffix.vue": () => __vitePreload(() => import("./PrefixSuffix.PX--uGqh.js"), true ? __vite__mapDeps([321,1]) : void 0), "../components/RangeSlider/Steps.vue": () => __vitePreload(() => import("./Steps.YxvHkaSk.js"), true ? __vite__mapDeps([322,1]) : void 0), "../components/RangeSlider/WithDualThumb.vue": () => __vitePreload(() => import("./WithDualThumb.ld6Jsvc9.js"), true ? __vite__mapDeps([323,1]) : void 0), "../components/ResourceItem/Default.vue": () => __vitePreload(() => import("./Default.QYISRjVs.js"), true ? __vite__mapDeps([324,1]) : void 0), "../components/ResourceItem/VerticalAlign.vue": () => __vitePreload(() => import("./VerticalAlign.Eoq68U_q.js"), true ? __vite__mapDeps([325,1]) : void 0), "../components/ResourceItem/WithMedia.vue": () => __vitePreload(() => import("./WithMedia.IDfcE1DK.js"), true ? __vite__mapDeps([326,1]) : void 0), "../components/ResourceItem/WithShortcutActions.vue": () => __vitePreload(() => import("./WithShortcutActions.x0X3iLGN.js"), true ? __vite__mapDeps([327,1]) : void 0), "../components/ResourceList/AlternateTool.vue": () => __vitePreload(() => import("./AlternateTool.vyp0jUqz.js"), true ? __vite__mapDeps([328,1]) : void 0), "../components/ResourceList/CustomEmptySearchResultState.vue": () => __vitePreload(() => import("./CustomEmptySearchResultState.WTTd_pIM.js"), true ? __vite__mapDeps([329,1]) : void 0), "../components/ResourceList/Default.vue": () => __vitePreload(() => import("./Default.DnkOx-WB.js"), true ? __vite__mapDeps([330,1]) : void 0), "../components/ResourceList/ItemShortcutAction.vue": () => __vitePreload(() => import("./ItemShortcutAction.HbM-WT0c.js"), true ? __vite__mapDeps([331,1]) : void 0), "../components/ResourceList/Loading.vue": () => __vitePreload(() => import("./Loading.q5jTr74F.js"), true ? __vite__mapDeps([332,1]) : void 0), "../components/ResourceList/MultiSelect.vue": () => __vitePreload(() => import("./MultiSelect.ZkzOJxHm.js"), true ? __vite__mapDeps([333,1]) : void 0), "../components/ResourceList/PersistAction.vue": () => __vitePreload(() => import("./PersistAction.d9waI4HY.js"), true ? __vite__mapDeps([334,1]) : void 0), "../components/ResourceList/Sorting.vue": () => __vitePreload(() => import("./Sorting.5mxqwtpr.js"), true ? __vite__mapDeps([335,1]) : void 0), "../components/ResourceList/TotalCount.vue": () => __vitePreload(() => import("./TotalCount.qKGOT6rn.js"), true ? __vite__mapDeps([336,1]) : void 0), "../components/ResourceList/WithAllElements.vue": () => __vitePreload(() => import("./WithAllElements.VDEslLIy.js"), true ? __vite__mapDeps([337,1]) : void 0), "../components/ResourceList/WithBulkActions.vue": () => __vitePreload(() => import("./WithBulkActions.FDjfQT-J.js"), true ? __vite__mapDeps([338,1]) : void 0), "../components/ResourceList/WithEmptyState.vue": () => __vitePreload(() => import("./WithEmptyState.DobXeijj.js"), true ? __vite__mapDeps([339,1]) : void 0), "../components/ResourceList/WithFilter.vue": () => __vitePreload(() => import("./WithFilter.JVQdfQzz.js"), true ? __vite__mapDeps([340,1]) : void 0), "../components/ResourceList/WithPagination.vue": () => __vitePreload(() => import("./WithPagination.DQtSKVeq.js"), true ? __vite__mapDeps([341,1]) : void 0), "../components/ResourceList/WithSectionsAndNoBulkActions.vue": () => __vitePreload(() => import("./WithSectionsAndNoBulkActions.BXUwpCb6.js"), true ? __vite__mapDeps([342,1]) : void 0), "../components/Scrollable/Default.vue": () => __vitePreload(() => import("./Default.vGTxoNwb.js"), true ? __vite__mapDeps([343,1]) : void 0), "../components/Scrollable/ToChild.vue": () => __vitePreload(() => import("./ToChild.ahCLzuWO.js"), true ? __vite__mapDeps([344,1]) : void 0), "../components/Scrollable/WithGutter.vue": () => __vitePreload(() => import("./WithGutter.G4CYXZVT.js"), true ? __vite__mapDeps([345,1]) : void 0), "../components/Select/Default.vue": () => __vitePreload(() => import("./Default.LEz2RZax.js"), true ? __vite__mapDeps([346,1]) : void 0), "../components/Select/Disabled.vue": () => __vitePreload(() => import("./Disabled.p_CFgMKA.js"), true ? __vite__mapDeps([347,1]) : void 0), "../components/Select/InlineLabel.vue": () => __vitePreload(() => import("./InlineLabel.E9JmoNn3.js"), true ? __vite__mapDeps([348,1]) : void 0), "../components/Select/SeparateValidationError.vue": () => __vitePreload(() => import("./SeparateValidationError.a_GKLAR5.js"), true ? __vite__mapDeps([349,1]) : void 0), "../components/Select/ValidationError.vue": () => __vitePreload(() => import("./ValidationError.ZEnOFBQo.js"), true ? __vite__mapDeps([350,1]) : void 0), "../components/Select/WithPrefix.vue": () => __vitePreload(() => import("./WithPrefix.F-Sqlm5N.js"), true ? __vite__mapDeps([351,1]) : void 0), "../components/SkeletonBodyText/Default.vue": () => __vitePreload(() => import("./Default.M0m9r6Tz.js"), true ? __vite__mapDeps([352,1]) : void 0), "../components/SkeletonBodyText/SkeletonBodyTextSingleLineContent.vue": () => __vitePreload(() => import("./SkeletonBodyTextSingleLineContent.MtHXZrcY.js"), true ? __vite__mapDeps([353,1]) : void 0), "../components/SkeletonDisplayText/Default.vue": () => __vitePreload(() => import("./Default.R61rVjuU.js"), true ? __vite__mapDeps([354,1]) : void 0), "../components/SkeletonDisplayText/SkeletonDisplayTextExtraLarge.vue": () => __vitePreload(() => import("./SkeletonDisplayTextExtraLarge.j6rDLPM8.js"), true ? __vite__mapDeps([355,1]) : void 0), "../components/SkeletonDisplayText/SkeletonDisplayTextSmall.vue": () => __vitePreload(() => import("./SkeletonDisplayTextSmall.1W1l96jD.js"), true ? __vite__mapDeps([356,1]) : void 0), "../components/SkeletonPage/Default.vue": () => __vitePreload(() => import("./Default.6DS9fIsE.js"), true ? __vite__mapDeps([357,1]) : void 0), "../components/SkeletonPage/SkeletonPageWithStaticContent.vue": () => __vitePreload(() => import("./SkeletonPageWithStaticContent._fQO8gyU.js"), true ? __vite__mapDeps([358,1]) : void 0), "../components/SkeletonTabs/Default.vue": () => __vitePreload(() => import("./Default.5J_ytxZ7.js"), true ? __vite__mapDeps([359,1]) : void 0), "../components/SkeletonTabs/SkeletonTabsFitted.vue": () => __vitePreload(() => import("./SkeletonTabsFitted.EzlC5Hcm.js"), true ? __vite__mapDeps([360,1]) : void 0), "../components/SkeletonTabs/SkeletonTabsWithCustomCount.vue": () => __vitePreload(() => import("./SkeletonTabsWithCustomCount.Znx09jjS.js"), true ? __vite__mapDeps([361,1]) : void 0), "../components/SkeletonThumbnail/Default.vue": () => __vitePreload(() => import("./Default.7huvqzTx.js"), true ? __vite__mapDeps([362,1]) : void 0), "../components/SkeletonThumbnail/SkeletonThumbnailExtraSmall.vue": () => __vitePreload(() => import("./SkeletonThumbnailExtraSmall.cmk5t_NN.js"), true ? __vite__mapDeps([363,1]) : void 0), "../components/SkeletonThumbnail/SkeletonThumbnailLarge.vue": () => __vitePreload(() => import("./SkeletonThumbnailLarge.XPzRV0OL.js"), true ? __vite__mapDeps([364,1]) : void 0), "../components/SkeletonThumbnail/SkeletonThumbnailSmall.vue": () => __vitePreload(() => import("./SkeletonThumbnailSmall.c7tSYbPM.js"), true ? __vite__mapDeps([365,1]) : void 0), "../components/Spinner/Default.vue": () => __vitePreload(() => import("./Default.D4r1xanP.js"), true ? __vite__mapDeps([366,1]) : void 0), "../components/Spinner/FocusManagement.vue": () => __vitePreload(() => import("./FocusManagement.U-wC2FDI.js"), true ? __vite__mapDeps([367,1]) : void 0), "../components/Spinner/Small.vue": () => __vitePreload(() => import("./Small.d1YwL9b2.js"), true ? __vite__mapDeps([368,1]) : void 0), "../components/Tabs/Default.vue": () => __vitePreload(() => import("./Default.xNs9Oi7E.js"), true ? __vite__mapDeps([369,1]) : void 0), "../components/Tabs/TabWithBadgeContent.vue": () => __vitePreload(() => import("./TabWithBadgeContent.BnXMdlZK.js"), true ? __vite__mapDeps([370,1]) : void 0), "../components/Tabs/TabWithCustomDisclosure.vue": () => __vitePreload(() => import("./TabWithCustomDisclosure.kMVQfn-u.js"), true ? __vite__mapDeps([371,1]) : void 0), "../components/Tabs/TabsFitted.vue": () => __vitePreload(() => import("./TabsFitted.rL8jYmlZ.js"), true ? __vite__mapDeps([372,1]) : void 0), "../components/Tabs/TabsInsideCard.vue": () => __vitePreload(() => import("./TabsInsideCard.zkk6ATMk.js"), true ? __vite__mapDeps([373,1]) : void 0), "../components/Tabs/TabsWithActions.vue": () => __vitePreload(() => import("./TabsWithActions.xSEs8JfK.js"), true ? __vite__mapDeps([374,1]) : void 0), "../components/Tag/Clickable.vue": () => __vitePreload(() => import("./Clickable.grPPEuQG.js"), true ? __vite__mapDeps([375,1]) : void 0), "../components/Tag/CustomContent.vue": () => __vitePreload(() => import("./CustomContent.5nxzJZS2.js"), true ? __vite__mapDeps([376,1]) : void 0), "../components/Tag/Default.vue": () => __vitePreload(() => import("./Default.EImNO4uG.js"), true ? __vite__mapDeps([377,1]) : void 0), "../components/Tag/Removable.vue": () => __vitePreload(() => import("./Removable.HzOI9d7n.js"), true ? __vite__mapDeps([378,1]) : void 0), "../components/Tag/RemovableLarge.vue": () => __vitePreload(() => import("./RemovableLarge.aPM0jh1K.js"), true ? __vite__mapDeps([379,1]) : void 0), "../components/Tag/RemovableWithLink.vue": () => __vitePreload(() => import("./RemovableWithLink.w4yFo5fL.js"), true ? __vite__mapDeps([380,1]) : void 0), "../components/Tag/WithLink.vue": () => __vitePreload(() => import("./WithLink.qw2p1Gqa.js"), true ? __vite__mapDeps([381,1]) : void 0), "../components/Text/Align.vue": () => __vitePreload(() => import("./Align.HFHpmsGk.js"), true ? __vite__mapDeps([382,1]) : void 0), "../components/Text/Body.vue": () => __vitePreload(() => import("./Body.VPp8QhES.js"), true ? __vite__mapDeps([383,1]) : void 0), "../components/Text/Decoration.vue": () => __vitePreload(() => import("./Decoration.h5IR4gWm.js"), true ? __vite__mapDeps([384,1]) : void 0), "../components/Text/Heading.vue": () => __vitePreload(() => import("./Heading.JZYGLryO.js"), true ? __vite__mapDeps([385,1]) : void 0), "../components/Text/Inheritance.vue": () => __vitePreload(() => import("./Inheritance.vrVNAaLJ.js"), true ? __vite__mapDeps([386,1]) : void 0), "../components/Text/Tone.vue": () => __vitePreload(() => import("./Tone.h4aogG4Q.js"), true ? __vite__mapDeps([387,1]) : void 0), "../components/Text/Weight.vue": () => __vitePreload(() => import("./Weight.hvENJIWY.js"), true ? __vite__mapDeps([388,1]) : void 0), "../components/TextContainer/Default.vue": () => __vitePreload(() => import("./Default.smBvE9vg.js"), true ? __vite__mapDeps([389,1]) : void 0), "../components/TextContainer/TextContainerLoose.vue": () => __vitePreload(() => import("./TextContainerLoose.QhJJpygz.js"), true ? __vite__mapDeps([390,1]) : void 0), "../components/TextContainer/TextContainerTight.vue": () => __vitePreload(() => import("./TextContainerTight.if70ArQk.js"), true ? __vite__mapDeps([391,1]) : void 0), "../components/TextField/AutoSize.vue": () => __vitePreload(() => import("./AutoSize.9oDCNNvk.js"), true ? __vite__mapDeps([392,1]) : void 0), "../components/TextField/AutoSizeDynamicSuffix.vue": () => __vitePreload(() => import("./AutoSizeDynamicSuffix.mLEj4sZ2.js"), true ? __vite__mapDeps([393,1]) : void 0), "../components/TextField/CharacterCount.vue": () => __vitePreload(() => import("./CharacterCount.39HBrKbY.js"), true ? __vite__mapDeps([394,1]) : void 0), "../components/TextField/ClearButton.vue": () => __vitePreload(() => import("./ClearButton.2SfuD0lo.js"), true ? __vite__mapDeps([395,1]) : void 0), "../components/TextField/ConnectedFields.vue": () => __vitePreload(() => import("./ConnectedFields.Gj1Qxitu.js"), true ? __vite__mapDeps([396,1]) : void 0), "../components/TextField/Default.vue": () => __vitePreload(() => import("./Default.1xXUdyxa.js"), true ? __vite__mapDeps([397,1]) : void 0), "../components/TextField/Disabled.vue": () => __vitePreload(() => import("./Disabled.TMdBvu4p.js"), true ? __vite__mapDeps([398,1]) : void 0), "../components/TextField/Email.vue": () => __vitePreload(() => import("./Email.TiqNV63I.js"), true ? __vite__mapDeps([399,1]) : void 0), "../components/TextField/HelpText.vue": () => __vitePreload(() => import("./HelpText.93xNqd4_.js"), true ? __vite__mapDeps([400,1]) : void 0), "../components/TextField/HiddenLabel.vue": () => __vitePreload(() => import("./HiddenLabel.nkg77OH0.js"), true ? __vite__mapDeps([401,1]) : void 0), "../components/TextField/InlineSuggestion.vue": () => __vitePreload(() => import("./InlineSuggestion.DuZuhnU1.js"), true ? __vite__mapDeps([402,1]) : void 0), "../components/TextField/LabelAction.vue": () => __vitePreload(() => import("./LabelAction.qqZmB66n.js"), true ? __vite__mapDeps([403,1]) : void 0), "../components/TextField/MonospacedFont.vue": () => __vitePreload(() => import("./MonospacedFont.VSmJ5DAL.js"), true ? __vite__mapDeps([404,1]) : void 0), "../components/TextField/Multiline.vue": () => __vitePreload(() => import("./Multiline.FlW-gLJw.js"), true ? __vite__mapDeps([405,1]) : void 0), "../components/TextField/Number.vue": () => __vitePreload(() => import("./Number.dD4zJsNX.js"), true ? __vite__mapDeps([406,1]) : void 0), "../components/TextField/PlaceholderText.vue": () => __vitePreload(() => import("./PlaceholderText.1j-USpUm.js"), true ? __vite__mapDeps([407,1]) : void 0), "../components/TextField/PrefixSuffix.vue": () => __vitePreload(() => import("./PrefixSuffix.NNj2KrBM.js"), true ? __vite__mapDeps([408,1]) : void 0), "../components/TextField/RightAlignText.vue": () => __vitePreload(() => import("./RightAlignText.a8aV8VTK.js"), true ? __vite__mapDeps([409,1]) : void 0), "../components/TextField/SeparateValidationError.vue": () => __vitePreload(() => import("./SeparateValidationError.sgcrb6hs.js"), true ? __vite__mapDeps([410,1]) : void 0), "../components/TextField/ValidationError.vue": () => __vitePreload(() => import("./ValidationError.Xde40-xa.js"), true ? __vite__mapDeps([411,1]) : void 0), "../components/TextField/ValueSelectedOnFocus.vue": () => __vitePreload(() => import("./ValueSelectedOnFocus.Z-fyT4gX.js"), true ? __vite__mapDeps([412,1]) : void 0), "../components/TextField/VerticalContent.vue": () => __vitePreload(() => import("./VerticalContent.EjIKJ7sW.js"), true ? __vite__mapDeps([413,1]) : void 0), "../components/TextField/WithLoading.vue": () => __vitePreload(() => import("./WithLoading.FVaphpcj.js"), true ? __vite__mapDeps([414,1]) : void 0), "../components/Thumbnail/Default.vue": () => __vitePreload(() => import("./Default.8ioOvWQO.js"), true ? __vite__mapDeps([415,1]) : void 0), "../components/Thumbnail/ThumbnailExtraSmall.vue": () => __vitePreload(() => import("./ThumbnailExtraSmall.Jlkdxh1W.js"), true ? __vite__mapDeps([416,1]) : void 0), "../components/Thumbnail/ThumbnailLarge.vue": () => __vitePreload(() => import("./ThumbnailLarge.qIzGKMAO.js"), true ? __vite__mapDeps([417,1]) : void 0), "../components/Thumbnail/ThumbnailSmall.vue": () => __vitePreload(() => import("./ThumbnailSmall.3RMqnM2U.js"), true ? __vite__mapDeps([418,1]) : void 0), "../components/Thumbnail/ThumbnailWithComponentSource.vue": () => __vitePreload(() => import("./ThumbnailWithComponentSource.iNHMaWS0.js"), true ? __vite__mapDeps([419,144,1]) : void 0), "../components/Tooltip/ChildInteract.vue": () => __vitePreload(() => import("./ChildInteract.xZcNZa1J.js"), true ? __vite__mapDeps([420,1]) : void 0), "../components/Tooltip/Default.vue": () => __vitePreload(() => import("./Default.WSWYbwDa.js"), true ? __vite__mapDeps([421,1]) : void 0), "../components/Tooltip/PersistentOnClick.vue": () => __vitePreload(() => import("./PersistentOnClick.gcIXasdC.js"), true ? __vite__mapDeps([422,1]) : void 0), "../components/Tooltip/Suffix.vue": () => __vitePreload(() => import("./Suffix.Myb8MWam.js"), true ? __vite__mapDeps([423,1]) : void 0), "../components/VideoThumbnail/Default.vue": () => __vitePreload(() => import("./Default.W-O4eWfi.js"), true ? __vite__mapDeps([424,1]) : void 0), "../components/VideoThumbnail/VideoThumbnailWithProgress.vue": () => __vitePreload(() => import("./VideoThumbnailWithProgress.MMSJr0qs.js"), true ? __vite__mapDeps([425,1]) : void 0) }), `../components/${(_a2 = params.value) == null ? void 0 : _a2.component}/${(_b = params.value) == null ? void 0 : _b.example}.vue`);
      }
    );
    const wrappedComponent = () => {
      return h(
        resolveComponent("AppProvider"),
        { i18n: lang },
        () => h(exampleComponent)
      );
    };
    const router = createRouter({
      history: createWebHistory(),
      routes: [
        {
          path: "/preview/:example",
          component: {}
        }
      ]
    });
    onMounted(() => {
      setTimeout(() => {
        const app = createApp(
          isAppProvider ? exampleComponent : wrappedComponent
        );
        app.use(router);
        app.use(PolarisVue);
        app.mount("#preview");
      }, 400);
      document.documentElement.classList.add("example-preview");
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, _hoisted_3);
    };
  }
});
export {
  ArrowDownIcon as A,
  ChevronRightIcon as C,
  DeleteIcon as D,
  EditIcon as E,
  IndexFiltersMode as I,
  PlusIcon as P,
  SearchIcon as S,
  _sfc_main as _,
  DuplicateIcon as a,
  ChevronDownIcon as b,
  SelectionType as c,
  _sfc_main$e as d,
  useBreakpoints as u
};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/chunks/Default.oWf_xsiP.js","assets/chunks/framework.2IsXxFXf.js","assets/chunks/InPopover.hgEGQT-K.js","assets/chunks/WithDestructive.49rOhE_N.js","assets/chunks/ImportIcon.mTRnASI-.js","assets/chunks/WithHelpText.Lqnb2gSg.js","assets/chunks/WithIconAndSuffix.5f3KoZOB.js","assets/chunks/WithIconOrImage.0Rv4sbnc.js","assets/chunks/WithPrefix.MZGujmzy.js","assets/chunks/WithSections.LjCNZ6SN.js","assets/chunks/Default.ELN26UG-.js","assets/chunks/I18n.uWUzldpn.js","assets/chunks/Default.mCCEqM4P.js","assets/chunks/MultipleSections.Ua-oOy0r.js","assets/chunks/MultipleTags.MjXfs-JQ.js","assets/chunks/WithAction.KZPW16aS.js","assets/chunks/PlusCircleIcon.lacase-5.js","assets/chunks/WithDestructiveAction.TYtRRFoU.js","assets/chunks/WithEmptyState.xAn1pjwY.js","assets/chunks/WithLazyLoading.iyaySvmm.js","assets/chunks/WithLoading.w23_LlmW.js","assets/chunks/WithWrappingAction.gVnAmuQl.js","assets/chunks/Default.PpNHCuEv.js","assets/chunks/ExtraSmall.CxaNi-gL.js","assets/chunks/Initial.hNr0XFpg.js","assets/chunks/Attention.tPTR6hPi.js","assets/chunks/Complete.6Q4qL1Yz.js","assets/chunks/Critical.FfX9vBhw.js","assets/chunks/Default.QDvSyH6t.js","assets/chunks/Incomplete.pNFyRIZo.js","assets/chunks/Info.RhM1iR2s.js","assets/chunks/Partially.FIVelWmB.js","assets/chunks/Small.pyxYwyQs.js","assets/chunks/Success.KVmO39IU.js","assets/chunks/Warning.ODEz3N8y.js","assets/chunks/WithOverride.hhtgOt5n.js","assets/chunks/BannerCritical.PO0whPJk.js","assets/chunks/BannerDismissible.wV38yEmq.js","assets/chunks/BannerInCard.ohKu-JHS.js","assets/chunks/BannerInformational.EqW7aP7s.js","assets/chunks/BannerSuccess.3SamhSVs.js","assets/chunks/BannerWarning.i5yQEFt-.js","assets/chunks/BannerWithFocus.BsLkrOQ_.js","assets/chunks/BannerWithFooterCallToAction.H232bM1m.js","assets/chunks/Default.jb-pK555.js","assets/chunks/Default.QRiSpwZA.js","assets/chunks/Direction.slFOsvL8.js","assets/chunks/PreviewPlaceholder.vue_vue_type_script_setup_true_lang.vRgAopcA.js","assets/chunks/PreviewPlaceholder.g_bHMiSg.js","assets/chunks/Vertical.CYSqjMEd.js","assets/chunks/Align.3Omqz4Na.js","assets/chunks/PreviewPlaceholder.vue_vue_type_script_setup_true_lang.2rZPG7hC.js","assets/chunks/Gap.F62co9Ok.js","assets/chunks/InlineAlign.PQp7PuJZ.js","assets/chunks/PreviewPlaceholder.Z8JKeTHh.js","assets/chunks/Border.ziqxgis_.js","assets/chunks/BorderRadius.gJCgqVv8.js","assets/chunks/Color.Y8C_biFI.js","assets/chunks/Padding.RWpHVl6a.js","assets/chunks/Placeholder.vue_vue_type_script_setup_true_lang.rXNTqkej.js","assets/chunks/Placeholder.x2DSnaTi.js","assets/chunks/Shadow.N1F3rbjQ.js","assets/chunks/Default.HmhCwiRN.js","assets/chunks/Disabled.EIJvQ8qs.js","assets/chunks/FullWidth.qqff0ZiT.js","assets/chunks/IconOnly.GfnNzN7D.js","assets/chunks/Large.cWN0hp-R.js","assets/chunks/Loading.KH8I1o5D.js","assets/chunks/Plain.7_eygy-L.js","assets/chunks/PlainCritical.0cWpB3sn.js","assets/chunks/PlainDisclosure._E4BvD9g.js","assets/chunks/Pressed.6mhlkuJH.js","assets/chunks/Primary.kUBFZkx7.js","assets/chunks/PrimaryCritical.sb_pOst8.js","assets/chunks/RightAlignedDisclosure.JZ_GJfRJ.js","assets/chunks/SelectDisclosure.MYgGwYl8.js","assets/chunks/Split.SoL14X_8.js","assets/chunks/Tertiary.IBPE0CFB.js","assets/chunks/TextAligned.4J5p_7DQ.js","assets/chunks/WithIcon.zPKpLxE-.js","assets/chunks/Default.5fLo0RVt.js","assets/chunks/Pressed.qGHXVI-l.js","assets/chunks/Segmented.Xgv6spJ_.js","assets/chunks/CalloutCardDismissable.dKB5S1GX.js","assets/chunks/CalloutCardWithSecondaryAction.UnL93k-z.js","assets/chunks/Default.E3NtbNC7.js","assets/chunks/WithIconableActions.-mdOFyDV.js","assets/chunks/AllElement.9mSYgEVN.js","assets/chunks/Background.d-nI68DS.js","assets/chunks/CriticalFooterAction.xvIzcUu2.js","assets/chunks/Default.-o-rYzqU.js","assets/chunks/FlushedSection.9xIlC4-O.js","assets/chunks/MultipleSection.tc08Vujk.js","assets/chunks/MultipleTitledSection.ox5PwVpF.js","assets/chunks/ResponsiveBorderRadius.IVaidNuP.js","assets/chunks/SectionAndAction.xDHd6quu.js","assets/chunks/SectionAndCriticalAction.2wXkAYq5.js","assets/chunks/SubduedSection.QDbK2R2N.js","assets/chunks/Subsection.1J-mDGGo.js","assets/chunks/VaryingPadding.QDqvv05G.js","assets/chunks/WithCustomFooterAction.i9OvUngP.js","assets/chunks/WithFooterAction.qY39sD7M.js","assets/chunks/WithHeaderAction.un5-9xuA.js","assets/chunks/WithMultipleFooterAction.RuaTT06f.js","assets/chunks/WithSection.YX3aM1pF.js","assets/chunks/WithSeparateHeader.u1uj5Xax.js","assets/chunks/Default.ciCbAfmp.js","assets/chunks/ChildrenContent.KhbnJwna.js","assets/chunks/Default.4MQB9u3-.js","assets/chunks/DynamicChildrenContent.MkGWKpcm.js","assets/chunks/MultiChoice.RUD50-os.js","assets/chunks/WithError.ddF8FHJ4.js","assets/chunks/Default.KePa9I8m.js","assets/chunks/Default.9R7NYuv8.js","assets/chunks/FullWidth.Wv1jXp7-.js","assets/chunks/HexValue.q6NGArXo.js","assets/chunks/RgbValue.yR6RjBVh.js","assets/chunks/Transparent.xPZigkPP.js","assets/chunks/Default.58akC258.js","assets/chunks/ManualSelection.0VL4bJzd.js","assets/chunks/MultiSelect.ORtRyPwz.js","assets/chunks/MultiSelectAndManualSelection.cMvokMlp.js","assets/chunks/MultiSelectAndVerticalContent.dKd2_scF.js","assets/chunks/WithLoading.KbhdQ1nX.js","assets/chunks/AllElements.ZywZc9MY.js","assets/chunks/Default.UtloQBU7.js","assets/chunks/Sortable._-GBP6Tn.js","assets/chunks/StickyHeader.FC6M5K1H.js","assets/chunks/WithCustomTotalsHeading.iBJDrOjX.js","assets/chunks/WithFixedFirstColumns.cN6A64Mk.js","assets/chunks/WithFooter.cHgojxEW.js","assets/chunks/WithPagination.1-z-Gmnq.js","assets/chunks/WithRowHeadingLinks.RB3MXnV6.js","assets/chunks/WithTotalsInFooter.qRAtcUn8.js","assets/chunks/ZebraStriping.pQO-iUvX.js","assets/chunks/Default.QiaWmDrk.js","assets/chunks/MultiMonthRanged.qTv2nsVB.js","assets/chunks/Ranged.MvJz1kJk.js","assets/chunks/WithDisabledDates.mt-YMCsK.js","assets/chunks/WithSpecificDisabledDates.-bT3GWDZ.js","assets/chunks/Default.yay1MJUs.js","assets/chunks/Default.S-0F5unh.js","assets/chunks/AcceptsSvgOnly.b0xkkkaG.js","assets/chunks/CustomFileDialogTrigger.dKG3RNUF.js","assets/chunks/NoteIcon.w_L7rheI.js","assets/chunks/CustomFileUploadText.Ku5uO0ez.js","assets/chunks/Default.IW9w5V6k.js","assets/chunks/MediumSized.Vi57JzH5.js","assets/chunks/Nested.pv1582E3.js","assets/chunks/SmallSized.GCoOpByX.js","assets/chunks/WithDropOnPage.DSZEfgg7.js","assets/chunks/WithImageUpload.0qWaYLQV.js","assets/chunks/WithLabel.rD7OfOvn.js","assets/chunks/WithSingleUpload.XmAvXZCE.js","assets/chunks/Default.k0ZvraM0.js","assets/chunks/FullWidthLayout.-C4V0teA.js","assets/chunks/WithSubduedFooterContent.mjgLO-3P.js","assets/chunks/Default.PAWVekgO.js","assets/chunks/Disabled.iJwUMuTL.js","assets/chunks/SomeDisabled.otc47VbY.js","assets/chunks/WithAdditionalFilterSections.lXb4Xpq1.js","assets/chunks/WithChildrenContent.r-Lna_VZ.js","assets/chunks/WithDataTable.fNZM30Ew.js","assets/chunks/WithFilterBarHidden.vSer9tyF.js","assets/chunks/WithQueryFieldDisabled.SbsuTLam.js","assets/chunks/WithQueryFieldHidden.n457zUZD.js","assets/chunks/WithResourceList.U0N7kgbo.js","assets/chunks/Default.t9hNtAuX.js","assets/chunks/FormSubmit.VY64lUmP.js","assets/chunks/WithoutValidation.8SFsNmvQ.js","assets/chunks/CondensedFieldGroup.Bk5tlvJ3.js","assets/chunks/Default.-Hsysdzo.js","assets/chunks/FieldGroup.Z6BIVwPD.js","assets/chunks/NoChildren.-KEYy8Y4.js","assets/chunks/WithChildren.HyQLywBf.js","assets/chunks/CustomLayout.TrYRto7i.js","assets/chunks/ThreeOneThirdColumn.jYJzht3d.js","assets/chunks/TwoColumn.mhCZPkPE.js","assets/chunks/TwoThirdColumn.y4QkIigq.js","assets/chunks/Colored.DiKJToVg.js","assets/chunks/CustomSvg.tohhxFhI.js","assets/chunks/CustomSvgColor.nIY2oCdG.js","assets/chunks/Default._QYuihWP.js","assets/chunks/Default.T9qx-qLB.js","assets/chunks/useIndexResourceState.7iLFTXn6.js","assets/chunks/Disabled.osqqUMPX.js","assets/chunks/FilteringMode.WHLEWuCe.js","assets/chunks/WithNoFilters.sLIlMZkY.js","assets/chunks/WithNoSearchOrFilters.GuF9HxgX.js","assets/chunks/WithPinned.4Ldx8T1X.js","assets/chunks/Default.LW5HhECF.js","assets/chunks/SmallScreen.IUdgTFdL.js","assets/chunks/SmallScreenWithElements.SZxsvZwg.js","assets/chunks/useSetIndexFiltersMode._QFHLlEv.js","assets/chunks/WithBulkActions.Mcya4pis.js","assets/chunks/WithBulkActionsAndSelectionAcrossPages.uUyYkZjP.js","assets/chunks/WithDisabledRows.SFbUrM7k.js","assets/chunks/WithEditColumns.IiCOGo4K.js","assets/chunks/WithEmptyState.koeWIUE9.js","assets/chunks/WithFiltering.BLsOimwM.js","assets/chunks/WithLoadingState.bbLtEGEW.js","assets/chunks/WithMultipleBulkActions.R9zHcc3d.js","assets/chunks/WithNestedRows.tK1GWFTy.js","assets/chunks/WithPagination.VfcPvh62.js","assets/chunks/WithPaginationAndBulkActions.bxuMXIHB.js","assets/chunks/WithRowNavigationLink.wUIbMPHa.js","assets/chunks/WithSelectionNoBulkActions.LT2tasUy.js","assets/chunks/WithStickyLastColumn.ondcpm2D.js","assets/chunks/WithStickyScrollBar.Wpoxnu8M.js","assets/chunks/WithSubheaders.yF3-OpV7.js","assets/chunks/WithViewsSearchFilterSort.x-Vsu211.js","assets/chunks/WithoutCheckboxes.18V3cAnG.js","assets/chunks/Default.ZkQMIHKd.js","assets/chunks/ColumnNumber.BXXYb8Ue.js","assets/chunks/PreviewPlaceholder.vue_vue_type_script_setup_true_lang.Dg-lM3wP.js","assets/chunks/ColumnWidth.Nyy0-XqC.js","assets/chunks/Gap.qVMxVd8c.js","assets/chunks/PreviewPlaceholder.2nGoIS2P.js","assets/chunks/Align.50BBJP6k.js","assets/chunks/PreviewPlaceholder.vue_vue_type_script_setup_true_lang.NklbSLTc.js","assets/chunks/BlockAlign.lo9rYgtY.js","assets/chunks/Gap.r-8Wgkrf.js","assets/chunks/NonWrapping.ZGl0Nmc7.js","assets/chunks/PreviewPlaceholder.cLcNRks2.js","assets/chunks/WithDirection.W_oCjhVD.js","assets/chunks/Default.p-3CXo3i.js","assets/chunks/Annotated.QGxOdt0-.js","assets/chunks/AnnotatedBanner.SP31E57J.js","assets/chunks/AnnotatedSections.HFFcnPm1.js","assets/chunks/OneColumn.c5lMjnDI.js","assets/chunks/ThreeColumnsEqual.fhG04YZ9.js","assets/chunks/TwoColumnsEqual.46fNDJH6.js","assets/chunks/TwoColumnsPrimary.eeYDbGWr.js","assets/chunks/Default.X-rJ6U3O.js","assets/chunks/LegacyCardWithAllElements.HkV85HdG.js","assets/chunks/LegacyCardWithCustomFooterActions.czY1q8i4.js","assets/chunks/LegacyCardWithCustomTitle.VXMxbqqU.js","assets/chunks/LegacyCardWithDestructiveAction.hON_Hvol.js","assets/chunks/LegacyCardWithDestructiveFooterAction.AqnVDFyx.js","assets/chunks/LegacyCardWithFlushedSections.K5g6-85K.js","assets/chunks/LegacyCardWithFooterActions.uoF5-AEe.js","assets/chunks/LegacyCardWithHeaderActions.D_EGjPTc.js","assets/chunks/LegacyCardWithMultipleFooterActions.CwPSNZv-.js","assets/chunks/LegacyCardWithMultipleSections.qzyOLfEj.js","assets/chunks/LegacyCardWithMultipleTitledSections.8CtSMBk-.js","assets/chunks/LegacyCardWithSectionsAndActions.EN2V7qRV.js","assets/chunks/LegacyCardWithSeparateHeader.w3dG-lsX.js","assets/chunks/LegacyCardWithSubduedForSecondaryContent.VecD1pWk.js","assets/chunks/LegacyCardWithSubduedSection.tzwu5mpO.js","assets/chunks/LegacyCardWithSubsection.nxRqhsbD.js","assets/chunks/Default.W6Wz96CD.js","assets/chunks/FillEven.7eWvKON3.js","assets/chunks/FillSpace.I2GEwbgf.js","assets/chunks/NonWrap.9bxiJ5ED.js","assets/chunks/SingleItemFill.GS9WxwfY.js","assets/chunks/Spacing.nDSC6WnW.js","assets/chunks/VerticalCenter.3yHen2Oq.js","assets/chunks/Default.sKI5bO7F.js","assets/chunks/External.GM1IHXun.js","assets/chunks/Monochrome.f0CzLl3D.js","assets/chunks/MonochromeBanner.eWsuAHFP.js","assets/chunks/ExtraTight.gOSmvLoy.js","assets/chunks/ListBulleted.n-Zrv8Kv.js","assets/chunks/ListNumber.y5joGFWw.js","assets/chunks/Default.6-xhxY0B.js","assets/chunks/WithAction.TYZDbQGN.js","assets/chunks/WithCustomElement.LHbbu-zw.js","assets/chunks/WithLoading.RdBFbG1D.js","assets/chunks/WithSearch.wU7B7l7h.js","assets/chunks/Default.qoF3Hpcz.js","assets/chunks/MediaCardPortraitVideoCard.TPjiPptQ.js","assets/chunks/MediaCardVideoCard.d8kDV5qZ.js","assets/chunks/MediaCardWithNoActions.dkaKoiL0.js","assets/chunks/MediaCardWithSecondaryAction.4R5mhyEn.js","assets/chunks/MediaCardWithSmallVisual.W021VHuB.js","assets/chunks/Default.FDzCYSKv.js","assets/chunks/Large.adzmcrhv.js","assets/chunks/Small.WAei-xw_.js","assets/chunks/WithDestructivePrimary.OK5vQ2N6.js","assets/chunks/WithPrimary.0VSlBVHd.js","assets/chunks/WithPrimaryAndSecondary.l92WM3gu.js","assets/chunks/WithScrollListener.GlklQ5VA.js","assets/chunks/WithoutTitle._k3BTlRZ.js","assets/chunks/Default.NJrKA5bU.js","assets/chunks/InPopover.cATaJXRq.js","assets/chunks/Multiple.QwYqg0xJ.js","assets/chunks/WithSection.CUZ6v9DP.js","assets/chunks/Default.RUMrdTMk.js","assets/chunks/PageFullWidth.h5qJPtz0.js","assets/chunks/PageNarrowWidth.uugmZKRn.js","assets/chunks/PageWithActionGroups.XNa_v2oh.js","assets/chunks/PageWithContentAfterTitle.DIBWpwZ7.js","assets/chunks/PageWithCustomPrimaryAction.lIuZTFXM.js","assets/chunks/PageWithCustomSecondaryAction.up4fVyxm.js","assets/chunks/PageWithDestructiveSecondaryAction.Z_YU5r5q.js","assets/chunks/PageWithExternalLink.Xx4jsbOw.js","assets/chunks/PageWithSubtitle.odwH0Z2I.js","assets/chunks/PageWithTooltipAction.dfP1Eqhp.js","assets/chunks/PageWithoutPagination.y_xdzEQF.js","assets/chunks/PageWithoutPrimaryActionInHeader.EpbTJBSe.js","assets/chunks/Default.Me4O4cj2.js","assets/chunks/WithCustomPrimaryAction.rsJDiawO.js","assets/chunks/WithCustomSecondaryAction.6FdbzSn4.js","assets/chunks/WithPrimaryOnly.8_ORcIby.js","assets/chunks/Default.7LOdzjVa.js","assets/chunks/Keyboard.z_be2zss.js","assets/chunks/PaginationWithKeyboardNavigation.dvCYgEcZ.js","assets/chunks/PaginationWithLabel.gZeI7k-n.js","assets/chunks/PaginationWithTableType.gPhBqkVc.js","assets/chunks/TableType.GcVTQveG.js","assets/chunks/WithLabel.nl5Ca3FI.js","assets/chunks/WithActionList.dxVx7IMO.js","assets/chunks/WithContentAndActions.XZ7hBz-J.js","assets/chunks/WithFormComponents.mht_k5nO.js","assets/chunks/Default.US4hy8sz.js","assets/chunks/ProgressBarColored.P0rTcWj2.js","assets/chunks/ProgressBarNonAnimated.nGODjTn_.js","assets/chunks/ProgressBarSmall.k3MLya5J.js","assets/chunks/Default.qvI0sXLC.js","assets/chunks/Default.7Zg_cpi7.js","assets/chunks/MinMax.dAD6bBEM.js","assets/chunks/PrefixSuffix.PX--uGqh.js","assets/chunks/Steps.YxvHkaSk.js","assets/chunks/WithDualThumb.ld6Jsvc9.js","assets/chunks/Default.QYISRjVs.js","assets/chunks/VerticalAlign.Eoq68U_q.js","assets/chunks/WithMedia.IDfcE1DK.js","assets/chunks/WithShortcutActions.x0X3iLGN.js","assets/chunks/AlternateTool.vyp0jUqz.js","assets/chunks/CustomEmptySearchResultState.WTTd_pIM.js","assets/chunks/Default.DnkOx-WB.js","assets/chunks/ItemShortcutAction.HbM-WT0c.js","assets/chunks/Loading.q5jTr74F.js","assets/chunks/MultiSelect.ZkzOJxHm.js","assets/chunks/PersistAction.d9waI4HY.js","assets/chunks/Sorting.5mxqwtpr.js","assets/chunks/TotalCount.qKGOT6rn.js","assets/chunks/WithAllElements.VDEslLIy.js","assets/chunks/WithBulkActions.FDjfQT-J.js","assets/chunks/WithEmptyState.DobXeijj.js","assets/chunks/WithFilter.JVQdfQzz.js","assets/chunks/WithPagination.DQtSKVeq.js","assets/chunks/WithSectionsAndNoBulkActions.BXUwpCb6.js","assets/chunks/Default.vGTxoNwb.js","assets/chunks/ToChild.ahCLzuWO.js","assets/chunks/WithGutter.G4CYXZVT.js","assets/chunks/Default.LEz2RZax.js","assets/chunks/Disabled.p_CFgMKA.js","assets/chunks/InlineLabel.E9JmoNn3.js","assets/chunks/SeparateValidationError.a_GKLAR5.js","assets/chunks/ValidationError.ZEnOFBQo.js","assets/chunks/WithPrefix.F-Sqlm5N.js","assets/chunks/Default.M0m9r6Tz.js","assets/chunks/SkeletonBodyTextSingleLineContent.MtHXZrcY.js","assets/chunks/Default.R61rVjuU.js","assets/chunks/SkeletonDisplayTextExtraLarge.j6rDLPM8.js","assets/chunks/SkeletonDisplayTextSmall.1W1l96jD.js","assets/chunks/Default.6DS9fIsE.js","assets/chunks/SkeletonPageWithStaticContent._fQO8gyU.js","assets/chunks/Default.5J_ytxZ7.js","assets/chunks/SkeletonTabsFitted.EzlC5Hcm.js","assets/chunks/SkeletonTabsWithCustomCount.Znx09jjS.js","assets/chunks/Default.7huvqzTx.js","assets/chunks/SkeletonThumbnailExtraSmall.cmk5t_NN.js","assets/chunks/SkeletonThumbnailLarge.XPzRV0OL.js","assets/chunks/SkeletonThumbnailSmall.c7tSYbPM.js","assets/chunks/Default.D4r1xanP.js","assets/chunks/FocusManagement.U-wC2FDI.js","assets/chunks/Small.d1YwL9b2.js","assets/chunks/Default.xNs9Oi7E.js","assets/chunks/TabWithBadgeContent.BnXMdlZK.js","assets/chunks/TabWithCustomDisclosure.kMVQfn-u.js","assets/chunks/TabsFitted.rL8jYmlZ.js","assets/chunks/TabsInsideCard.zkk6ATMk.js","assets/chunks/TabsWithActions.xSEs8JfK.js","assets/chunks/Clickable.grPPEuQG.js","assets/chunks/CustomContent.5nxzJZS2.js","assets/chunks/Default.EImNO4uG.js","assets/chunks/Removable.HzOI9d7n.js","assets/chunks/RemovableLarge.aPM0jh1K.js","assets/chunks/RemovableWithLink.w4yFo5fL.js","assets/chunks/WithLink.qw2p1Gqa.js","assets/chunks/Align.HFHpmsGk.js","assets/chunks/Body.VPp8QhES.js","assets/chunks/Decoration.h5IR4gWm.js","assets/chunks/Heading.JZYGLryO.js","assets/chunks/Inheritance.vrVNAaLJ.js","assets/chunks/Tone.h4aogG4Q.js","assets/chunks/Weight.hvENJIWY.js","assets/chunks/Default.smBvE9vg.js","assets/chunks/TextContainerLoose.QhJJpygz.js","assets/chunks/TextContainerTight.if70ArQk.js","assets/chunks/AutoSize.9oDCNNvk.js","assets/chunks/AutoSizeDynamicSuffix.mLEj4sZ2.js","assets/chunks/CharacterCount.39HBrKbY.js","assets/chunks/ClearButton.2SfuD0lo.js","assets/chunks/ConnectedFields.Gj1Qxitu.js","assets/chunks/Default.1xXUdyxa.js","assets/chunks/Disabled.TMdBvu4p.js","assets/chunks/Email.TiqNV63I.js","assets/chunks/HelpText.93xNqd4_.js","assets/chunks/HiddenLabel.nkg77OH0.js","assets/chunks/InlineSuggestion.DuZuhnU1.js","assets/chunks/LabelAction.qqZmB66n.js","assets/chunks/MonospacedFont.VSmJ5DAL.js","assets/chunks/Multiline.FlW-gLJw.js","assets/chunks/Number.dD4zJsNX.js","assets/chunks/PlaceholderText.1j-USpUm.js","assets/chunks/PrefixSuffix.NNj2KrBM.js","assets/chunks/RightAlignText.a8aV8VTK.js","assets/chunks/SeparateValidationError.sgcrb6hs.js","assets/chunks/ValidationError.Xde40-xa.js","assets/chunks/ValueSelectedOnFocus.Z-fyT4gX.js","assets/chunks/VerticalContent.EjIKJ7sW.js","assets/chunks/WithLoading.FVaphpcj.js","assets/chunks/Default.8ioOvWQO.js","assets/chunks/ThumbnailExtraSmall.Jlkdxh1W.js","assets/chunks/ThumbnailLarge.qIzGKMAO.js","assets/chunks/ThumbnailSmall.3RMqnM2U.js","assets/chunks/ThumbnailWithComponentSource.iNHMaWS0.js","assets/chunks/ChildInteract.xZcNZa1J.js","assets/chunks/Default.WSWYbwDa.js","assets/chunks/PersistentOnClick.gcIXasdC.js","assets/chunks/Suffix.Myb8MWam.js","assets/chunks/Default.W-O4eWfi.js","assets/chunks/VideoThumbnailWithProgress.MMSJr0qs.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}